"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _dlv = _interopRequireDefault(require("dlv"));

var _didyoumean = _interopRequireDefault(require("didyoumean"));

var _transformThemeValue = _interopRequireDefault(require("../util/transformThemeValue"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _normalizeScreens = require("../util/normalizeScreens");

var _buildMediaQuery = _interopRequireDefault(require("../util/buildMediaQuery"));

var _toPath = require("../util/toPath");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isObject(input) {
  return _typeof(input) === 'object' && input !== null;
}

function findClosestExistingPath(theme, path) {
  var parts = (0, _toPath.toPath)(path);

  do {
    parts.pop();
    if ((0, _dlv["default"])(theme, parts) !== undefined) break;
  } while (parts.length);

  return parts.length ? parts : undefined;
}

function pathToString(path) {
  if (typeof path === 'string') return path;
  return path.reduce(function (acc, cur, i) {
    if (cur.includes('.')) return "".concat(acc, "[").concat(cur, "]");
    return i === 0 ? cur : "".concat(acc, ".").concat(cur);
  }, '');
}

function list(items) {
  return items.map(function (key) {
    return "'".concat(key, "'");
  }).join(', ');
}

function listKeys(obj) {
  return list(Object.keys(obj));
}

function validatePath(config, path, defaultValue) {
  var pathString = Array.isArray(path) ? pathToString(path) : path.replace(/^['"]+/g, '').replace(/['"]+$/g, '');
  var pathSegments = Array.isArray(path) ? path : (0, _toPath.toPath)(pathString);
  var value = (0, _dlv["default"])(config.theme, pathSegments, defaultValue);

  if (value === undefined) {
    var error = "'".concat(pathString, "' does not exist in your theme config.");
    var parentSegments = pathSegments.slice(0, -1);
    var parentValue = (0, _dlv["default"])(config.theme, parentSegments);

    if (isObject(parentValue)) {
      var validKeys = Object.keys(parentValue).filter(function (key) {
        return validatePath(config, [].concat(_toConsumableArray(parentSegments), [key])).isValid;
      });
      var suggestion = (0, _didyoumean["default"])(pathSegments[pathSegments.length - 1], validKeys);

      if (suggestion) {
        error += " Did you mean '".concat(pathToString([].concat(_toConsumableArray(parentSegments), [suggestion])), "'?");
      } else if (validKeys.length > 0) {
        error += " '".concat(pathToString(parentSegments), "' has the following valid keys: ").concat(list(validKeys));
      }
    } else {
      var closestPath = findClosestExistingPath(config.theme, pathString);

      if (closestPath) {
        var closestValue = (0, _dlv["default"])(config.theme, closestPath);

        if (isObject(closestValue)) {
          error += " '".concat(pathToString(closestPath), "' has the following keys: ").concat(listKeys(closestValue));
        } else {
          error += " '".concat(pathToString(closestPath), "' is not an object.");
        }
      } else {
        error += " Your theme has the following top-level keys: ".concat(listKeys(config.theme));
      }
    }

    return {
      isValid: false,
      error: error
    };
  }

  if (!(typeof value === 'string' || typeof value === 'number' || typeof value === 'function' || value instanceof String || value instanceof Number || Array.isArray(value))) {
    var _error = "'".concat(pathString, "' was found but does not resolve to a string.");

    if (isObject(value)) {
      var _validKeys = Object.keys(value).filter(function (key) {
        return validatePath(config, [].concat(_toConsumableArray(pathSegments), [key])).isValid;
      });

      if (_validKeys.length) {
        _error += " Did you mean something like '".concat(pathToString([].concat(_toConsumableArray(pathSegments), [_validKeys[0]])), "'?");
      }
    }

    return {
      isValid: false,
      error: _error
    };
  }

  var _pathSegments = _slicedToArray(pathSegments, 1),
      themeSection = _pathSegments[0];

  return {
    isValid: true,
    value: (0, _transformThemeValue["default"])(themeSection)(value)
  };
}

function extractArgs(node, vNodes, functions) {
  vNodes = vNodes.map(function (vNode) {
    return resolveVNode(node, vNode, functions);
  });
  var args = [''];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = vNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var vNode = _step.value;

      if (vNode.type === 'div' && vNode.value === ',') {
        args.push('');
      } else {
        args[args.length - 1] += _postcssValueParser["default"].stringify(vNode);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return args;
}

function resolveVNode(node, vNode, functions) {
  if (vNode.type === 'function' && functions[vNode.value] !== undefined) {
    var args = extractArgs(node, vNode.nodes, functions);
    vNode.type = 'word';
    vNode.value = functions[vNode.value].apply(functions, [node].concat(_toConsumableArray(args)));
  }

  return vNode;
}

function resolveFunctions(node, input, functions) {
  return (0, _postcssValueParser["default"])(input).walk(function (vNode) {
    resolveVNode(node, vNode, functions);
  }).toString();
}

var nodeTypePropertyMap = {
  atrule: 'params',
  decl: 'value'
};

function _default(_ref) {
  var config = _ref.tailwindConfig;
  var functions = {
    theme: function theme(node, path) {
      for (var _len = arguments.length, defaultValue = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        defaultValue[_key - 2] = arguments[_key];
      }

      var _validatePath = validatePath(config, path, defaultValue.length ? defaultValue : undefined),
          isValid = _validatePath.isValid,
          value = _validatePath.value,
          error = _validatePath.error;

      if (!isValid) {
        throw node.error(error);
      }

      return value;
    },
    screen: function screen(node, _screen) {
      _screen = _screen.replace(/^['"]+/g, '').replace(/['"]+$/g, '');
      var screens = (0, _normalizeScreens.normalizeScreens)(config.theme.screens);
      var screenDefinition = screens.find(function (_ref2) {
        var name = _ref2.name;
        return name === _screen;
      });

      if (!screenDefinition) {
        throw node.error("The '".concat(_screen, "' screen does not exist in your theme."));
      }

      return (0, _buildMediaQuery["default"])(screenDefinition);
    }
  };
  return function (root) {
    root.walk(function (node) {
      var property = nodeTypePropertyMap[node.type];

      if (property === undefined) {
        return;
      }

      node[property] = resolveFunctions(node, node[property], functions);
    });
  };
}