"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = expandApplyAtRules;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssSelectorParser = _interopRequireDefault(require("postcss-selector-parser"));

var _generateRules = require("./generateRules");

var _bigSign = _interopRequireDefault(require("../util/bigSign"));

var _escapeClassName = _interopRequireDefault(require("../util/escapeClassName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function extractClasses(node) {
  var classes = new Set();

  var container = _postcss["default"].root({
    nodes: [node.clone()]
  });

  container.walkRules(function (rule) {
    (0, _postcssSelectorParser["default"])(function (selectors) {
      selectors.walkClasses(function (classSelector) {
        classes.add(classSelector.value);
      });
    }).processSync(rule.selector);
  });
  return Array.from(classes);
}

function extractBaseCandidates(candidates, separator) {
  var baseClasses = new Set();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = candidates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var candidate = _step.value;
      baseClasses.add(candidate.split(separator).pop());
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return Array.from(baseClasses);
}

function prefix(context, selector) {
  var prefix = context.tailwindConfig.prefix;
  return typeof prefix === 'function' ? prefix(selector) : prefix + selector;
}

function buildApplyCache(applyCandidates, context) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = applyCandidates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var candidate = _step2.value;

      if (context.notClassCache.has(candidate) || context.applyClassCache.has(candidate)) {
        continue;
      }

      if (context.classCache.has(candidate)) {
        context.applyClassCache.set(candidate, context.classCache.get(candidate).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              meta = _ref2[0],
              rule = _ref2[1];

          return [meta, rule.clone()];
        }));
        continue;
      }

      var matches = Array.from((0, _generateRules.resolveMatches)(candidate, context));

      if (matches.length === 0) {
        context.notClassCache.add(candidate);
        continue;
      }

      context.applyClassCache.set(candidate, matches);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return context.applyClassCache;
}

function extractApplyCandidates(params) {
  var candidates = params.split(/[\s\t\n]+/g);

  if (candidates[candidates.length - 1] === '!important') {
    return [candidates.slice(0, -1), true];
  }

  return [candidates, false];
}

function processApply(root, context) {
  var applyCandidates = new Set(); // Collect all @apply rules and candidates

  var applies = [];
  root.walkAtRules('apply', function (rule) {
    var _extractApplyCandidat = extractApplyCandidates(rule.params),
        _extractApplyCandidat2 = _slicedToArray(_extractApplyCandidat, 1),
        candidates = _extractApplyCandidat2[0];

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = candidates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var util = _step3.value;
        applyCandidates.add(util);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    applies.push(rule);
  }); // Start the @apply process if we have rules with @apply in them

  if (applies.length > 0) {
    (function () {
      /**
       * When we have an apply like this:
       *
       * .abc {
       *    @apply hover:font-bold;
       * }
       *
       * What we essentially will do is resolve to this:
       *
       * .abc {
       *    @apply .hover\:font-bold:hover {
       *      font-weight: 500;
       *    }
       * }
       *
       * Notice that the to-be-applied class is `.hover\:font-bold:hover` and that the utility candidate was `hover:font-bold`.
       * What happens in this function is that we prepend a `.` and escape the candidate.
       * This will result in `.hover\:font-bold`
       * Which means that we can replace `.hover\:font-bold` with `.abc` in `.hover\:font-bold:hover` resulting in `.abc:hover`
       */
      // TODO: Should we use postcss-selector-parser for this instead?
      var replaceSelector = function replaceSelector(selector, utilitySelectors, candidate) {
        var needle = ".".concat((0, _escapeClassName["default"])(candidate));
        var utilitySelectorsList = utilitySelectors.split(/\s*\,(?![^(]*\))\s*/g);
        return selector.split(/\s*\,(?![^(]*\))\s*/g).map(function (s) {
          var replaced = [];
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = utilitySelectorsList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var utilitySelector = _step4.value;
              var replacedSelector = utilitySelector.replace(needle, s);

              if (replacedSelector === utilitySelector) {
                continue;
              }

              replaced.push(replacedSelector);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          return replaced.join(', ');
        }).join(', ');
      };

      // Fill up some caches!
      var applyClassCache = buildApplyCache(applyCandidates, context);
      var perParentApplies = new Map(); // Collect all apply candidates and their rules

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = applies[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var apply = _step5.value;
          var candidates = perParentApplies.get(apply.parent) || [];
          perParentApplies.set(apply.parent, candidates);

          var _extractApplyCandidat3 = extractApplyCandidates(apply.params),
              _extractApplyCandidat4 = _slicedToArray(_extractApplyCandidat3, 2),
              _applyCandidates = _extractApplyCandidat4[0],
              important = _extractApplyCandidat4[1];

          if (apply.parent.type === 'atrule') {
            if (apply.parent.name === 'screen') {
              (function () {
                var screenType = apply.parent.params;
                throw apply.error("@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ".concat(_applyCandidates.map(function (c) {
                  return "".concat(screenType, ":").concat(c);
                }).join(' '), " instead."));
              })();
            }

            throw apply.error("@apply is not supported within nested at-rules like @".concat(apply.parent.name, ". You can fix this by un-nesting @").concat(apply.parent.name, "."));
          }

          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = _applyCandidates[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var applyCandidate = _step8.value;

              if ([prefix(context, 'group'), prefix(context, 'peer')].includes(applyCandidate)) {
                // TODO: Link to specific documentation page with error code.
                throw apply.error("@apply should not be used with the '".concat(applyCandidate, "' utility"));
              }

              if (!applyClassCache.has(applyCandidate)) {
                throw apply.error("The `".concat(applyCandidate, "` class does not exist. If `").concat(applyCandidate, "` is a custom class, make sure it is defined within a `@layer` directive."));
              }

              var rules = applyClassCache.get(applyCandidate);
              candidates.push([applyCandidate, important, rules]);
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        var _loop = function _loop() {
          var _step6$value = _slicedToArray(_step6.value, 2),
              parent = _step6$value[0],
              candidates = _step6$value[1];

          var siblings = [];
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            var _loop2 = function _loop2() {
              var _step9$value = _slicedToArray(_step9.value, 3),
                  applyCandidate = _step9$value[0],
                  important = _step9$value[1],
                  rules = _step9$value[2];

              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                var _loop3 = function _loop3() {
                  var _step10$value = _slicedToArray(_step10.value, 2),
                      meta = _step10$value[0],
                      node = _step10$value[1];

                  var parentClasses = extractClasses(parent);
                  var nodeClasses = extractClasses(node); // Add base utility classes from the @apply node to the list of
                  // classes to check whether it intersects and therefore results in a
                  // circular dependency or not.
                  //
                  // E.g.:
                  // .foo {
                  //   @apply hover:a; // This applies "a" but with a modifier
                  // }
                  //
                  // We only have to do that with base classes of the `node`, not of the `parent`
                  // E.g.:
                  // .hover\:foo {
                  //   @apply bar;
                  // }
                  // .bar {
                  //   @apply foo;
                  // }
                  //
                  // This should not result in a circular dependency because we are
                  // just applying `.foo` and the rule above is `.hover\:foo` which is
                  // unrelated. However, if we were to apply `hover:foo` then we _did_
                  // have to include this one.

                  nodeClasses = nodeClasses.concat(extractBaseCandidates(nodeClasses, context.tailwindConfig.separator));
                  var intersects = parentClasses.some(function (selector) {
                    return nodeClasses.includes(selector);
                  });

                  if (intersects) {
                    throw node.error("You cannot `@apply` the `".concat(applyCandidate, "` utility here because it creates a circular dependency."));
                  }

                  var root = _postcss["default"].root({
                    nodes: [node.clone()]
                  });

                  var canRewriteSelector = node.type !== 'atrule' || node.type === 'atrule' && node.name !== 'keyframes';

                  if (canRewriteSelector) {
                    root.walkRules(function (rule) {
                      // Let's imagine you have the following structure:
                      //
                      // .foo {
                      //   @apply bar;
                      // }
                      //
                      // @supports (a: b) {
                      //   .bar {
                      //     color: blue
                      //   }
                      //
                      //   .something-unrelated {}
                      // }
                      //
                      // In this case we want to apply `.bar` but it happens to be in
                      // an atrule node. We clone that node instead of the nested one
                      // because we still want that @supports rule to be there once we
                      // applied everything.
                      //
                      // However it happens to be that the `.something-unrelated` is
                      // also in that same shared @supports atrule. This is not good,
                      // and this should not be there. The good part is that this is
                      // a clone already and it can be safely removed. The question is
                      // how do we know we can remove it. Basically what we can do is
                      // match it against the applyCandidate that you want to apply. If
                      // it doesn't match the we can safely delete it.
                      //
                      // If we didn't do this, then the `replaceSelector` function
                      // would have replaced this with something that didn't exist and
                      // therefore it removed the selector altogether. In this specific
                      // case it would result in `{}` instead of `.something-unrelated {}`
                      if (!extractClasses(rule).some(function (candidate) {
                        return candidate === applyCandidate;
                      })) {
                        rule.remove();
                        return;
                      }

                      rule.selector = replaceSelector(parent.selector, rule.selector, applyCandidate);
                      rule.walkDecls(function (d) {
                        d.important = meta.important || important;
                      });
                    });
                  } // Insert it


                  siblings.push([// Ensure that when we are sorting, that we take the layer order into account
                  _objectSpread({}, meta, {
                    sort: meta.sort | context.layerOrder[meta.layer]
                  }), root.nodes[0]]);
                };

                for (var _iterator10 = rules[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  _loop3();
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
            };

            for (var _iterator9 = candidates[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              _loop2();
            } // Inject the rules, sorted, correctly

          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          var nodes = siblings.sort(function (_ref3, _ref4) {
            var _ref5 = _slicedToArray(_ref3, 1),
                a = _ref5[0];

            var _ref6 = _slicedToArray(_ref4, 1),
                z = _ref6[0];

            return (0, _bigSign["default"])(a.sort - z.sort);
          }).map(function (s) {
            return s[1];
          }); // `parent` refers to the node at `.abc` in: .abc { @apply mt-2 }

          parent.after(nodes);
        };

        for (var _iterator6 = perParentApplies[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = applies[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _apply = _step7.value;

          // If there are left-over declarations, just remove the @apply
          if (_apply.parent.nodes.length > 1) {
            _apply.remove();
          } else {
            // The node is empty, drop the full node
            _apply.parent.remove();
          }
        } // Do it again, in case we have other `@apply` rules

      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      processApply(root, context);
    })();
  }
}

function expandApplyAtRules(context) {
  return function (root) {
    processApply(root, context);
  };
}