#!/usr/bin/env node
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _indexJs = require("../peers/index.js");

var _chokidar = _interopRequireDefault(require("chokidar"));

var _path = _interopRequireDefault(require("path"));

var _arg = _interopRequireDefault(require("arg"));

var _fs = _interopRequireDefault(require("fs"));

var _postcssLoadConfig = _interopRequireDefault(require("postcss-load-config"));

var _cosmiconfig = require("cosmiconfig");

var _plugins // Little bit scary, looking at private/internal API
= _interopRequireDefault(require("postcss-load-config/src/plugins"));

var _processTailwindFeatures = _interopRequireDefault(require("./processTailwindFeatures"));

var _resolveConfig = _interopRequireDefault(require("../resolveConfig"));

var _fastGlob = _interopRequireDefault(require("fast-glob"));

var _getModuleDependencies = _interopRequireDefault(require("./lib/getModuleDependencies"));

var _log = _interopRequireDefault(require("./util/log"));

var _packageJson = _interopRequireDefault(require("../package.json"));

var _normalizePath = _interopRequireDefault(require("normalize-path"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var env = {
  DEBUG: process.env.DEBUG !== undefined && process.env.DEBUG !== '0'
}; // ---

function indentRecursive(node) {
  var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  node.each && node.each(function (child, i) {
    if (!child.raws.before || !child.raws.before.trim() || child.raws.before.includes('\n')) {
      child.raws.before = "\n".concat(node.type !== 'rule' && i > 0 ? '\n' : '').concat('  '.repeat(indent));
    }

    child.raws.after = "\n".concat('  '.repeat(indent));
    indentRecursive(child, indent + 1);
  });
}

function formatNodes(root) {
  indentRecursive(root);

  if (root.first) {
    root.first.raws.before = '';
  }
}

function outputFile(file, contents) {
  return regeneratorRuntime.async(function outputFile$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = _fs["default"].existsSync(file);

          if (!_context.t0) {
            _context.next = 7;
            break;
          }

          _context.next = 4;
          return regeneratorRuntime.awrap(_fs["default"].promises.readFile(file, 'utf8'));

        case 4:
          _context.t1 = _context.sent;
          _context.t2 = contents;
          _context.t0 = _context.t1 === _context.t2;

        case 7:
          if (!_context.t0) {
            _context.next = 9;
            break;
          }

          return _context.abrupt("return");

        case 9:
          _context.next = 11;
          return regeneratorRuntime.awrap(_fs["default"].promises.writeFile(file, contents, 'utf8'));

        case 11:
        case "end":
          return _context.stop();
      }
    }
  });
}

function drainStdin() {
  return new Promise(function (resolve, reject) {
    var result = '';
    process.stdin.on('data', function (chunk) {
      result += chunk;
    });
    process.stdin.on('end', function () {
      return resolve(result);
    });
    process.stdin.on('error', function (err) {
      return reject(err);
    });
  });
}

function help(_ref) {
  var message = _ref.message,
      usage = _ref.usage,
      commands1 = _ref.commands,
      options = _ref.options;
  var indent = 2; // Render header

  console.log();
  console.log("".concat(_packageJson["default"].name, " v").concat(_packageJson["default"].version)); // Render message

  if (message) {
    console.log();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = message.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var msg = _step.value;
        console.log(msg);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } // Render usage


  if (usage && usage.length > 0) {
    console.log();
    console.log('Usage:');
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = usage[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var example = _step2.value;
        console.log(' '.repeat(indent), example);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  } // Render commands


  if (commands1 && commands1.length > 0) {
    console.log();
    console.log('Commands:');
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = commands1[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var command1 = _step3.value;
        console.log(' '.repeat(indent), command1);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  } // Render options


  if (options) {
    var groupedOptions = {};

    for (var _i = 0, _Object$entries = Object.entries(options); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      if (_typeof(value) === 'object') {
        groupedOptions[key] = _objectSpread({}, value, {
          flags: [key]
        });
      } else {
        groupedOptions[value].flags.push(key);
      }
    }

    console.log();
    console.log('Options:');

    for (var _i2 = 0, _Object$values = Object.values(groupedOptions); _i2 < _Object$values.length; _i2++) {
      var _Object$values$_i = _Object$values[_i2],
          flags1 = _Object$values$_i.flags,
          description = _Object$values$_i.description,
          deprecated = _Object$values$_i.deprecated;
      if (deprecated) continue;

      if (flags1.length === 1) {
        console.log(' '.repeat(indent + 4
        /* 4 = "-i, ".length */
        ), flags1.slice().reverse().join(', ').padEnd(20, ' '), description);
      } else {
        console.log(' '.repeat(indent), flags1.slice().reverse().join(', ').padEnd(24, ' '), description);
      }
    }
  }

  console.log();
}

function oneOf() {
  for (var _len = arguments.length, options = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
    options[_key2] = arguments[_key2];
  }

  return Object.assign(function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = options[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var option = _step4.value;
        var parsed = option(value);

        if (parsed === value) {
          return parsed;
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    throw new Error('...');
  }, {
    manualParsing: true
  });
}

var commands = {
  init: {
    run: init,
    args: {
      '--full': {
        type: Boolean,
        description: 'Initialize a full `tailwind.config.js` file'
      },
      '--postcss': {
        type: Boolean,
        description: 'Initialize a `postcss.config.js` file'
      },
      '-f': '--full',
      '-p': '--postcss'
    }
  },
  build: {
    run: build,
    args: {
      '--input': {
        type: String,
        description: 'Input file'
      },
      '--output': {
        type: String,
        description: 'Output file'
      },
      '--watch': {
        type: Boolean,
        description: 'Watch for changes and rebuild as needed'
      },
      '--content': {
        type: String,
        description: 'Content paths to use for removing unused classes'
      },
      '--purge': {
        type: String,
        deprecated: true
      },
      '--postcss': {
        type: oneOf(String, Boolean),
        description: 'Load custom PostCSS configuration'
      },
      '--minify': {
        type: Boolean,
        description: 'Minify the output'
      },
      '--config': {
        type: String,
        description: 'Path to a custom config file'
      },
      '--no-autoprefixer': {
        type: Boolean,
        description: 'Disable autoprefixer'
      },
      '-c': '--config',
      '-i': '--input',
      '-o': '--output',
      '-m': '--minify',
      '-w': '--watch'
    }
  }
};
var sharedFlags = {
  '--help': {
    type: Boolean,
    description: 'Display usage information'
  },
  '-h': '--help'
};

if (process.stdout.isTTY
/* Detect redirecting output to a file */
&& (process.argv[2] === undefined || process.argv.slice(2).every(function (flag) {
  return sharedFlags[flag] !== undefined;
}))) {
  help({
    usage: ['tailwindcss [--input input.css] [--output output.css] [--watch] [options...]', 'tailwindcss init [--full] [--postcss] [options...]'],
    commands: Object.keys(commands).filter(function (command2) {
      return command2 !== 'build';
    }).map(function (command3) {
      return "".concat(command3, " [options]");
    }),
    options: _objectSpread({}, commands.build.args, {}, sharedFlags)
  });
  process.exit(0);
}

var command = function () {
  var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return arg.startsWith('-') ? undefined : arg;
}(process.argv[2]) || 'build';

if (commands[command] === undefined) {
  if (_fs["default"].existsSync(_path["default"].resolve(command))) {
    // TODO: Deprecate this in future versions
    // Check if non-existing command, might be a file.
    command = 'build';
  } else {
    help({
      message: "Invalid command: ".concat(command),
      usage: ['tailwindcss <command> [options]'],
      commands: Object.keys(commands).filter(function (command4) {
        return command4 !== 'build';
      }).map(function (command5) {
        return "".concat(command5, " [options]");
      }),
      options: sharedFlags
    });
    process.exit(1);
  }
} // Execute command


var _commands$command = commands[command],
    flags = _commands$command.args,
    run = _commands$command.run;

var args = function () {
  try {
    var result = (0, _arg)["default"](Object.fromEntries(Object.entries(_objectSpread({}, flags, {}, sharedFlags)).filter(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          _key = _ref3[0],
          value = _ref3[1];

      var ref;
      return !(value === null || value === void 0 ? void 0 : (ref = value.type) === null || ref === void 0 ? void 0 : ref.manualParsing);
    }).map(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
          key = _ref5[0],
          value = _ref5[1];

      return [key, _typeof(value) === 'object' ? value.type : value];
    })), {
      permissive: true
    }); // Manual parsing of flags to allow for special flags like oneOf(Boolean, String)

    for (var i = result['_'].length - 1; i >= 0; --i) {
      var flag = result['_'][i];
      if (!flag.startsWith('-')) continue;
      var flagName = flag;
      var handler = flags[flag]; // Resolve flagName & handler

      while (typeof handler === 'string') {
        flagName = handler;
        handler = flags[handler];
      }

      if (!handler) continue;
      var args1 = [];
      var offset = i + 1; // Parse args for current flag

      while (result['_'][offset] && !result['_'][offset].startsWith('-')) {
        args1.push(result['_'][offset++]);
      } // Cleanup manually parsed flags + args


      result['_'].splice(i, 1 + args1.length); // Set the resolved value in the `result` object

      result[flagName] = handler.type(args1.length === 0 ? undefined : args1.length === 1 ? args1[0] : args1, flagName);
    } // Ensure that the `command` is always the first argument in the `args`.
    // This is important so that we don't have to check if a default command
    // (build) was used or not from within each plugin.
    //
    // E.g.: tailwindcss input.css -> _: ['build', 'input.css']
    // E.g.: tailwindcss build input.css -> _: ['build', 'input.css']


    if (result['_'][0] !== command) {
      result['_'].unshift(command);
    }

    return result;
  } catch (err) {
    if (err.code === 'ARG_UNKNOWN_OPTION') {
      help({
        message: err.message,
        usage: ['tailwindcss <command> [options]'],
        options: sharedFlags
      });
      process.exit(1);
    }

    throw err;
  }
}();

if (args['--help']) {
  help({
    options: _objectSpread({}, flags, {}, sharedFlags),
    usage: ["tailwindcss ".concat(command, " [options]")]
  });
  process.exit(0);
}

run(); // ---

function init() {
  var messages = [];
  var ref;

  var tailwindConfigLocation = _path["default"].resolve((ref = args['_'][1]) !== null && ref !== void 0 ? ref : './tailwind.config.js');

  if (_fs["default"].existsSync(tailwindConfigLocation)) {
    messages.push("".concat(_path["default"].basename(tailwindConfigLocation), " already exists."));
  } else {
    var stubFile = _fs["default"].readFileSync(args['--full'] ? _path["default"].resolve(__dirname, '../stubs/defaultConfig.stub.js') : _path["default"].resolve(__dirname, '../stubs/simpleConfig.stub.js'), 'utf8'); // Change colors import


    stubFile = stubFile.replace('../colors', 'tailwindcss/colors');

    _fs["default"].writeFileSync(tailwindConfigLocation, stubFile, 'utf8');

    messages.push("Created Tailwind CSS config file: ".concat(_path["default"].basename(tailwindConfigLocation)));
  }

  if (args['--postcss']) {
    var postcssConfigLocation = _path["default"].resolve('./postcss.config.js');

    if (_fs["default"].existsSync(postcssConfigLocation)) {
      messages.push("".concat(_path["default"].basename(postcssConfigLocation), " already exists."));
    } else {
      var _stubFile = _fs["default"].readFileSync(_path["default"].resolve(__dirname, '../stubs/defaultPostCssConfig.stub.js'), 'utf8');

      _fs["default"].writeFileSync(postcssConfigLocation, _stubFile, 'utf8');

      messages.push("Created PostCSS config file: ".concat(_path["default"].basename(postcssConfigLocation)));
    }
  }

  if (messages.length > 0) {
    console.log();
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = messages[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var message = _step5.value;
        console.log(message);
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
          _iterator5["return"]();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  }
}

function build() {
  var input, output, shouldWatch, includePostCss, configPath, loadPostCssPlugins, resolveConfig, extractFileGlobs, extractRawContent, getChangedContent, buildOnce, context, startWatcher;
  return regeneratorRuntime.async(function build$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          startWatcher = function _ref27() {
            var changedContent, configDependencies, contextDependencies, watcher, refreshConfig, _ref14, _ref15, beforePlugins, afterPlugins, plugins, rebuild, config1, chain;

            return regeneratorRuntime.async(function startWatcher$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    rebuild = function _ref20(config) {
                      var tailwindPlugin, tailwindPluginIdx, copy, processor, processCSS, css2, result1;
                      return regeneratorRuntime.async(function rebuild$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              processCSS = function _ref18(css) {
                                var start = process.hrtime.bigint();
                                return Promise.resolve().then(function () {
                                  return output ? _fs["default"].promises.mkdir(_path["default"].dirname(output), {
                                    recursive: true
                                  }) : null;
                                }).then(function () {
                                  return processor.process(css, {
                                    from: input,
                                    to: output
                                  });
                                }).then(function _callee2(result) {
                                  var _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, message;

                                  return regeneratorRuntime.async(function _callee2$(_context5) {
                                    while (1) {
                                      switch (_context5.prev = _context5.next) {
                                        case 0:
                                          _iteratorNormalCompletion10 = true;
                                          _didIteratorError10 = false;
                                          _iteratorError10 = undefined;
                                          _context5.prev = 3;

                                          for (_iterator10 = result.messages[Symbol.iterator](); !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                                            message = _step10.value;

                                            if (message.type === 'dependency') {
                                              contextDependencies.add(message.file);
                                            }
                                          }

                                          _context5.next = 11;
                                          break;

                                        case 7:
                                          _context5.prev = 7;
                                          _context5.t0 = _context5["catch"](3);
                                          _didIteratorError10 = true;
                                          _iteratorError10 = _context5.t0;

                                        case 11:
                                          _context5.prev = 11;
                                          _context5.prev = 12;

                                          if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                                            _iterator10["return"]();
                                          }

                                        case 14:
                                          _context5.prev = 14;

                                          if (!_didIteratorError10) {
                                            _context5.next = 17;
                                            break;
                                          }

                                          throw _iteratorError10;

                                        case 17:
                                          return _context5.finish(14);

                                        case 18:
                                          return _context5.finish(11);

                                        case 19:
                                          watcher.add(_toConsumableArray(contextDependencies));

                                          if (output) {
                                            _context5.next = 22;
                                            break;
                                          }

                                          return _context5.abrupt("return", process.stdout.write(result.css));

                                        case 22:
                                          return _context5.abrupt("return", Promise.all([outputFile(output, result.css), result.map && outputFile(output + '.map', result.map.toString())].filter(Boolean)));

                                        case 23:
                                        case "end":
                                          return _context5.stop();
                                      }
                                    }
                                  }, null, null, [[3, 7, 11, 19], [12,, 14, 18]]);
                                }).then(function () {
                                  var end = process.hrtime.bigint();
                                  console.error('Done in', (end - start) / BigInt(1000000) + 'ms.');
                                })["catch"](function (err) {
                                  if (err.name === 'CssSyntaxError') {
                                    console.error(err.toString());
                                  } else {
                                    console.error(err);
                                  }
                                });
                              };

                              env.DEBUG && console.time('Finished in');

                              tailwindPlugin = function tailwindPlugin() {
                                return {
                                  postcssPlugin: 'tailwindcss',
                                  Once: function Once(root, _ref16) {
                                    var result = _ref16.result;
                                    env.DEBUG && console.time('Compiling CSS');
                                    (0, _processTailwindFeatures)["default"](function (_ref17) {
                                      var createContext = _ref17.createContext;
                                      console.error();
                                      console.error('Rebuilding...');
                                      return function () {
                                        if (context !== null) {
                                          context.changedContent = changedContent.splice(0);
                                          return context;
                                        }

                                        env.DEBUG && console.time('Creating context');
                                        context = createContext(config, changedContent.splice(0));
                                        env.DEBUG && console.timeEnd('Creating context');
                                        return context;
                                      };
                                    })(root, result);
                                    env.DEBUG && console.timeEnd('Compiling CSS');
                                  }
                                };
                              };

                              tailwindPlugin.postcss = true;
                              tailwindPluginIdx = plugins.indexOf('__TAILWIND_PLUGIN_POSITION__');
                              copy = plugins.slice();
                              copy.splice(tailwindPluginIdx, 1, tailwindPlugin);
                              processor = (0, _indexJs).postcss(copy);
                              _context6.next = 10;
                              return regeneratorRuntime.awrap(function () {
                                // Piping in data, let's drain the stdin
                                if (input === '-') {
                                  return drainStdin();
                                } // Input file has been provided


                                if (input) {
                                  return _fs["default"].readFileSync(_path["default"].resolve(input), 'utf8');
                                } // No input file provided, fallback to default atrules


                                return '@tailwind base; @tailwind components; @tailwind utilities';
                              }());

                            case 10:
                              css2 = _context6.sent;
                              _context6.next = 13;
                              return regeneratorRuntime.awrap(processCSS(css2));

                            case 13:
                              result1 = _context6.sent;
                              env.DEBUG && console.timeEnd('Finished in');
                              return _context6.abrupt("return", result1);

                            case 16:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      });
                    };

                    refreshConfig = function _ref19() {
                      env.DEBUG && console.time('Module dependencies');
                      var _iteratorNormalCompletion8 = true;
                      var _didIteratorError8 = false;
                      var _iteratorError8 = undefined;

                      try {
                        for (var _iterator8 = configDependencies[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                          var file1 = _step8.value;
                          delete require.cache[require.resolve(file1)];
                        }
                      } catch (err) {
                        _didIteratorError8 = true;
                        _iteratorError8 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                            _iterator8["return"]();
                          }
                        } finally {
                          if (_didIteratorError8) {
                            throw _iteratorError8;
                          }
                        }
                      }

                      if (configPath) {
                        configDependencies = (0, _getModuleDependencies)["default"](configPath).map(function (_ref13) {
                          var file = _ref13.file;
                          return file;
                        });
                        var _iteratorNormalCompletion9 = true;
                        var _didIteratorError9 = false;
                        var _iteratorError9 = undefined;

                        try {
                          for (var _iterator9 = configDependencies[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var dependency = _step9.value;
                            contextDependencies.add(dependency);
                          }
                        } catch (err) {
                          _didIteratorError9 = true;
                          _iteratorError9 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                              _iterator9["return"]();
                            }
                          } finally {
                            if (_didIteratorError9) {
                              throw _iteratorError9;
                            }
                          }
                        }
                      }

                      env.DEBUG && console.timeEnd('Module dependencies');
                      return resolveConfig();
                    };

                    changedContent = [];
                    configDependencies = [];
                    contextDependencies = new Set();
                    watcher = null;

                    if (!includePostCss) {
                      _context12.next = 12;
                      break;
                    }

                    _context12.next = 9;
                    return regeneratorRuntime.awrap(loadPostCssPlugins());

                  case 9:
                    _context12.t0 = _context12.sent;
                    _context12.next = 13;
                    break;

                  case 12:
                    _context12.t0 = [[], []];

                  case 13:
                    _ref14 = _context12.t0;
                    _ref15 = _slicedToArray(_ref14, 2);
                    beforePlugins = _ref15[0];
                    afterPlugins = _ref15[1];
                    plugins = [].concat(_toConsumableArray(beforePlugins), ['__TAILWIND_PLUGIN_POSITION__', !args['--minify'] && formatNodes], _toConsumableArray(afterPlugins), [!args['--no-autoprefixer'] && function () {
                      // Try to load a local `autoprefixer` version first
                      try {
                        return require('autoprefixer');
                      } catch (_unused3) {}

                      return (0, _indexJs).lazyAutoprefixer();
                    }(), args['--minify'] && function () {
                      var options = {
                        preset: ['default', {
                          cssDeclarationSorter: false
                        }]
                      }; // Try to load a local `cssnano` version first

                      try {
                        return require('cssnano');
                      } catch (_unused4) {}

                      return (0, _indexJs).lazyCssnano()(options);
                    }()]).filter(Boolean);
                    config1 = refreshConfig(configPath);

                    if (input) {
                      contextDependencies.add(_path["default"].resolve(input));
                    }

                    watcher = _chokidar["default"].watch([].concat(_toConsumableArray(contextDependencies), _toConsumableArray(extractFileGlobs(config1))), {
                      ignoreInitial: true,
                      awaitWriteFinish: process.platform === 'win32' ? {
                        stabilityThreshold: 50,
                        pollInterval: 10
                      } : false
                    });
                    chain = Promise.resolve();
                    watcher.on('change', function _callee5(file) {
                      var globs;
                      return regeneratorRuntime.async(function _callee5$(_context9) {
                        while (1) {
                          switch (_context9.prev = _context9.next) {
                            case 0:
                              if (contextDependencies.has(file)) {
                                env.DEBUG && console.time('Resolve config');
                                context = null;
                                config1 = refreshConfig(configPath);
                                env.DEBUG && console.timeEnd('Resolve config');
                                env.DEBUG && console.time('Watch new files');
                                globs = extractFileGlobs(config1);
                                watcher.add(configDependencies);
                                watcher.add(globs);
                                env.DEBUG && console.timeEnd('Watch new files');
                                chain = chain.then(function _callee3() {
                                  return regeneratorRuntime.async(function _callee3$(_context7) {
                                    while (1) {
                                      switch (_context7.prev = _context7.next) {
                                        case 0:
                                          changedContent.push.apply(changedContent, _toConsumableArray(getChangedContent(config1)));
                                          _context7.next = 3;
                                          return regeneratorRuntime.awrap(rebuild(config1));

                                        case 3:
                                        case "end":
                                          return _context7.stop();
                                      }
                                    }
                                  });
                                });
                              } else {
                                chain = chain.then(function _callee4() {
                                  return regeneratorRuntime.async(function _callee4$(_context8) {
                                    while (1) {
                                      switch (_context8.prev = _context8.next) {
                                        case 0:
                                          changedContent.push({
                                            content: _fs["default"].readFileSync(_path["default"].resolve(file), 'utf8'),
                                            extension: _path["default"].extname(file).slice(1)
                                          });
                                          _context8.next = 3;
                                          return regeneratorRuntime.awrap(rebuild(config1));

                                        case 3:
                                        case "end":
                                          return _context8.stop();
                                      }
                                    }
                                  });
                                });
                              }

                            case 1:
                            case "end":
                              return _context9.stop();
                          }
                        }
                      });
                    });
                    watcher.on('add', function _callee7(file) {
                      return regeneratorRuntime.async(function _callee7$(_context11) {
                        while (1) {
                          switch (_context11.prev = _context11.next) {
                            case 0:
                              chain = chain.then(function _callee6() {
                                return regeneratorRuntime.async(function _callee6$(_context10) {
                                  while (1) {
                                    switch (_context10.prev = _context10.next) {
                                      case 0:
                                        changedContent.push({
                                          content: _fs["default"].readFileSync(_path["default"].resolve(file), 'utf8'),
                                          extension: _path["default"].extname(file).slice(1)
                                        });
                                        _context10.next = 3;
                                        return regeneratorRuntime.awrap(rebuild(config1));

                                      case 3:
                                      case "end":
                                        return _context10.stop();
                                    }
                                  }
                                });
                              });

                            case 1:
                            case "end":
                              return _context11.stop();
                          }
                        }
                      });
                    });
                    chain = chain.then(function () {
                      changedContent.push.apply(changedContent, _toConsumableArray(getChangedContent(config1)));
                      return rebuild(config1);
                    });

                  case 25:
                  case "end":
                    return _context12.stop();
                }
              }
            });
          };

          buildOnce = function _ref26() {
            var config, changedContent, tailwindPlugin, _ref10, _ref11, beforePlugins, afterPlugins, plugins, processor, processCSS, css1;

            return regeneratorRuntime.async(function buildOnce$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    processCSS = function _ref12(css) {
                      var start = process.hrtime.bigint();
                      return Promise.resolve().then(function () {
                        return output ? _fs["default"].promises.mkdir(_path["default"].dirname(output), {
                          recursive: true
                        }) : null;
                      }).then(function () {
                        return processor.process(css, {
                          from: input,
                          to: output
                        });
                      }).then(function (result) {
                        if (!output) {
                          return process.stdout.write(result.css);
                        }

                        return Promise.all([outputFile(output, result.css), result.map && outputFile(output + '.map', result.map.toString())].filter(Boolean));
                      }).then(function () {
                        var end = process.hrtime.bigint();
                        console.error();
                        console.error('Done in', (end - start) / BigInt(1000000) + 'ms.');
                      });
                    };

                    config = resolveConfig();
                    changedContent = getChangedContent(config);

                    tailwindPlugin = function tailwindPlugin() {
                      return {
                        postcssPlugin: 'tailwindcss',
                        Once: function Once(root, _ref8) {
                          var result = _ref8.result;
                          (0, _processTailwindFeatures)["default"](function (_ref9) {
                            var createContext = _ref9.createContext;
                            return function () {
                              return createContext(config, changedContent);
                            };
                          })(root, result);
                        }
                      };
                    };

                    tailwindPlugin.postcss = true;

                    if (!includePostCss) {
                      _context4.next = 11;
                      break;
                    }

                    _context4.next = 8;
                    return regeneratorRuntime.awrap(loadPostCssPlugins());

                  case 8:
                    _context4.t0 = _context4.sent;
                    _context4.next = 12;
                    break;

                  case 11:
                    _context4.t0 = [[], []];

                  case 12:
                    _ref10 = _context4.t0;
                    _ref11 = _slicedToArray(_ref10, 2);
                    beforePlugins = _ref11[0];
                    afterPlugins = _ref11[1];
                    plugins = [].concat(_toConsumableArray(beforePlugins), [tailwindPlugin, !args['--minify'] && formatNodes], _toConsumableArray(afterPlugins), [!args['--no-autoprefixer'] && function () {
                      // Try to load a local `autoprefixer` version first
                      try {
                        return require('autoprefixer');
                      } catch (_unused) {}

                      return (0, _indexJs).lazyAutoprefixer();
                    }(), args['--minify'] && function () {
                      var options = {
                        preset: ['default', {
                          cssDeclarationSorter: false
                        }]
                      }; // Try to load a local `cssnano` version first

                      try {
                        return require('cssnano');
                      } catch (_unused2) {}

                      return (0, _indexJs).lazyCssnano()(options);
                    }()]).filter(Boolean);
                    processor = (0, _indexJs).postcss(plugins);
                    _context4.next = 20;
                    return regeneratorRuntime.awrap(function () {
                      // Piping in data, let's drain the stdin
                      if (input === '-') {
                        return drainStdin();
                      } // Input file has been provided


                      if (input) {
                        return _fs["default"].readFileSync(_path["default"].resolve(input), 'utf8');
                      } // No input file provided, fallback to default atrules


                      return '@tailwind base; @tailwind components; @tailwind utilities';
                    }());

                  case 20:
                    css1 = _context4.sent;
                    return _context4.abrupt("return", processCSS(css1));

                  case 22:
                  case "end":
                    return _context4.stop();
                }
              }
            });
          };

          getChangedContent = function _ref25(config) {
            var changedContent = []; // Resolve globs from the content config

            var globs = extractFileGlobs(config);

            var files = _fastGlob["default"].sync(globs);

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
              for (var _iterator6 = files[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var file = _step6.value;
                changedContent.push({
                  content: _fs["default"].readFileSync(_path["default"].resolve(file), 'utf8'),
                  extension: _path["default"].extname(file).slice(1)
                });
              } // Resolve raw content in the tailwind config

            } catch (err) {
              _didIteratorError6 = true;
              _iteratorError6 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                  _iterator6["return"]();
                }
              } finally {
                if (_didIteratorError6) {
                  throw _iteratorError6;
                }
              }
            }

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = extractRawContent(config)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var _step7$value = _step7.value,
                    content = _step7$value.raw,
                    _step7$value$extensio = _step7$value.extension,
                    extension = _step7$value$extensio === void 0 ? 'html' : _step7$value$extensio;
                changedContent.push({
                  content: content,
                  extension: extension
                });
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                  _iterator7["return"]();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }

            return changedContent;
          };

          extractRawContent = function _ref24(config) {
            return config.content.files.filter(function (file) {
              return _typeof(file) === 'object' && file !== null;
            });
          };

          extractFileGlobs = function _ref23(config) {
            return config.content.files.filter(function (file) {
              // Strings in this case are files / globs. If it is something else,
              // like an object it's probably a raw content object. But this object
              // is not watchable, so let's remove it.
              return typeof file === 'string';
            }).map(function (glob) {
              return (0, _normalizePath)["default"](glob);
            });
          };

          resolveConfig = function _ref22() {
            var config = configPath ? require(configPath) : {};

            if (args['--purge']) {
              _log["default"].warn('purge-flag-deprecated', ['The `--purge` flag has been deprecated.', 'Please use `--content` instead.']);

              if (!args['--content']) {
                args['--content'] = args['--purge'];
              }
            }

            if (args['--content']) {
              var files = args['--content'].split(/(?<!{[^}]+),/);
              var resolvedConfig = (0, _resolveConfig)["default"](config, {
                content: {
                  files: files
                }
              });
              resolvedConfig.content.files = files;
              return resolvedConfig;
            }

            return (0, _resolveConfig)["default"](config);
          };

          loadPostCssPlugins = function _ref21() {
            var customPostCssPath, _ref6, configPlugins, configPluginTailwindIdx, beforePlugins, afterPlugins;

            return regeneratorRuntime.async(function loadPostCssPlugins$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    customPostCssPath = typeof args['--postcss'] === 'string' ? args['--postcss'] : undefined;

                    if (!customPostCssPath) {
                      _context3.next = 7;
                      break;
                    }

                    _context3.next = 4;
                    return regeneratorRuntime.awrap(function _callee() {
                      var file, _ref7, _ref7$config, config;

                      return regeneratorRuntime.async(function _callee$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              file = _path["default"].resolve(customPostCssPath); // Implementation, see: https://unpkg.com/browse/postcss-load-config@3.0.1/src/index.js

                              _context2.next = 3;
                              return regeneratorRuntime.awrap((0, _cosmiconfig).cosmiconfig('postcss').load(file));

                            case 3:
                              _ref7 = _context2.sent;
                              _ref7$config = _ref7.config;
                              config = _ref7$config === void 0 ? {} : _ref7$config;

                              if (typeof config === 'function') {
                                config = config();
                              } else {
                                config = Object.assign({}, config);
                              }

                              if (!config.plugins) {
                                config.plugins = [];
                              }

                              return _context2.abrupt("return", {
                                plugins: (0, _plugins)["default"](config, file)
                              });

                            case 9:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      });
                    }());

                  case 4:
                    _context3.t0 = _context3.sent;
                    _context3.next = 10;
                    break;

                  case 7:
                    _context3.next = 9;
                    return regeneratorRuntime.awrap((0, _postcssLoadConfig)["default"]());

                  case 9:
                    _context3.t0 = _context3.sent;

                  case 10:
                    _ref6 = _context3.t0;
                    configPlugins = _ref6.plugins;
                    configPluginTailwindIdx = configPlugins.findIndex(function (plugin) {
                      if (typeof plugin === 'function' && plugin.name === 'tailwindcss') {
                        return true;
                      }

                      if (_typeof(plugin) === 'object' && plugin !== null && plugin.postcssPlugin === 'tailwindcss') {
                        return true;
                      }

                      return false;
                    });
                    beforePlugins = configPluginTailwindIdx === -1 ? [] : configPlugins.slice(0, configPluginTailwindIdx);
                    afterPlugins = configPluginTailwindIdx === -1 ? configPlugins : configPlugins.slice(configPluginTailwindIdx + 1);
                    return _context3.abrupt("return", [beforePlugins, afterPlugins]);

                  case 16:
                  case "end":
                    return _context3.stop();
                }
              }
            });
          };

          input = args['--input'];
          output = args['--output'];
          shouldWatch = args['--watch'];
          includePostCss = args['--postcss']; // TODO: Deprecate this in future versions

          if (!input && args['_'][1]) {
            console.error('[deprecation] Running tailwindcss without -i, please provide an input file.');
            input = args['--input'] = args['_'][1];
          }

          if (input && input !== '-' && !_fs["default"].existsSync(input = _path["default"].resolve(input))) {
            console.error("Specified input file ".concat(args['--input'], " does not exist."));
            process.exit(9);
          }

          if (args['--config'] && !_fs["default"].existsSync(args['--config'] = _path["default"].resolve(args['--config']))) {
            console.error("Specified config file ".concat(args['--config'], " does not exist."));
            process.exit(9);
          }

          configPath = args['--config'] ? args['--config'] : function (defaultPath) {
            return _fs["default"].existsSync(defaultPath) ? defaultPath : null;
          }(_path["default"].resolve('./tailwind.config.js'));
          context = null;

          if (shouldWatch) {
            /* Abort the watcher if stdin is closed to avoid zombie processes */
            process.stdin.on('end', function () {
              return process.exit(0);
            });
            process.stdin.resume();
            startWatcher();
          } else {
            buildOnce();
          }

        case 17:
        case "end":
          return _context13.stop();
      }
    }
  });
}