"use strict";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.corePlugins = exports.variantPlugins = void 0;

var _fs = _interopRequireDefault(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _postcss = _interopRequireDefault(require("postcss"));

var _createUtilityPlugin = _interopRequireDefault(require("./util/createUtilityPlugin"));

var _buildMediaQuery = _interopRequireDefault(require("./util/buildMediaQuery"));

var _parseAnimationValue = _interopRequireDefault(require("./util/parseAnimationValue"));

var _flattenColorPalette = _interopRequireDefault(require("./util/flattenColorPalette"));

var _withAlphaVariable = _interopRequireWildcard(require("./util/withAlphaVariable"));

var _toColorValue = _interopRequireDefault(require("./util/toColorValue"));

var _isPlainObject = _interopRequireDefault(require("./util/isPlainObject"));

var _transformThemeValue = _interopRequireDefault(require("./util/transformThemeValue"));

var _packageJson = require("../package.json");

var _log = _interopRequireDefault(require("./util/log"));

var _normalizeScreens = require("./util/normalizeScreens");

var _parseBoxShadowValue = require("./util/parseBoxShadowValue");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
}

var variantPlugins = {
  pseudoElementVariants: function pseudoElementVariants(_ref) {
    var addVariant = _ref.addVariant;
    addVariant('first-letter', '&::first-letter');
    addVariant('first-line', '&::first-line');
    addVariant('marker', ['& *::marker', '&::marker']);
    addVariant('selection', ['& *::selection', '&::selection']);
    addVariant('file', '&::file-selector-button');
    addVariant('placeholder', '&::placeholder');
    addVariant('before', function (_ref2) {
      var container = _ref2.container;
      container.walkRules(function (rule) {
        var foundContent = false;
        rule.walkDecls('content', function () {
          foundContent = true;
        });

        if (!foundContent) {
          rule.prepend(_postcss["default"].decl({
            prop: 'content',
            value: 'var(--tw-content)'
          }));
        }
      });
      return '&::before';
    });
    addVariant('after', function (_ref3) {
      var container = _ref3.container;
      container.walkRules(function (rule) {
        var foundContent = false;
        rule.walkDecls('content', function () {
          foundContent = true;
        });

        if (!foundContent) {
          rule.prepend(_postcss["default"].decl({
            prop: 'content',
            value: 'var(--tw-content)'
          }));
        }
      });
      return '&::after';
    });
  },
  pseudoClassVariants: function pseudoClassVariants(_ref4) {
    var addVariant = _ref4.addVariant;
    var pseudoVariants = [// Positional
    ['first', ':first-child'], ['last', ':last-child'], ['only', ':only-child'], ['odd', ':nth-child(odd)'], ['even', ':nth-child(even)'], 'first-of-type', 'last-of-type', 'only-of-type', // State
    ['visited', function (_ref5) {
      var container = _ref5.container;
      var toRemove = ['--tw-text-opacity', '--tw-border-opacity', '--tw-bg-opacity'];
      container.walkDecls(function (decl) {
        if (toRemove.includes(decl.prop)) {
          decl.remove();
          return;
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = toRemove[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var varName = _step.value;

            if (decl.value.includes("/ var(".concat(varName, ")"))) {
              decl.value = decl.value.replace("/ var(".concat(varName, ")"), '');
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      });
      return ':visited';
    }], 'target', ['open', '[open]'], // Forms
    'default', 'checked', 'indeterminate', 'placeholder-shown', 'autofill', 'required', 'valid', 'invalid', 'in-range', 'out-of-range', 'read-only', // Content
    'empty', // Interactive
    'focus-within', 'hover', 'focus', 'focus-visible', 'active', 'disabled'].map(function (variant) {
      return Array.isArray(variant) ? variant : [variant, ":".concat(variant)];
    });
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      var _loop = function _loop() {
        var _step2$value = _slicedToArray(_step2.value, 2),
            variantName = _step2$value[0],
            state = _step2$value[1];

        addVariant(variantName, function (ctx) {
          var result = typeof state === 'function' ? state(ctx) : state;
          return "&".concat(result);
        });
      };

      for (var _iterator2 = pseudoVariants[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      var _loop2 = function _loop2() {
        var _step3$value = _slicedToArray(_step3.value, 2),
            variantName1 = _step3$value[0],
            state1 = _step3$value[1];

        addVariant("group-".concat(variantName1), function (ctx) {
          var result = typeof state1 === 'function' ? state1(ctx) : state1;
          return ":merge(.group)".concat(result, " &");
        });
      };

      for (var _iterator3 = pseudoVariants[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        _loop2();
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      var _loop3 = function _loop3() {
        var _step4$value = _slicedToArray(_step4.value, 2),
            variantName2 = _step4$value[0],
            state2 = _step4$value[1];

        addVariant("peer-".concat(variantName2), function (ctx) {
          var result = typeof state2 === 'function' ? state2(ctx) : state2;
          return ":merge(.peer)".concat(result, " ~ &");
        });
      };

      for (var _iterator4 = pseudoVariants[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        _loop3();
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  },
  directionVariants: function directionVariants(_ref6) {
    var addVariant = _ref6.addVariant;
    addVariant('ltr', function () {
      _log["default"].warn('rtl-experimental', ['The RTL features in Tailwind CSS are currently in preview.', 'Preview features are not covered by semver, and may be improved in breaking ways at any time.']);

      return '[dir="ltr"] &';
    });
    addVariant('rtl', function () {
      _log["default"].warn('rtl-experimental', ['The RTL features in Tailwind CSS are currently in preview.', 'Preview features are not covered by semver, and may be improved in breaking ways at any time.']);

      return '[dir="rtl"] &';
    });
  },
  reducedMotionVariants: function reducedMotionVariants(_ref7) {
    var addVariant = _ref7.addVariant;
    addVariant('motion-safe', '@media (prefers-reduced-motion: no-preference)');
    addVariant('motion-reduce', '@media (prefers-reduced-motion: reduce)');
  },
  darkVariants: function darkVariants(_ref8) {
    var config = _ref8.config,
        addVariant = _ref8.addVariant;
    var mode = config('darkMode', 'media');

    if (mode === false) {
      mode = 'media';

      _log["default"].warn('darkmode-false', ['The `darkMode` option in your Tailwind CSS configuration is set to `false`, which now behaves the same as `media`.', 'Change `darkMode` to `media` or remove it entirely.', 'https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration']);
    }

    if (mode === 'class') {
      addVariant('dark', '.dark &');
    } else if (mode === 'media') {
      addVariant('dark', '@media (prefers-color-scheme: dark)');
    }
  },
  printVariant: function printVariant(_ref9) {
    var addVariant = _ref9.addVariant;
    addVariant('print', '@media print');
  },
  screenVariants: function screenVariants(_ref10) {
    var theme = _ref10.theme,
        addVariant = _ref10.addVariant;
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = (0, _normalizeScreens).normalizeScreens(theme('screens'))[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var screen = _step5.value;
        var query = (0, _buildMediaQuery)["default"](screen);
        addVariant(screen.name, "@media ".concat(query));
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
          _iterator5["return"]();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  },
  orientationVariants: function orientationVariants(_ref11) {
    var addVariant = _ref11.addVariant;
    addVariant('portrait', '@media (orientation: portrait)');
    addVariant('landscape', '@media (orientation: landscape)');
  }
};
exports.variantPlugins = variantPlugins;
var cssTransformValue = ['translate(var(--tw-translate-x), var(--tw-translate-y))', 'rotate(var(--tw-rotate))', 'skewX(var(--tw-skew-x))', 'skewY(var(--tw-skew-y))', 'scaleX(var(--tw-scale-x))', 'scaleY(var(--tw-scale-y))'].join(' ');
var cssFilterValue = ['var(--tw-blur)', 'var(--tw-brightness)', 'var(--tw-contrast)', 'var(--tw-grayscale)', 'var(--tw-hue-rotate)', 'var(--tw-invert)', 'var(--tw-saturate)', 'var(--tw-sepia)', 'var(--tw-drop-shadow)'].join(' ');
var cssBackdropFilterValue = ['var(--tw-backdrop-blur)', 'var(--tw-backdrop-brightness)', 'var(--tw-backdrop-contrast)', 'var(--tw-backdrop-grayscale)', 'var(--tw-backdrop-hue-rotate)', 'var(--tw-backdrop-invert)', 'var(--tw-backdrop-opacity)', 'var(--tw-backdrop-saturate)', 'var(--tw-backdrop-sepia)'].join(' ');
var corePlugins = {
  preflight: function preflight(_ref12) {
    var addBase = _ref12.addBase;

    var preflightStyles = _postcss["default"].parse(_fs["default"].readFileSync(path.join(__dirname, './css/preflight.css'), 'utf8'));

    addBase([_postcss["default"].comment({
      text: "! tailwindcss v".concat(_packageJson.version, " | MIT License | https://tailwindcss.com")
    })].concat(_toConsumableArray(preflightStyles.nodes)));
  },
  container: function () {
    function extractMinWidths() {
      var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return breakpoints.flatMap(function (breakpoint1) {
        return breakpoint1.values.map(function (breakpoint) {
          return breakpoint.min;
        });
      }).filter(function (v) {
        return v !== undefined;
      });
    }

    function mapMinWidthsToPadding(minWidths, screens, paddings) {
      if (typeof paddings === 'undefined') {
        return [];
      }

      if (!(_typeof(paddings) === 'object' && paddings !== null)) {
        return [{
          screen: 'DEFAULT',
          minWidth: 0,
          padding: paddings
        }];
      }

      var mapping = [];

      if (paddings.DEFAULT) {
        mapping.push({
          screen: 'DEFAULT',
          minWidth: 0,
          padding: paddings.DEFAULT
        });
      }

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = minWidths[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var minWidth = _step6.value;
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = screens[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var screen = _step7.value;
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = undefined;

              try {
                for (var _iterator8 = screen.values[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var min = _step8.value.min;

                  if (min === minWidth) {
                    mapping.push({
                      minWidth: minWidth,
                      padding: paddings[screen.name]
                    });
                  }
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                    _iterator8["return"]();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return mapping;
    }

    return function (_ref13) {
      var addComponents = _ref13.addComponents,
          theme = _ref13.theme;
      var screens = (0, _normalizeScreens).normalizeScreens(theme('container.screens', theme('screens')));
      var minWidths = extractMinWidths(screens);
      var paddings = mapMinWidthsToPadding(minWidths, screens, theme('container.padding'));

      var generatePaddingFor = function generatePaddingFor(minWidth) {
        var paddingConfig = paddings.find(function (padding) {
          return padding.minWidth === minWidth;
        });

        if (!paddingConfig) {
          return {};
        }

        return {
          paddingRight: paddingConfig.padding,
          paddingLeft: paddingConfig.padding
        };
      };

      var atRules = Array.from(new Set(minWidths.slice().sort(function (a, z) {
        return parseInt(a) - parseInt(z);
      }))).map(function (minWidth) {
        return _defineProperty({}, "@media (min-width: ".concat(minWidth, ")"), {
          '.container': _objectSpread({
            'max-width': minWidth
          }, generatePaddingFor(minWidth))
        });
      });
      addComponents([{
        '.container': Object.assign({
          width: '100%'
        }, theme('container.center', false) ? {
          marginRight: 'auto',
          marginLeft: 'auto'
        } : {}, generatePaddingFor(0))
      }].concat(_toConsumableArray(atRules)));
    };
  }(),
  accessibility: function accessibility(_ref15) {
    var addUtilities = _ref15.addUtilities;
    addUtilities({
      '.sr-only': {
        position: 'absolute',
        width: '1px',
        height: '1px',
        padding: '0',
        margin: '-1px',
        overflow: 'hidden',
        clip: 'rect(0, 0, 0, 0)',
        whiteSpace: 'nowrap',
        borderWidth: '0'
      },
      '.not-sr-only': {
        position: 'static',
        width: 'auto',
        height: 'auto',
        padding: '0',
        margin: '0',
        overflow: 'visible',
        clip: 'auto',
        whiteSpace: 'normal'
      }
    });
  },
  pointerEvents: function pointerEvents(_ref16) {
    var addUtilities = _ref16.addUtilities;
    addUtilities({
      '.pointer-events-none': {
        'pointer-events': 'none'
      },
      '.pointer-events-auto': {
        'pointer-events': 'auto'
      }
    });
  },
  visibility: function visibility(_ref17) {
    var addUtilities = _ref17.addUtilities;
    addUtilities({
      '.visible': {
        visibility: 'visible'
      },
      '.invisible': {
        visibility: 'hidden'
      }
    });
  },
  position: function position(_ref18) {
    var addUtilities = _ref18.addUtilities;
    addUtilities({
      '.static': {
        position: 'static'
      },
      '.fixed': {
        position: 'fixed'
      },
      '.absolute': {
        position: 'absolute'
      },
      '.relative': {
        position: 'relative'
      },
      '.sticky': {
        position: 'sticky'
      }
    });
  },
  inset: (0, _createUtilityPlugin)["default"]('inset', [['inset', ['top', 'right', 'bottom', 'left']], [['inset-x', ['left', 'right']], ['inset-y', ['top', 'bottom']]], [['top', ['top']], ['right', ['right']], ['bottom', ['bottom']], ['left', ['left']]]], {
    supportsNegativeValues: true
  }),
  isolation: function isolation(_ref19) {
    var addUtilities = _ref19.addUtilities;
    addUtilities({
      '.isolate': {
        isolation: 'isolate'
      },
      '.isolation-auto': {
        isolation: 'auto'
      }
    });
  },
  zIndex: (0, _createUtilityPlugin)["default"]('zIndex', [['z', ['zIndex']]], {
    supportsNegativeValues: true
  }),
  order: (0, _createUtilityPlugin)["default"]('order', undefined, {
    supportsNegativeValues: true
  }),
  gridColumn: (0, _createUtilityPlugin)["default"]('gridColumn', [['col', ['gridColumn']]]),
  gridColumnStart: (0, _createUtilityPlugin)["default"]('gridColumnStart', [['col-start', ['gridColumnStart']]]),
  gridColumnEnd: (0, _createUtilityPlugin)["default"]('gridColumnEnd', [['col-end', ['gridColumnEnd']]]),
  gridRow: (0, _createUtilityPlugin)["default"]('gridRow', [['row', ['gridRow']]]),
  gridRowStart: (0, _createUtilityPlugin)["default"]('gridRowStart', [['row-start', ['gridRowStart']]]),
  gridRowEnd: (0, _createUtilityPlugin)["default"]('gridRowEnd', [['row-end', ['gridRowEnd']]]),
  "float": function float(_ref20) {
    var addUtilities = _ref20.addUtilities;
    addUtilities({
      '.float-right': {
        "float": 'right'
      },
      '.float-left': {
        "float": 'left'
      },
      '.float-none': {
        "float": 'none'
      }
    });
  },
  clear: function clear(_ref21) {
    var addUtilities = _ref21.addUtilities;
    addUtilities({
      '.clear-left': {
        clear: 'left'
      },
      '.clear-right': {
        clear: 'right'
      },
      '.clear-both': {
        clear: 'both'
      },
      '.clear-none': {
        clear: 'none'
      }
    });
  },
  margin: (0, _createUtilityPlugin)["default"]('margin', [['m', ['margin']], [['mx', ['margin-left', 'margin-right']], ['my', ['margin-top', 'margin-bottom']]], [['mt', ['margin-top']], ['mr', ['margin-right']], ['mb', ['margin-bottom']], ['ml', ['margin-left']]]], {
    supportsNegativeValues: true
  }),
  boxSizing: function boxSizing(_ref22) {
    var addUtilities = _ref22.addUtilities;
    addUtilities({
      '.box-border': {
        'box-sizing': 'border-box'
      },
      '.box-content': {
        'box-sizing': 'content-box'
      }
    });
  },
  display: function display(_ref23) {
    var addUtilities = _ref23.addUtilities;
    addUtilities({
      '.block': {
        display: 'block'
      },
      '.inline-block': {
        display: 'inline-block'
      },
      '.inline': {
        display: 'inline'
      },
      '.flex': {
        display: 'flex'
      },
      '.inline-flex': {
        display: 'inline-flex'
      },
      '.table': {
        display: 'table'
      },
      '.inline-table': {
        display: 'inline-table'
      },
      '.table-caption': {
        display: 'table-caption'
      },
      '.table-cell': {
        display: 'table-cell'
      },
      '.table-column': {
        display: 'table-column'
      },
      '.table-column-group': {
        display: 'table-column-group'
      },
      '.table-footer-group': {
        display: 'table-footer-group'
      },
      '.table-header-group': {
        display: 'table-header-group'
      },
      '.table-row-group': {
        display: 'table-row-group'
      },
      '.table-row': {
        display: 'table-row'
      },
      '.flow-root': {
        display: 'flow-root'
      },
      '.grid': {
        display: 'grid'
      },
      '.inline-grid': {
        display: 'inline-grid'
      },
      '.contents': {
        display: 'contents'
      },
      '.list-item': {
        display: 'list-item'
      },
      '.hidden': {
        display: 'none'
      }
    });
  },
  aspectRatio: (0, _createUtilityPlugin)["default"]('aspectRatio', [['aspect', ['aspect-ratio']]]),
  height: (0, _createUtilityPlugin)["default"]('height', [['h', ['height']]]),
  maxHeight: (0, _createUtilityPlugin)["default"]('maxHeight', [['max-h', ['maxHeight']]]),
  minHeight: (0, _createUtilityPlugin)["default"]('minHeight', [['min-h', ['minHeight']]]),
  width: (0, _createUtilityPlugin)["default"]('width', [['w', ['width']]]),
  minWidth: (0, _createUtilityPlugin)["default"]('minWidth', [['min-w', ['minWidth']]]),
  maxWidth: (0, _createUtilityPlugin)["default"]('maxWidth', [['max-w', ['maxWidth']]]),
  flex: (0, _createUtilityPlugin)["default"]('flex'),
  flexShrink: (0, _createUtilityPlugin)["default"]('flexShrink', [['flex-shrink', ['flex-shrink']], ['shrink', ['flex-shrink']]]),
  flexGrow: (0, _createUtilityPlugin)["default"]('flexGrow', [['flex-grow', ['flex-grow']], ['grow', ['flex-grow']]]),
  flexBasis: (0, _createUtilityPlugin)["default"]('flexBasis', [['basis', ['flex-basis']]]),
  tableLayout: function tableLayout(_ref24) {
    var addUtilities = _ref24.addUtilities;
    addUtilities({
      '.table-auto': {
        'table-layout': 'auto'
      },
      '.table-fixed': {
        'table-layout': 'fixed'
      }
    });
  },
  borderCollapse: function borderCollapse(_ref25) {
    var addUtilities = _ref25.addUtilities;
    addUtilities({
      '.border-collapse': {
        'border-collapse': 'collapse'
      },
      '.border-separate': {
        'border-collapse': 'separate'
      }
    });
  },
  transformOrigin: (0, _createUtilityPlugin)["default"]('transformOrigin', [['origin', ['transformOrigin']]]),
  translate: (0, _createUtilityPlugin)["default"]('translate', [[['translate-x', [['@defaults transform', {}], '--tw-translate-x', ['transform', cssTransformValue]]], ['translate-y', [['@defaults transform', {}], '--tw-translate-y', ['transform', cssTransformValue]]]]], {
    supportsNegativeValues: true
  }),
  rotate: (0, _createUtilityPlugin)["default"]('rotate', [['rotate', [['@defaults transform', {}], '--tw-rotate', ['transform', cssTransformValue]]]], {
    supportsNegativeValues: true
  }),
  skew: (0, _createUtilityPlugin)["default"]('skew', [[['skew-x', [['@defaults transform', {}], '--tw-skew-x', ['transform', cssTransformValue]]], ['skew-y', [['@defaults transform', {}], '--tw-skew-y', ['transform', cssTransformValue]]]]], {
    supportsNegativeValues: true
  }),
  scale: (0, _createUtilityPlugin)["default"]('scale', [['scale', [['@defaults transform', {}], '--tw-scale-x', '--tw-scale-y', ['transform', cssTransformValue]]], [['scale-x', [['@defaults transform', {}], '--tw-scale-x', ['transform', cssTransformValue]]], ['scale-y', [['@defaults transform', {}], '--tw-scale-y', ['transform', cssTransformValue]]]]], {
    supportsNegativeValues: true
  }),
  transform: function transform(_ref26) {
    var addDefaults = _ref26.addDefaults,
        addUtilities = _ref26.addUtilities;
    addDefaults('transform', {
      '--tw-translate-x': '0',
      '--tw-translate-y': '0',
      '--tw-rotate': '0',
      '--tw-skew-x': '0',
      '--tw-skew-y': '0',
      '--tw-scale-x': '1',
      '--tw-scale-y': '1'
    });
    addUtilities({
      '.transform': {
        '@defaults transform': {},
        transform: cssTransformValue
      },
      '.transform-cpu': {
        transform: cssTransformValue
      },
      '.transform-gpu': {
        transform: cssTransformValue.replace('translate(var(--tw-translate-x), var(--tw-translate-y))', 'translate3d(var(--tw-translate-x), var(--tw-translate-y), 0)')
      },
      '.transform-none': {
        transform: 'none'
      }
    });
  },
  animation: function animation(_ref27) {
    var matchUtilities = _ref27.matchUtilities,
        theme = _ref27.theme,
        prefix = _ref27.prefix;

    var prefixName = function prefixName(name) {
      return prefix(".".concat(name)).slice(1);
    };

    var ref;
    var keyframes = Object.fromEntries(Object.entries((ref = theme('keyframes')) !== null && ref !== void 0 ? ref : {}).map(function (_ref28) {
      var _ref29 = _slicedToArray(_ref28, 2),
          key = _ref29[0],
          value = _ref29[1];

      return [key, _defineProperty({}, "@keyframes ".concat(prefixName(key)), value)];
    }));
    matchUtilities({
      animate: function animate(value1) {
        var animations = (0, _parseAnimationValue)["default"](value1);
        return [].concat(_toConsumableArray(animations.flatMap(function (animation) {
          return keyframes[animation.name];
        })), [{
          animation: animations.map(function (_ref31) {
            var name = _ref31.name,
                value = _ref31.value;

            if (name === undefined || keyframes[name] === undefined) {
              return value;
            }

            return value.replace(name, prefixName(name));
          }).join(', ')
        }]);
      }
    }, {
      values: theme('animation')
    });
  },
  cursor: (0, _createUtilityPlugin)["default"]('cursor'),
  touchAction: function touchAction(_ref32) {
    var addDefaults = _ref32.addDefaults,
        addUtilities = _ref32.addUtilities;
    addDefaults('touch-action', {
      '--tw-pan-x': ' ',
      '--tw-pan-y': ' ',
      '--tw-pinch-zoom': ' '
    });
    var cssTouchActionValue = 'var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)';
    addUtilities({
      '.touch-auto': {
        'touch-action': 'auto'
      },
      '.touch-none': {
        'touch-action': 'none'
      },
      '.touch-pan-x': {
        '@defaults touch-action': {},
        '--tw-pan-x': 'pan-x',
        'touch-action': cssTouchActionValue
      },
      '.touch-pan-left': {
        '@defaults touch-action': {},
        '--tw-pan-x': 'pan-left',
        'touch-action': cssTouchActionValue
      },
      '.touch-pan-right': {
        '@defaults touch-action': {},
        '--tw-pan-x': 'pan-right',
        'touch-action': cssTouchActionValue
      },
      '.touch-pan-y': {
        '@defaults touch-action': {},
        '--tw-pan-y': 'pan-y',
        'touch-action': cssTouchActionValue
      },
      '.touch-pan-up': {
        '@defaults touch-action': {},
        '--tw-pan-y': 'pan-up',
        'touch-action': cssTouchActionValue
      },
      '.touch-pan-down': {
        '@defaults touch-action': {},
        '--tw-pan-y': 'pan-down',
        'touch-action': cssTouchActionValue
      },
      '.touch-pinch-zoom': {
        '@defaults touch-action': {},
        '--tw-pinch-zoom': 'pinch-zoom',
        'touch-action': cssTouchActionValue
      },
      '.touch-manipulation': {
        'touch-action': 'manipulation'
      }
    });
  },
  userSelect: function userSelect(_ref33) {
    var addUtilities = _ref33.addUtilities;
    addUtilities({
      '.select-none': {
        'user-select': 'none'
      },
      '.select-text': {
        'user-select': 'text'
      },
      '.select-all': {
        'user-select': 'all'
      },
      '.select-auto': {
        'user-select': 'auto'
      }
    });
  },
  resize: function resize(_ref34) {
    var addUtilities = _ref34.addUtilities;
    addUtilities({
      '.resize-none': {
        resize: 'none'
      },
      '.resize-y': {
        resize: 'vertical'
      },
      '.resize-x': {
        resize: 'horizontal'
      },
      '.resize': {
        resize: 'both'
      }
    });
  },
  scrollSnapType: function scrollSnapType(_ref35) {
    var addDefaults = _ref35.addDefaults,
        addUtilities = _ref35.addUtilities;
    addDefaults('scroll-snap-type', {
      '--tw-scroll-snap-strictness': 'proximity'
    });
    addUtilities({
      '.snap-none': {
        'scroll-snap-type': 'none'
      },
      '.snap-x': {
        '@defaults scroll-snap-type': {},
        'scroll-snap-type': 'x var(--tw-scroll-snap-strictness)'
      },
      '.snap-y': {
        '@defaults scroll-snap-type': {},
        'scroll-snap-type': 'y var(--tw-scroll-snap-strictness)'
      },
      '.snap-both': {
        '@defaults scroll-snap-type': {},
        'scroll-snap-type': 'both var(--tw-scroll-snap-strictness)'
      },
      '.snap-mandatory': {
        '--tw-scroll-snap-strictness': 'mandatory'
      },
      '.snap-proximity': {
        '--tw-scroll-snap-strictness': 'proximity'
      }
    });
  },
  scrollSnapAlign: function scrollSnapAlign(_ref36) {
    var addUtilities = _ref36.addUtilities;
    addUtilities({
      '.snap-start': {
        'scroll-snap-align': 'start'
      },
      '.snap-end': {
        'scroll-snap-align': 'end'
      },
      '.snap-center': {
        'scroll-snap-align': 'center'
      },
      '.snap-align-none': {
        'scroll-snap-align': 'none'
      }
    });
  },
  scrollSnapStop: function scrollSnapStop(_ref37) {
    var addUtilities = _ref37.addUtilities;
    addUtilities({
      '.snap-normal': {
        'scroll-snap-stop': 'normal'
      },
      '.snap-always': {
        'scroll-snap-stop': 'always'
      }
    });
  },
  scrollMargin: (0, _createUtilityPlugin)["default"]('scrollMargin', [['scroll-m', ['scroll-margin']], [['scroll-mx', ['scroll-margin-left', 'scroll-margin-right']], ['scroll-my', ['scroll-margin-top', 'scroll-margin-bottom']]], [['scroll-mt', ['scroll-margin-top']], ['scroll-mr', ['scroll-margin-right']], ['scroll-mb', ['scroll-margin-bottom']], ['scroll-ml', ['scroll-margin-left']]]], {
    supportsNegativeValues: true
  }),
  scrollPadding: (0, _createUtilityPlugin)["default"]('scrollPadding', [['scroll-p', ['scroll-padding']], [['scroll-px', ['scroll-padding-left', 'scroll-padding-right']], ['scroll-py', ['scroll-padding-top', 'scroll-padding-bottom']]], [['scroll-pt', ['scroll-padding-top']], ['scroll-pr', ['scroll-padding-right']], ['scroll-pb', ['scroll-padding-bottom']], ['scroll-pl', ['scroll-padding-left']]]]),
  listStylePosition: function listStylePosition(_ref38) {
    var addUtilities = _ref38.addUtilities;
    addUtilities({
      '.list-inside': {
        'list-style-position': 'inside'
      },
      '.list-outside': {
        'list-style-position': 'outside'
      }
    });
  },
  listStyleType: (0, _createUtilityPlugin)["default"]('listStyleType', [['list', ['listStyleType']]]),
  appearance: function appearance(_ref39) {
    var addUtilities = _ref39.addUtilities;
    addUtilities({
      '.appearance-none': {
        appearance: 'none'
      }
    });
  },
  columns: (0, _createUtilityPlugin)["default"]('columns', [['columns', ['columns']]]),
  breakBefore: function breakBefore(_ref40) {
    var addUtilities = _ref40.addUtilities;
    addUtilities({
      '.break-before-auto': {
        'break-before': 'auto'
      },
      '.break-before-avoid': {
        'break-before': 'avoid'
      },
      '.break-before-all': {
        'break-before': 'all'
      },
      '.break-before-avoid-page': {
        'break-before': 'avoid-page'
      },
      '.break-before-page': {
        'break-before': 'page'
      },
      '.break-before-left': {
        'break-before': 'left'
      },
      '.break-before-right': {
        'break-before': 'right'
      },
      '.break-before-column': {
        'break-before': 'column'
      }
    });
  },
  breakInside: function breakInside(_ref41) {
    var addUtilities = _ref41.addUtilities;
    addUtilities({
      '.break-inside-auto': {
        'break-inside': 'auto'
      },
      '.break-inside-avoid': {
        'break-inside': 'avoid'
      },
      '.break-inside-avoid-page': {
        'break-inside': 'avoid-page'
      },
      '.break-inside-avoid-column': {
        'break-inside': 'avoid-column'
      }
    });
  },
  breakAfter: function breakAfter(_ref42) {
    var addUtilities = _ref42.addUtilities;
    addUtilities({
      '.break-after-auto': {
        'break-after': 'auto'
      },
      '.break-after-avoid': {
        'break-after': 'avoid'
      },
      '.break-after-all': {
        'break-after': 'all'
      },
      '.break-after-avoid-page': {
        'break-after': 'avoid-page'
      },
      '.break-after-page': {
        'break-after': 'page'
      },
      '.break-after-left': {
        'break-after': 'left'
      },
      '.break-after-right': {
        'break-after': 'right'
      },
      '.break-after-column': {
        'break-after': 'column'
      }
    });
  },
  gridAutoColumns: (0, _createUtilityPlugin)["default"]('gridAutoColumns', [['auto-cols', ['gridAutoColumns']]]),
  gridAutoFlow: function gridAutoFlow(_ref43) {
    var addUtilities = _ref43.addUtilities;
    addUtilities({
      '.grid-flow-row': {
        gridAutoFlow: 'row'
      },
      '.grid-flow-col': {
        gridAutoFlow: 'column'
      },
      '.grid-flow-row-dense': {
        gridAutoFlow: 'row dense'
      },
      '.grid-flow-col-dense': {
        gridAutoFlow: 'column dense'
      }
    });
  },
  gridAutoRows: (0, _createUtilityPlugin)["default"]('gridAutoRows', [['auto-rows', ['gridAutoRows']]]),
  gridTemplateColumns: (0, _createUtilityPlugin)["default"]('gridTemplateColumns', [['grid-cols', ['gridTemplateColumns']]]),
  gridTemplateRows: (0, _createUtilityPlugin)["default"]('gridTemplateRows', [['grid-rows', ['gridTemplateRows']]]),
  flexDirection: function flexDirection(_ref44) {
    var addUtilities = _ref44.addUtilities;
    addUtilities({
      '.flex-row': {
        'flex-direction': 'row'
      },
      '.flex-row-reverse': {
        'flex-direction': 'row-reverse'
      },
      '.flex-col': {
        'flex-direction': 'column'
      },
      '.flex-col-reverse': {
        'flex-direction': 'column-reverse'
      }
    });
  },
  flexWrap: function flexWrap(_ref45) {
    var addUtilities = _ref45.addUtilities;
    addUtilities({
      '.flex-wrap': {
        'flex-wrap': 'wrap'
      },
      '.flex-wrap-reverse': {
        'flex-wrap': 'wrap-reverse'
      },
      '.flex-nowrap': {
        'flex-wrap': 'nowrap'
      }
    });
  },
  placeContent: function placeContent(_ref46) {
    var addUtilities = _ref46.addUtilities;
    addUtilities({
      '.place-content-center': {
        'place-content': 'center'
      },
      '.place-content-start': {
        'place-content': 'start'
      },
      '.place-content-end': {
        'place-content': 'end'
      },
      '.place-content-between': {
        'place-content': 'space-between'
      },
      '.place-content-around': {
        'place-content': 'space-around'
      },
      '.place-content-evenly': {
        'place-content': 'space-evenly'
      },
      '.place-content-stretch': {
        'place-content': 'stretch'
      }
    });
  },
  placeItems: function placeItems(_ref47) {
    var addUtilities = _ref47.addUtilities;
    addUtilities({
      '.place-items-start': {
        'place-items': 'start'
      },
      '.place-items-end': {
        'place-items': 'end'
      },
      '.place-items-center': {
        'place-items': 'center'
      },
      '.place-items-stretch': {
        'place-items': 'stretch'
      }
    });
  },
  alignContent: function alignContent(_ref48) {
    var addUtilities = _ref48.addUtilities;
    addUtilities({
      '.content-center': {
        'align-content': 'center'
      },
      '.content-start': {
        'align-content': 'flex-start'
      },
      '.content-end': {
        'align-content': 'flex-end'
      },
      '.content-between': {
        'align-content': 'space-between'
      },
      '.content-around': {
        'align-content': 'space-around'
      },
      '.content-evenly': {
        'align-content': 'space-evenly'
      }
    });
  },
  alignItems: function alignItems(_ref49) {
    var addUtilities = _ref49.addUtilities;
    addUtilities({
      '.items-start': {
        'align-items': 'flex-start'
      },
      '.items-end': {
        'align-items': 'flex-end'
      },
      '.items-center': {
        'align-items': 'center'
      },
      '.items-baseline': {
        'align-items': 'baseline'
      },
      '.items-stretch': {
        'align-items': 'stretch'
      }
    });
  },
  justifyContent: function justifyContent(_ref50) {
    var addUtilities = _ref50.addUtilities;
    addUtilities({
      '.justify-start': {
        'justify-content': 'flex-start'
      },
      '.justify-end': {
        'justify-content': 'flex-end'
      },
      '.justify-center': {
        'justify-content': 'center'
      },
      '.justify-between': {
        'justify-content': 'space-between'
      },
      '.justify-around': {
        'justify-content': 'space-around'
      },
      '.justify-evenly': {
        'justify-content': 'space-evenly'
      }
    });
  },
  justifyItems: function justifyItems(_ref51) {
    var addUtilities = _ref51.addUtilities;
    addUtilities({
      '.justify-items-start': {
        'justify-items': 'start'
      },
      '.justify-items-end': {
        'justify-items': 'end'
      },
      '.justify-items-center': {
        'justify-items': 'center'
      },
      '.justify-items-stretch': {
        'justify-items': 'stretch'
      }
    });
  },
  gap: (0, _createUtilityPlugin)["default"]('gap', [['gap', ['gap']], [['gap-x', ['columnGap']], ['gap-y', ['rowGap']]]]),
  space: function space(_ref52) {
    var matchUtilities = _ref52.matchUtilities,
        addUtilities = _ref52.addUtilities,
        theme = _ref52.theme;
    matchUtilities({
      'space-x': function spaceX(value) {
        value = value === '0' ? '0px' : value;
        return {
          '& > :not([hidden]) ~ :not([hidden])': {
            '--tw-space-x-reverse': '0',
            'margin-right': "calc(".concat(value, " * var(--tw-space-x-reverse))"),
            'margin-left': "calc(".concat(value, " * calc(1 - var(--tw-space-x-reverse)))")
          }
        };
      },
      'space-y': function spaceY(value) {
        value = value === '0' ? '0px' : value;
        return {
          '& > :not([hidden]) ~ :not([hidden])': {
            '--tw-space-y-reverse': '0',
            'margin-top': "calc(".concat(value, " * calc(1 - var(--tw-space-y-reverse)))"),
            'margin-bottom': "calc(".concat(value, " * var(--tw-space-y-reverse))")
          }
        };
      }
    }, {
      values: theme('space'),
      supportsNegativeValues: true
    });
    addUtilities({
      '.space-y-reverse > :not([hidden]) ~ :not([hidden])': {
        '--tw-space-y-reverse': '1'
      },
      '.space-x-reverse > :not([hidden]) ~ :not([hidden])': {
        '--tw-space-x-reverse': '1'
      }
    });
  },
  divideWidth: function divideWidth(_ref53) {
    var matchUtilities = _ref53.matchUtilities,
        addUtilities = _ref53.addUtilities,
        theme = _ref53.theme;
    matchUtilities({
      'divide-x': function divideX(value) {
        value = value === '0' ? '0px' : value;
        return {
          '& > :not([hidden]) ~ :not([hidden])': {
            '@defaults border-width': {},
            '--tw-divide-x-reverse': '0',
            'border-right-width': "calc(".concat(value, " * var(--tw-divide-x-reverse))"),
            'border-left-width': "calc(".concat(value, " * calc(1 - var(--tw-divide-x-reverse)))")
          }
        };
      },
      'divide-y': function divideY(value) {
        value = value === '0' ? '0px' : value;
        return {
          '& > :not([hidden]) ~ :not([hidden])': {
            '@defaults border-width': {},
            '--tw-divide-y-reverse': '0',
            'border-top-width': "calc(".concat(value, " * calc(1 - var(--tw-divide-y-reverse)))"),
            'border-bottom-width': "calc(".concat(value, " * var(--tw-divide-y-reverse))")
          }
        };
      }
    }, {
      values: theme('divideWidth'),
      type: ['line-width', 'length']
    });
    addUtilities({
      '.divide-y-reverse > :not([hidden]) ~ :not([hidden])': {
        '@defaults border-width': {},
        '--tw-divide-y-reverse': '1'
      },
      '.divide-x-reverse > :not([hidden]) ~ :not([hidden])': {
        '@defaults border-width': {},
        '--tw-divide-x-reverse': '1'
      }
    });
  },
  divideStyle: function divideStyle(_ref54) {
    var addUtilities = _ref54.addUtilities;
    addUtilities({
      '.divide-solid > :not([hidden]) ~ :not([hidden])': {
        'border-style': 'solid'
      },
      '.divide-dashed > :not([hidden]) ~ :not([hidden])': {
        'border-style': 'dashed'
      },
      '.divide-dotted > :not([hidden]) ~ :not([hidden])': {
        'border-style': 'dotted'
      },
      '.divide-double > :not([hidden]) ~ :not([hidden])': {
        'border-style': 'double'
      },
      '.divide-none > :not([hidden]) ~ :not([hidden])': {
        'border-style': 'none'
      }
    });
  },
  divideColor: function divideColor(_ref55) {
    var matchUtilities = _ref55.matchUtilities,
        theme = _ref55.theme,
        corePlugins1 = _ref55.corePlugins;
    matchUtilities({
      divide: function divide(value) {
        if (!corePlugins1('divideOpacity')) {
          return _defineProperty({}, '& > :not([hidden]) ~ :not([hidden])', {
            'border-color': (0, _toColorValue)["default"](value)
          });
        }

        return _defineProperty({}, '& > :not([hidden]) ~ :not([hidden])', (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'border-color',
          variable: '--tw-divide-opacity'
        }));
      }
    }, {
      values: function (_ref58) {
        var _ = _ref58.DEFAULT,
            colors = _objectWithoutProperties(_ref58, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette)["default"](theme('divideColor'))),
      type: 'color'
    });
  },
  divideOpacity: function divideOpacity(_ref59) {
    var matchUtilities = _ref59.matchUtilities,
        theme = _ref59.theme;
    matchUtilities({
      'divide-opacity': function divideOpacity(value) {
        return _defineProperty({}, "& > :not([hidden]) ~ :not([hidden])", {
          '--tw-divide-opacity': value
        });
      }
    }, {
      values: theme('divideOpacity')
    });
  },
  placeSelf: function placeSelf(_ref61) {
    var addUtilities = _ref61.addUtilities;
    addUtilities({
      '.place-self-auto': {
        'place-self': 'auto'
      },
      '.place-self-start': {
        'place-self': 'start'
      },
      '.place-self-end': {
        'place-self': 'end'
      },
      '.place-self-center': {
        'place-self': 'center'
      },
      '.place-self-stretch': {
        'place-self': 'stretch'
      }
    });
  },
  alignSelf: function alignSelf(_ref62) {
    var addUtilities = _ref62.addUtilities;
    addUtilities({
      '.self-auto': {
        'align-self': 'auto'
      },
      '.self-start': {
        'align-self': 'flex-start'
      },
      '.self-end': {
        'align-self': 'flex-end'
      },
      '.self-center': {
        'align-self': 'center'
      },
      '.self-stretch': {
        'align-self': 'stretch'
      },
      '.self-baseline': {
        'align-self': 'baseline'
      }
    });
  },
  justifySelf: function justifySelf(_ref63) {
    var addUtilities = _ref63.addUtilities;
    addUtilities({
      '.justify-self-auto': {
        'justify-self': 'auto'
      },
      '.justify-self-start': {
        'justify-self': 'start'
      },
      '.justify-self-end': {
        'justify-self': 'end'
      },
      '.justify-self-center': {
        'justify-self': 'center'
      },
      '.justify-self-stretch': {
        'justify-self': 'stretch'
      }
    });
  },
  overflow: function overflow(_ref64) {
    var addUtilities = _ref64.addUtilities;
    addUtilities({
      '.overflow-auto': {
        overflow: 'auto'
      },
      '.overflow-hidden': {
        overflow: 'hidden'
      },
      '.overflow-clip': {
        overflow: 'clip'
      },
      '.overflow-visible': {
        overflow: 'visible'
      },
      '.overflow-scroll': {
        overflow: 'scroll'
      },
      '.overflow-x-auto': {
        'overflow-x': 'auto'
      },
      '.overflow-y-auto': {
        'overflow-y': 'auto'
      },
      '.overflow-x-hidden': {
        'overflow-x': 'hidden'
      },
      '.overflow-y-hidden': {
        'overflow-y': 'hidden'
      },
      '.overflow-x-clip': {
        'overflow-x': 'clip'
      },
      '.overflow-y-clip': {
        'overflow-y': 'clip'
      },
      '.overflow-x-visible': {
        'overflow-x': 'visible'
      },
      '.overflow-y-visible': {
        'overflow-y': 'visible'
      },
      '.overflow-x-scroll': {
        'overflow-x': 'scroll'
      },
      '.overflow-y-scroll': {
        'overflow-y': 'scroll'
      }
    });
  },
  overscrollBehavior: function overscrollBehavior(_ref65) {
    var addUtilities = _ref65.addUtilities;
    addUtilities({
      '.overscroll-auto': {
        'overscroll-behavior': 'auto'
      },
      '.overscroll-contain': {
        'overscroll-behavior': 'contain'
      },
      '.overscroll-none': {
        'overscroll-behavior': 'none'
      },
      '.overscroll-y-auto': {
        'overscroll-behavior-y': 'auto'
      },
      '.overscroll-y-contain': {
        'overscroll-behavior-y': 'contain'
      },
      '.overscroll-y-none': {
        'overscroll-behavior-y': 'none'
      },
      '.overscroll-x-auto': {
        'overscroll-behavior-x': 'auto'
      },
      '.overscroll-x-contain': {
        'overscroll-behavior-x': 'contain'
      },
      '.overscroll-x-none': {
        'overscroll-behavior-x': 'none'
      }
    });
  },
  scrollBehavior: function scrollBehavior(_ref66) {
    var addUtilities = _ref66.addUtilities;
    addUtilities({
      '.scroll-auto': {
        'scroll-behavior': 'auto'
      },
      '.scroll-smooth': {
        'scroll-behavior': 'smooth'
      }
    });
  },
  textOverflow: function textOverflow(_ref67) {
    var addUtilities = _ref67.addUtilities;
    addUtilities({
      '.truncate': {
        overflow: 'hidden',
        'text-overflow': 'ellipsis',
        'white-space': 'nowrap'
      },
      '.overflow-ellipsis': {
        'text-overflow': 'ellipsis'
      },
      '.text-ellipsis': {
        'text-overflow': 'ellipsis'
      },
      '.text-clip': {
        'text-overflow': 'clip'
      }
    });
  },
  whitespace: function whitespace(_ref68) {
    var addUtilities = _ref68.addUtilities;
    addUtilities({
      '.whitespace-normal': {
        'white-space': 'normal'
      },
      '.whitespace-nowrap': {
        'white-space': 'nowrap'
      },
      '.whitespace-pre': {
        'white-space': 'pre'
      },
      '.whitespace-pre-line': {
        'white-space': 'pre-line'
      },
      '.whitespace-pre-wrap': {
        'white-space': 'pre-wrap'
      }
    });
  },
  wordBreak: function wordBreak(_ref69) {
    var addUtilities = _ref69.addUtilities;
    addUtilities({
      '.break-normal': {
        'overflow-wrap': 'normal',
        'word-break': 'normal'
      },
      '.break-words': {
        'overflow-wrap': 'break-word'
      },
      '.break-all': {
        'word-break': 'break-all'
      }
    });
  },
  borderRadius: (0, _createUtilityPlugin)["default"]('borderRadius', [['rounded', ['border-radius']], [['rounded-t', ['border-top-left-radius', 'border-top-right-radius']], ['rounded-r', ['border-top-right-radius', 'border-bottom-right-radius']], ['rounded-b', ['border-bottom-right-radius', 'border-bottom-left-radius']], ['rounded-l', ['border-top-left-radius', 'border-bottom-left-radius']]], [['rounded-tl', ['border-top-left-radius']], ['rounded-tr', ['border-top-right-radius']], ['rounded-br', ['border-bottom-right-radius']], ['rounded-bl', ['border-bottom-left-radius']]]]),
  borderWidth: (0, _createUtilityPlugin)["default"]('borderWidth', [['border', [['@defaults border-width', {}], 'border-width']], [['border-x', [['@defaults border-width', {}], 'border-left-width', 'border-right-width']], ['border-y', [['@defaults border-width', {}], 'border-top-width', 'border-bottom-width']]], [['border-t', [['@defaults border-width', {}], 'border-top-width']], ['border-r', [['@defaults border-width', {}], 'border-right-width']], ['border-b', [['@defaults border-width', {}], 'border-bottom-width']], ['border-l', [['@defaults border-width', {}], 'border-left-width']]]], {
    type: ['line-width', 'length']
  }),
  borderStyle: function borderStyle(_ref70) {
    var addUtilities = _ref70.addUtilities;
    addUtilities({
      '.border-solid': {
        'border-style': 'solid'
      },
      '.border-dashed': {
        'border-style': 'dashed'
      },
      '.border-dotted': {
        'border-style': 'dotted'
      },
      '.border-double': {
        'border-style': 'double'
      },
      '.border-hidden': {
        'border-style': 'hidden'
      },
      '.border-none': {
        'border-style': 'none'
      }
    });
  },
  borderColor: function borderColor(_ref71) {
    var matchUtilities = _ref71.matchUtilities,
        theme = _ref71.theme,
        corePlugins2 = _ref71.corePlugins;
    matchUtilities({
      border: function border(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'border-color',
          variable: '--tw-border-opacity'
        });
      }
    }, {
      values: function (_ref72) {
        var _ = _ref72.DEFAULT,
            colors = _objectWithoutProperties(_ref72, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette)["default"](theme('borderColor'))),
      type: ['color']
    });
    matchUtilities({
      'border-x': function borderX(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-left-color': (0, _toColorValue)["default"](value),
            'border-right-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: ['border-left-color', 'border-right-color'],
          variable: '--tw-border-opacity'
        });
      },
      'border-y': function borderY(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-top-color': (0, _toColorValue)["default"](value),
            'border-bottom-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: ['border-top-color', 'border-bottom-color'],
          variable: '--tw-border-opacity'
        });
      }
    }, {
      values: function (_ref73) {
        var _ = _ref73.DEFAULT,
            colors = _objectWithoutProperties(_ref73, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette)["default"](theme('borderColor'))),
      type: 'color'
    });
    matchUtilities({
      'border-t': function borderT(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-top-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'border-top-color',
          variable: '--tw-border-opacity'
        });
      },
      'border-r': function borderR(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-right-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'border-right-color',
          variable: '--tw-border-opacity'
        });
      },
      'border-b': function borderB(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-bottom-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'border-bottom-color',
          variable: '--tw-border-opacity'
        });
      },
      'border-l': function borderL(value) {
        if (!corePlugins2('borderOpacity')) {
          return {
            'border-left-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'border-left-color',
          variable: '--tw-border-opacity'
        });
      }
    }, {
      values: function (_ref74) {
        var _ = _ref74.DEFAULT,
            colors = _objectWithoutProperties(_ref74, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette)["default"](theme('borderColor'))),
      type: 'color'
    });
  },
  borderOpacity: (0, _createUtilityPlugin)["default"]('borderOpacity', [['border-opacity', ['--tw-border-opacity']]]),
  backgroundColor: function backgroundColor(_ref75) {
    var matchUtilities = _ref75.matchUtilities,
        theme = _ref75.theme,
        corePlugins3 = _ref75.corePlugins;
    matchUtilities({
      bg: function bg(value) {
        if (!corePlugins3('backgroundOpacity')) {
          return {
            'background-color': (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'background-color',
          variable: '--tw-bg-opacity'
        });
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('backgroundColor')),
      type: 'color'
    });
  },
  backgroundOpacity: (0, _createUtilityPlugin)["default"]('backgroundOpacity', [['bg-opacity', ['--tw-bg-opacity']]]),
  backgroundImage: (0, _createUtilityPlugin)["default"]('backgroundImage', [['bg', ['background-image']]], {
    type: ['lookup', 'image', 'url']
  }),
  gradientColorStops: function () {
    function transparentTo(value) {
      return (0, _withAlphaVariable).withAlphaValue(value, 0, 'rgb(255 255 255 / 0)');
    }

    return function (_ref76) {
      var matchUtilities = _ref76.matchUtilities,
          theme = _ref76.theme;
      var options = {
        values: (0, _flattenColorPalette)["default"](theme('gradientColorStops')),
        type: ['color', 'any']
      };
      matchUtilities({
        from: function from(value) {
          var transparentToValue = transparentTo(value);
          return {
            '--tw-gradient-from': (0, _toColorValue)["default"](value, 'from'),
            '--tw-gradient-stops': "var(--tw-gradient-from), var(--tw-gradient-to, ".concat(transparentToValue, ")")
          };
        }
      }, options);
      matchUtilities({
        via: function via(value) {
          var transparentToValue = transparentTo(value);
          return {
            '--tw-gradient-stops': "var(--tw-gradient-from), ".concat((0, _toColorValue)["default"](value, 'via'), ", var(--tw-gradient-to, ").concat(transparentToValue, ")")
          };
        }
      }, options);
      matchUtilities({
        to: function to(value) {
          return {
            '--tw-gradient-to': (0, _toColorValue)["default"](value, 'to')
          };
        }
      }, options);
    };
  }(),
  boxDecorationBreak: function boxDecorationBreak(_ref77) {
    var addUtilities = _ref77.addUtilities;
    addUtilities({
      '.decoration-slice': {
        'box-decoration-break': 'slice'
      },
      '.decoration-clone': {
        'box-decoration-break': 'clone'
      },
      '.box-decoration-slice': {
        'box-decoration-break': 'slice'
      },
      '.box-decoration-clone': {
        'box-decoration-break': 'clone'
      }
    });
  },
  backgroundSize: (0, _createUtilityPlugin)["default"]('backgroundSize', [['bg', ['background-size']]], {
    type: ['lookup', 'length', 'percentage']
  }),
  backgroundAttachment: function backgroundAttachment(_ref78) {
    var addUtilities = _ref78.addUtilities;
    addUtilities({
      '.bg-fixed': {
        'background-attachment': 'fixed'
      },
      '.bg-local': {
        'background-attachment': 'local'
      },
      '.bg-scroll': {
        'background-attachment': 'scroll'
      }
    });
  },
  backgroundClip: function backgroundClip(_ref79) {
    var addUtilities = _ref79.addUtilities;
    addUtilities({
      '.bg-clip-border': {
        'background-clip': 'border-box'
      },
      '.bg-clip-padding': {
        'background-clip': 'padding-box'
      },
      '.bg-clip-content': {
        'background-clip': 'content-box'
      },
      '.bg-clip-text': {
        'background-clip': 'text'
      }
    });
  },
  backgroundPosition: (0, _createUtilityPlugin)["default"]('backgroundPosition', [['bg', ['background-position']]], {
    type: ['lookup', 'position']
  }),
  backgroundRepeat: function backgroundRepeat(_ref80) {
    var addUtilities = _ref80.addUtilities;
    addUtilities({
      '.bg-repeat': {
        'background-repeat': 'repeat'
      },
      '.bg-no-repeat': {
        'background-repeat': 'no-repeat'
      },
      '.bg-repeat-x': {
        'background-repeat': 'repeat-x'
      },
      '.bg-repeat-y': {
        'background-repeat': 'repeat-y'
      },
      '.bg-repeat-round': {
        'background-repeat': 'round'
      },
      '.bg-repeat-space': {
        'background-repeat': 'space'
      }
    });
  },
  backgroundOrigin: function backgroundOrigin(_ref81) {
    var addUtilities = _ref81.addUtilities;
    addUtilities({
      '.bg-origin-border': {
        'background-origin': 'border-box'
      },
      '.bg-origin-padding': {
        'background-origin': 'padding-box'
      },
      '.bg-origin-content': {
        'background-origin': 'content-box'
      }
    });
  },
  fill: function fill(_ref82) {
    var matchUtilities = _ref82.matchUtilities,
        theme = _ref82.theme;
    matchUtilities({
      fill: function fill(value) {
        return {
          fill: (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('fill')),
      type: ['color', 'any']
    });
  },
  stroke: function stroke(_ref83) {
    var matchUtilities = _ref83.matchUtilities,
        theme = _ref83.theme;
    matchUtilities({
      stroke: function stroke(value) {
        return {
          stroke: (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('stroke')),
      type: ['color', 'url']
    });
  },
  strokeWidth: (0, _createUtilityPlugin)["default"]('strokeWidth', [['stroke', ['stroke-width']]], {
    type: ['length', 'number', 'percentage']
  }),
  objectFit: function objectFit(_ref84) {
    var addUtilities = _ref84.addUtilities;
    addUtilities({
      '.object-contain': {
        'object-fit': 'contain'
      },
      '.object-cover': {
        'object-fit': 'cover'
      },
      '.object-fill': {
        'object-fit': 'fill'
      },
      '.object-none': {
        'object-fit': 'none'
      },
      '.object-scale-down': {
        'object-fit': 'scale-down'
      }
    });
  },
  objectPosition: (0, _createUtilityPlugin)["default"]('objectPosition', [['object', ['object-position']]]),
  padding: (0, _createUtilityPlugin)["default"]('padding', [['p', ['padding']], [['px', ['padding-left', 'padding-right']], ['py', ['padding-top', 'padding-bottom']]], [['pt', ['padding-top']], ['pr', ['padding-right']], ['pb', ['padding-bottom']], ['pl', ['padding-left']]]]),
  textAlign: function textAlign(_ref85) {
    var addUtilities = _ref85.addUtilities;
    addUtilities({
      '.text-left': {
        'text-align': 'left'
      },
      '.text-center': {
        'text-align': 'center'
      },
      '.text-right': {
        'text-align': 'right'
      },
      '.text-justify': {
        'text-align': 'justify'
      }
    });
  },
  textIndent: (0, _createUtilityPlugin)["default"]('textIndent', [['indent', ['text-indent']]], {
    supportsNegativeValues: true
  }),
  verticalAlign: function verticalAlign(_ref86) {
    var addUtilities = _ref86.addUtilities,
        matchUtilities = _ref86.matchUtilities;
    addUtilities({
      '.align-baseline': {
        'vertical-align': 'baseline'
      },
      '.align-top': {
        'vertical-align': 'top'
      },
      '.align-middle': {
        'vertical-align': 'middle'
      },
      '.align-bottom': {
        'vertical-align': 'bottom'
      },
      '.align-text-top': {
        'vertical-align': 'text-top'
      },
      '.align-text-bottom': {
        'vertical-align': 'text-bottom'
      },
      '.align-sub': {
        'vertical-align': 'sub'
      },
      '.align-super': {
        'vertical-align': 'super'
      }
    });
    matchUtilities({
      align: function align(value) {
        return {
          'vertical-align': value
        };
      }
    });
  },
  fontFamily: (0, _createUtilityPlugin)["default"]('fontFamily', [['font', ['fontFamily']]], {
    type: ['lookup', 'generic-name', 'family-name']
  }),
  fontSize: function fontSize(_ref87) {
    var matchUtilities = _ref87.matchUtilities,
        theme = _ref87.theme;
    matchUtilities({
      text: function text(value) {
        var _ref88 = Array.isArray(value) ? value : [value],
            _ref89 = _slicedToArray(_ref88, 2),
            fontSize = _ref89[0],
            options = _ref89[1];

        var _ref90 = (0, _isPlainObject)["default"](options) ? options : {
          lineHeight: options
        },
            lineHeight = _ref90.lineHeight,
            letterSpacing = _ref90.letterSpacing;

        return _objectSpread({
          'font-size': fontSize
        }, lineHeight === undefined ? {} : {
          'line-height': lineHeight
        }, {}, letterSpacing === undefined ? {} : {
          'letter-spacing': letterSpacing
        });
      }
    }, {
      values: theme('fontSize'),
      type: ['absolute-size', 'relative-size', 'length', 'percentage']
    });
  },
  fontWeight: (0, _createUtilityPlugin)["default"]('fontWeight', [['font', ['fontWeight']]], {
    type: ['lookup', 'number']
  }),
  textTransform: function textTransform(_ref91) {
    var addUtilities = _ref91.addUtilities;
    addUtilities({
      '.uppercase': {
        'text-transform': 'uppercase'
      },
      '.lowercase': {
        'text-transform': 'lowercase'
      },
      '.capitalize': {
        'text-transform': 'capitalize'
      },
      '.normal-case': {
        'text-transform': 'none'
      }
    });
  },
  fontStyle: function fontStyle(_ref92) {
    var addUtilities = _ref92.addUtilities;
    addUtilities({
      '.italic': {
        'font-style': 'italic'
      },
      '.not-italic': {
        'font-style': 'normal'
      }
    });
  },
  fontVariantNumeric: function fontVariantNumeric(_ref93) {
    var addDefaults = _ref93.addDefaults,
        addUtilities = _ref93.addUtilities;
    var cssFontVariantNumericValue = 'var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)';
    addDefaults('font-variant-numeric', {
      '--tw-ordinal': ' ',
      '--tw-slashed-zero': ' ',
      '--tw-numeric-figure': ' ',
      '--tw-numeric-spacing': ' ',
      '--tw-numeric-fraction': ' '
    });
    addUtilities({
      '.normal-nums': {
        'font-variant-numeric': 'normal'
      },
      '.ordinal': {
        '@defaults font-variant-numeric': {},
        '--tw-ordinal': 'ordinal',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.slashed-zero': {
        '@defaults font-variant-numeric': {},
        '--tw-slashed-zero': 'slashed-zero',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.lining-nums': {
        '@defaults font-variant-numeric': {},
        '--tw-numeric-figure': 'lining-nums',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.oldstyle-nums': {
        '@defaults font-variant-numeric': {},
        '--tw-numeric-figure': 'oldstyle-nums',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.proportional-nums': {
        '@defaults font-variant-numeric': {},
        '--tw-numeric-spacing': 'proportional-nums',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.tabular-nums': {
        '@defaults font-variant-numeric': {},
        '--tw-numeric-spacing': 'tabular-nums',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.diagonal-fractions': {
        '@defaults font-variant-numeric': {},
        '--tw-numeric-fraction': 'diagonal-fractions',
        'font-variant-numeric': cssFontVariantNumericValue
      },
      '.stacked-fractions': {
        '@defaults font-variant-numeric': {},
        '--tw-numeric-fraction': 'stacked-fractions',
        'font-variant-numeric': cssFontVariantNumericValue
      }
    });
  },
  lineHeight: (0, _createUtilityPlugin)["default"]('lineHeight', [['leading', ['lineHeight']]]),
  letterSpacing: (0, _createUtilityPlugin)["default"]('letterSpacing', [['tracking', ['letterSpacing']]], {
    supportsNegativeValues: true
  }),
  textColor: function textColor(_ref94) {
    var matchUtilities = _ref94.matchUtilities,
        theme = _ref94.theme,
        corePlugins4 = _ref94.corePlugins;
    matchUtilities({
      text: function text(value) {
        if (!corePlugins4('textOpacity')) {
          return {
            color: (0, _toColorValue)["default"](value)
          };
        }

        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: 'color',
          variable: '--tw-text-opacity'
        });
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('textColor')),
      type: 'color'
    });
  },
  textOpacity: (0, _createUtilityPlugin)["default"]('textOpacity', [['text-opacity', ['--tw-text-opacity']]]),
  textDecoration: function textDecoration(_ref95) {
    var addUtilities = _ref95.addUtilities;
    addUtilities({
      '.underline': {
        'text-decoration-line': 'underline'
      },
      '.overline': {
        'text-decoration-line': 'overline'
      },
      '.line-through': {
        'text-decoration-line': 'line-through'
      },
      '.no-underline': {
        'text-decoration-line': 'none'
      }
    });
  },
  textDecorationColor: function textDecorationColor(_ref96) {
    var matchUtilities = _ref96.matchUtilities,
        theme = _ref96.theme;
    matchUtilities({
      decoration: function decoration(value) {
        return {
          'text-decoration-color': (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('textDecorationColor')),
      type: ['color']
    });
  },
  textDecorationStyle: function textDecorationStyle(_ref97) {
    var addUtilities = _ref97.addUtilities;
    addUtilities({
      '.decoration-solid': {
        'text-decoration-style': 'solid'
      },
      '.decoration-double': {
        'text-decoration-style': 'double'
      },
      '.decoration-dotted': {
        'text-decoration-style': 'dotted'
      },
      '.decoration-dashed': {
        'text-decoration-style': 'dashed'
      },
      '.decoration-wavy': {
        'text-decoration-style': 'wavy'
      }
    });
  },
  textDecorationThickness: (0, _createUtilityPlugin)["default"]('textDecorationThickness', [['decoration', ['text-decoration-thickness']]], {
    type: ['length', 'percentage']
  }),
  textUnderlineOffset: (0, _createUtilityPlugin)["default"]('textUnderlineOffset', [['underline-offset', ['text-underline-offset']]], {
    type: ['length', 'percentage']
  }),
  fontSmoothing: function fontSmoothing(_ref98) {
    var addUtilities = _ref98.addUtilities;
    addUtilities({
      '.antialiased': {
        '-webkit-font-smoothing': 'antialiased',
        '-moz-osx-font-smoothing': 'grayscale'
      },
      '.subpixel-antialiased': {
        '-webkit-font-smoothing': 'auto',
        '-moz-osx-font-smoothing': 'auto'
      }
    });
  },
  placeholderColor: function placeholderColor(_ref99) {
    var matchUtilities = _ref99.matchUtilities,
        theme = _ref99.theme,
        corePlugins5 = _ref99.corePlugins;
    matchUtilities({
      placeholder: function placeholder(value) {
        if (!corePlugins5('placeholderOpacity')) {
          return {
            '&::placeholder': {
              color: (0, _toColorValue)["default"](value)
            }
          };
        }

        return {
          '&::placeholder': (0, _withAlphaVariable)["default"]({
            color: value,
            property: 'color',
            variable: '--tw-placeholder-opacity'
          })
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('placeholderColor')),
      type: ['color', 'any']
    });
  },
  placeholderOpacity: function placeholderOpacity(_ref100) {
    var matchUtilities = _ref100.matchUtilities,
        theme = _ref100.theme;
    matchUtilities({
      'placeholder-opacity': function placeholderOpacity(value) {
        return _defineProperty({}, '&::placeholder', {
          '--tw-placeholder-opacity': value
        });
      }
    }, {
      values: theme('placeholderOpacity')
    });
  },
  caretColor: function caretColor(_ref102) {
    var matchUtilities = _ref102.matchUtilities,
        theme = _ref102.theme;
    matchUtilities({
      caret: function caret(value) {
        return {
          'caret-color': (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('caretColor')),
      type: ['color', 'any']
    });
  },
  accentColor: function accentColor(_ref103) {
    var matchUtilities = _ref103.matchUtilities,
        theme = _ref103.theme;
    matchUtilities({
      accent: function accent(value) {
        return {
          'accent-color': (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('accentColor')),
      type: ['color', 'any']
    });
  },
  opacity: (0, _createUtilityPlugin)["default"]('opacity', [['opacity', ['opacity']]]),
  backgroundBlendMode: function backgroundBlendMode(_ref104) {
    var addUtilities = _ref104.addUtilities;
    addUtilities({
      '.bg-blend-normal': {
        'background-blend-mode': 'normal'
      },
      '.bg-blend-multiply': {
        'background-blend-mode': 'multiply'
      },
      '.bg-blend-screen': {
        'background-blend-mode': 'screen'
      },
      '.bg-blend-overlay': {
        'background-blend-mode': 'overlay'
      },
      '.bg-blend-darken': {
        'background-blend-mode': 'darken'
      },
      '.bg-blend-lighten': {
        'background-blend-mode': 'lighten'
      },
      '.bg-blend-color-dodge': {
        'background-blend-mode': 'color-dodge'
      },
      '.bg-blend-color-burn': {
        'background-blend-mode': 'color-burn'
      },
      '.bg-blend-hard-light': {
        'background-blend-mode': 'hard-light'
      },
      '.bg-blend-soft-light': {
        'background-blend-mode': 'soft-light'
      },
      '.bg-blend-difference': {
        'background-blend-mode': 'difference'
      },
      '.bg-blend-exclusion': {
        'background-blend-mode': 'exclusion'
      },
      '.bg-blend-hue': {
        'background-blend-mode': 'hue'
      },
      '.bg-blend-saturation': {
        'background-blend-mode': 'saturation'
      },
      '.bg-blend-color': {
        'background-blend-mode': 'color'
      },
      '.bg-blend-luminosity': {
        'background-blend-mode': 'luminosity'
      }
    });
  },
  mixBlendMode: function mixBlendMode(_ref105) {
    var addUtilities = _ref105.addUtilities;
    addUtilities({
      '.mix-blend-normal': {
        'mix-blend-mode': 'normal'
      },
      '.mix-blend-multiply': {
        'mix-blend-mode': 'multiply'
      },
      '.mix-blend-screen': {
        'mix-blend-mode': 'screen'
      },
      '.mix-blend-overlay': {
        'mix-blend-mode': 'overlay'
      },
      '.mix-blend-darken': {
        'mix-blend-mode': 'darken'
      },
      '.mix-blend-lighten': {
        'mix-blend-mode': 'lighten'
      },
      '.mix-blend-color-dodge': {
        'mix-blend-mode': 'color-dodge'
      },
      '.mix-blend-color-burn': {
        'mix-blend-mode': 'color-burn'
      },
      '.mix-blend-hard-light': {
        'mix-blend-mode': 'hard-light'
      },
      '.mix-blend-soft-light': {
        'mix-blend-mode': 'soft-light'
      },
      '.mix-blend-difference': {
        'mix-blend-mode': 'difference'
      },
      '.mix-blend-exclusion': {
        'mix-blend-mode': 'exclusion'
      },
      '.mix-blend-hue': {
        'mix-blend-mode': 'hue'
      },
      '.mix-blend-saturation': {
        'mix-blend-mode': 'saturation'
      },
      '.mix-blend-color': {
        'mix-blend-mode': 'color'
      },
      '.mix-blend-luminosity': {
        'mix-blend-mode': 'luminosity'
      }
    });
  },
  boxShadow: function () {
    var transformValue = (0, _transformThemeValue)["default"]('boxShadow');
    var defaultBoxShadow = ["var(--tw-ring-offset-shadow, 0 0 #0000)", "var(--tw-ring-shadow, 0 0 #0000)", "var(--tw-shadow)"].join(', ');
    return function (_ref106) {
      var matchUtilities = _ref106.matchUtilities,
          addDefaults = _ref106.addDefaults,
          theme = _ref106.theme;
      addDefaults(' box-shadow', {
        '--tw-ring-offset-shadow': '0 0 #0000',
        '--tw-ring-shadow': '0 0 #0000',
        '--tw-shadow': '0 0 #0000',
        '--tw-shadow-colored': '0 0 #0000'
      });
      matchUtilities({
        shadow: function shadow(value) {
          value = transformValue(value);
          var ast = (0, _parseBoxShadowValue).parseBoxShadowValue(value);
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = ast[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var shadow = _step9.value;

              // Don't override color if the whole shadow is a variable
              if (!shadow.valid) {
                continue;
              }

              shadow.color = 'var(--tw-shadow-color)';
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          return {
            '@defaults box-shadow': {},
            '--tw-shadow': value === 'none' ? '0 0 #0000' : value,
            '--tw-shadow-colored': value === 'none' ? '0 0 #0000' : (0, _parseBoxShadowValue).formatBoxShadowValue(ast),
            'box-shadow': defaultBoxShadow
          };
        }
      }, {
        values: theme('boxShadow'),
        type: ['shadow']
      });
    };
  }(),
  boxShadowColor: function boxShadowColor(_ref107) {
    var matchUtilities = _ref107.matchUtilities,
        theme = _ref107.theme;
    matchUtilities({
      shadow: function shadow(value) {
        return {
          '--tw-shadow-color': (0, _toColorValue)["default"](value),
          '--tw-shadow': 'var(--tw-shadow-colored)'
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('boxShadowColor')),
      type: ['color']
    });
  },
  outlineStyle: function outlineStyle(_ref108) {
    var addUtilities = _ref108.addUtilities;
    addUtilities({
      '.outline-none': {
        outline: '2px solid transparent',
        'outline-offset': '2px'
      },
      '.outline': {
        'outline-style': 'solid'
      },
      '.outline-dashed': {
        'outline-style': 'dashed'
      },
      '.outline-dotted': {
        'outline-style': 'dotted'
      },
      '.outline-double': {
        'outline-style': 'double'
      },
      '.outline-hidden': {
        'outline-style': 'hidden'
      }
    });
  },
  outlineWidth: (0, _createUtilityPlugin)["default"]('outlineWidth', [['outline', ['outline-width']]], {
    type: ['length', 'number', 'percentage']
  }),
  outlineOffset: (0, _createUtilityPlugin)["default"]('outlineOffset', [['outline-offset', ['outline-offset']]], {
    type: ['length', 'number', 'percentage']
  }),
  outlineColor: function outlineColor(_ref109) {
    var matchUtilities = _ref109.matchUtilities,
        theme = _ref109.theme;
    matchUtilities({
      outline: function outline(value) {
        return {
          'outline-color': (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('outlineColor')),
      type: ['color']
    });
  },
  ringWidth: function ringWidth(_ref110) {
    var matchUtilities = _ref110.matchUtilities,
        addDefaults = _ref110.addDefaults,
        addUtilities = _ref110.addUtilities,
        theme = _ref110.theme;
    var ringOpacityDefault = theme('ringOpacity.DEFAULT', '0.5');
    var ringColorDefault = (0, _withAlphaVariable).withAlphaValue(theme('ringColor.DEFAULT'), ringOpacityDefault, "rgb(147 197 253 / ".concat(ringOpacityDefault, ")"));
    addDefaults('ring-width', {
      '--tw-ring-inset': ' ',
      '--tw-ring-offset-width': theme('ringOffsetWidth.DEFAULT', '0px'),
      '--tw-ring-offset-color': theme('ringOffsetColor.DEFAULT', '#fff'),
      '--tw-ring-color': ringColorDefault,
      '--tw-ring-offset-shadow': '0 0 #0000',
      '--tw-ring-shadow': '0 0 #0000',
      '--tw-shadow': '0 0 #0000',
      '--tw-shadow-colored': '0 0 #0000'
    });
    matchUtilities({
      ring: function ring(value) {
        return {
          '@defaults ring-width': {},
          '--tw-ring-offset-shadow': "var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)",
          '--tw-ring-shadow': "var(--tw-ring-inset) 0 0 0 calc(".concat(value, " + var(--tw-ring-offset-width)) var(--tw-ring-color)"),
          'box-shadow': ["var(--tw-ring-offset-shadow)", "var(--tw-ring-shadow)", "var(--tw-shadow, 0 0 #0000)"].join(', ')
        };
      }
    }, {
      values: theme('ringWidth'),
      type: 'length'
    });
    addUtilities({
      '.ring-inset': {
        '@defaults ring-width': {},
        '--tw-ring-inset': 'inset'
      }
    });
  },
  ringColor: function ringColor(_ref111) {
    var matchUtilities = _ref111.matchUtilities,
        theme = _ref111.theme;
    matchUtilities({
      ring: function ring(value) {
        return (0, _withAlphaVariable)["default"]({
          color: value,
          property: '--tw-ring-color',
          variable: '--tw-ring-opacity'
        });
      }
    }, {
      values: Object.fromEntries(Object.entries((0, _flattenColorPalette)["default"](theme('ringColor'))).filter(function (_ref112) {
        var _ref113 = _slicedToArray(_ref112, 1),
            modifier = _ref113[0];

        return modifier !== 'DEFAULT';
      })),
      type: 'color'
    });
  },
  ringOpacity: (0, _createUtilityPlugin)["default"]('ringOpacity', [['ring-opacity', ['--tw-ring-opacity']]], {
    filterDefault: true
  }),
  ringOffsetWidth: (0, _createUtilityPlugin)["default"]('ringOffsetWidth', [['ring-offset', ['--tw-ring-offset-width']]], {
    type: 'length'
  }),
  ringOffsetColor: function ringOffsetColor(_ref114) {
    var matchUtilities = _ref114.matchUtilities,
        theme = _ref114.theme;
    matchUtilities({
      'ring-offset': function ringOffset(value) {
        return {
          '--tw-ring-offset-color': (0, _toColorValue)["default"](value)
        };
      }
    }, {
      values: (0, _flattenColorPalette)["default"](theme('ringOffsetColor')),
      type: 'color'
    });
  },
  blur: function blur(_ref115) {
    var matchUtilities = _ref115.matchUtilities,
        theme = _ref115.theme;
    matchUtilities({
      blur: function blur(value) {
        return {
          '--tw-blur': "blur(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('blur')
    });
  },
  brightness: function brightness(_ref116) {
    var matchUtilities = _ref116.matchUtilities,
        theme = _ref116.theme;
    matchUtilities({
      brightness: function brightness(value) {
        return {
          '--tw-brightness': "brightness(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('brightness')
    });
  },
  contrast: function contrast(_ref117) {
    var matchUtilities = _ref117.matchUtilities,
        theme = _ref117.theme;
    matchUtilities({
      contrast: function contrast(value) {
        return {
          '--tw-contrast': "contrast(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('contrast')
    });
  },
  dropShadow: function dropShadow(_ref118) {
    var matchUtilities = _ref118.matchUtilities,
        theme = _ref118.theme;
    matchUtilities({
      'drop-shadow': function dropShadow(value) {
        return {
          '--tw-drop-shadow': Array.isArray(value) ? value.map(function (v) {
            return "drop-shadow(".concat(v, ")");
          }).join(' ') : "drop-shadow(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('dropShadow')
    });
  },
  grayscale: function grayscale(_ref119) {
    var matchUtilities = _ref119.matchUtilities,
        theme = _ref119.theme;
    matchUtilities({
      grayscale: function grayscale(value) {
        return {
          '--tw-grayscale': "grayscale(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('grayscale')
    });
  },
  hueRotate: function hueRotate(_ref120) {
    var matchUtilities = _ref120.matchUtilities,
        theme = _ref120.theme;
    matchUtilities({
      'hue-rotate': function hueRotate(value) {
        return {
          '--tw-hue-rotate': "hue-rotate(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('hueRotate'),
      supportsNegativeValues: true
    });
  },
  invert: function invert(_ref121) {
    var matchUtilities = _ref121.matchUtilities,
        theme = _ref121.theme;
    matchUtilities({
      invert: function invert(value) {
        return {
          '--tw-invert': "invert(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('invert')
    });
  },
  saturate: function saturate(_ref122) {
    var matchUtilities = _ref122.matchUtilities,
        theme = _ref122.theme;
    matchUtilities({
      saturate: function saturate(value) {
        return {
          '--tw-saturate': "saturate(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('saturate')
    });
  },
  sepia: function sepia(_ref123) {
    var matchUtilities = _ref123.matchUtilities,
        theme = _ref123.theme;
    matchUtilities({
      sepia: function sepia(value) {
        return {
          '--tw-sepia': "sepia(".concat(value, ")"),
          '@defaults filter': {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme('sepia')
    });
  },
  filter: function filter(_ref124) {
    var addDefaults = _ref124.addDefaults,
        addUtilities = _ref124.addUtilities;
    addDefaults('filter', {
      '--tw-blur': ' ',
      '--tw-brightness': ' ',
      '--tw-contrast': ' ',
      '--tw-grayscale': ' ',
      '--tw-hue-rotate': ' ',
      '--tw-invert': ' ',
      '--tw-saturate': ' ',
      '--tw-sepia': ' ',
      '--tw-drop-shadow': ' '
    });
    addUtilities({
      '.filter': {
        '@defaults filter': {},
        filter: cssFilterValue
      },
      '.filter-none': {
        filter: 'none'
      }
    });
  },
  backdropBlur: function backdropBlur(_ref125) {
    var matchUtilities = _ref125.matchUtilities,
        theme = _ref125.theme;
    matchUtilities({
      'backdrop-blur': function backdropBlur(value) {
        return {
          '--tw-backdrop-blur': "blur(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropBlur')
    });
  },
  backdropBrightness: function backdropBrightness(_ref126) {
    var matchUtilities = _ref126.matchUtilities,
        theme = _ref126.theme;
    matchUtilities({
      'backdrop-brightness': function backdropBrightness(value) {
        return {
          '--tw-backdrop-brightness': "brightness(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropBrightness')
    });
  },
  backdropContrast: function backdropContrast(_ref127) {
    var matchUtilities = _ref127.matchUtilities,
        theme = _ref127.theme;
    matchUtilities({
      'backdrop-contrast': function backdropContrast(value) {
        return {
          '--tw-backdrop-contrast': "contrast(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropContrast')
    });
  },
  backdropGrayscale: function backdropGrayscale(_ref128) {
    var matchUtilities = _ref128.matchUtilities,
        theme = _ref128.theme;
    matchUtilities({
      'backdrop-grayscale': function backdropGrayscale(value) {
        return {
          '--tw-backdrop-grayscale': "grayscale(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropGrayscale')
    });
  },
  backdropHueRotate: function backdropHueRotate(_ref129) {
    var matchUtilities = _ref129.matchUtilities,
        theme = _ref129.theme;
    matchUtilities({
      'backdrop-hue-rotate': function backdropHueRotate(value) {
        return {
          '--tw-backdrop-hue-rotate': "hue-rotate(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropHueRotate'),
      supportsNegativeValues: true
    });
  },
  backdropInvert: function backdropInvert(_ref130) {
    var matchUtilities = _ref130.matchUtilities,
        theme = _ref130.theme;
    matchUtilities({
      'backdrop-invert': function backdropInvert(value) {
        return {
          '--tw-backdrop-invert': "invert(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropInvert')
    });
  },
  backdropOpacity: function backdropOpacity(_ref131) {
    var matchUtilities = _ref131.matchUtilities,
        theme = _ref131.theme;
    matchUtilities({
      'backdrop-opacity': function backdropOpacity(value) {
        return {
          '--tw-backdrop-opacity': "opacity(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropOpacity')
    });
  },
  backdropSaturate: function backdropSaturate(_ref132) {
    var matchUtilities = _ref132.matchUtilities,
        theme = _ref132.theme;
    matchUtilities({
      'backdrop-saturate': function backdropSaturate(value) {
        return {
          '--tw-backdrop-saturate': "saturate(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropSaturate')
    });
  },
  backdropSepia: function backdropSepia(_ref133) {
    var matchUtilities = _ref133.matchUtilities,
        theme = _ref133.theme;
    matchUtilities({
      'backdrop-sepia': function backdropSepia(value) {
        return {
          '--tw-backdrop-sepia': "sepia(".concat(value, ")"),
          '@defaults backdrop-filter': {},
          'backdrop-filter': cssBackdropFilterValue
        };
      }
    }, {
      values: theme('backdropSepia')
    });
  },
  backdropFilter: function backdropFilter(_ref134) {
    var addDefaults = _ref134.addDefaults,
        addUtilities = _ref134.addUtilities;
    addDefaults('backdrop-filter', {
      '--tw-backdrop-blur': ' ',
      '--tw-backdrop-brightness': ' ',
      '--tw-backdrop-contrast': ' ',
      '--tw-backdrop-grayscale': ' ',
      '--tw-backdrop-hue-rotate': ' ',
      '--tw-backdrop-invert': ' ',
      '--tw-backdrop-opacity': ' ',
      '--tw-backdrop-saturate': ' ',
      '--tw-backdrop-sepia': ' '
    });
    addUtilities({
      '.backdrop-filter': {
        '@defaults backdrop-filter': {},
        'backdrop-filter': cssBackdropFilterValue
      },
      '.backdrop-filter-none': {
        'backdrop-filter': 'none'
      }
    });
  },
  transitionProperty: function transitionProperty(_ref135) {
    var matchUtilities = _ref135.matchUtilities,
        theme = _ref135.theme;
    var defaultTimingFunction = theme('transitionTimingFunction.DEFAULT');
    var defaultDuration = theme('transitionDuration.DEFAULT');
    matchUtilities({
      transition: function transition(value) {
        return _objectSpread({
          'transition-property': value
        }, value === 'none' ? {} : {
          'transition-timing-function': defaultTimingFunction,
          'transition-duration': defaultDuration
        });
      }
    }, {
      values: theme('transitionProperty')
    });
  },
  transitionDelay: (0, _createUtilityPlugin)["default"]('transitionDelay', [['delay', ['transitionDelay']]]),
  transitionDuration: (0, _createUtilityPlugin)["default"]('transitionDuration', [['duration', ['transitionDuration']]], {
    filterDefault: true
  }),
  transitionTimingFunction: (0, _createUtilityPlugin)["default"]('transitionTimingFunction', [['ease', ['transitionTimingFunction']]], {
    filterDefault: true
  }),
  willChange: (0, _createUtilityPlugin)["default"]('willChange', [['will-change', ['will-change']]]),
  content: (0, _createUtilityPlugin)["default"]('content', [['content', ['--tw-content', ['content', 'var(--tw-content)']]]])
};
exports.corePlugins = corePlugins;