"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nesting = nesting;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssNested = _interopRequireDefault(require("postcss-nested"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function nesting() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _postcssNested["default"];
  return function (root, result) {
    root.walkAtRules('screen', function (rule) {
      rule.name = 'media';
      rule.params = "screen(".concat(rule.params, ")");
    });
    root.walkAtRules('apply', function (rule) {
      rule.before(_postcss["default"].decl({
        prop: '__apply',
        value: rule.params,
        source: rule.source
      }));
      rule.remove();
    });

    var plugin = function () {
      var ref;

      if (typeof opts === 'function' || _typeof(opts) === 'object' && (opts === null || opts === void 0 ? void 0 : (ref = opts.hasOwnProperty) === null || ref === void 0 ? void 0 : ref.call(opts, 'postcssPlugin'))) {
        return opts;
      }

      if (typeof opts === 'string') {
        return require(opts);
      }

      if (Object.keys(opts).length <= 0) {
        return _postcssNested["default"];
      }

      throw new Error('tailwindcss/nesting should be loaded with a nesting plugin.');
    }();

    (0, _postcss)["default"]([plugin]).process(root, result.opts).sync();
    root.walkDecls('__apply', function (decl) {
      decl.before(_postcss["default"].atRule({
        name: 'apply',
        params: decl.value,
        source: decl.source
      }));
      decl.remove();
    });
    return root;
  };
}