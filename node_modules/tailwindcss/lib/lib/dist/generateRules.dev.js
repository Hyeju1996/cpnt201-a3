"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(candidatePermutations),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(resolveMatchedPlugins),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(recordCandidates),
    _marked4 =
/*#__PURE__*/
regeneratorRuntime.mark(resolveMatches);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateRules = exports.resolveMatches = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssSelectorParser = _interopRequireDefault(require("postcss-selector-parser"));

var _parseObjectStyles = _interopRequireDefault(require("../util/parseObjectStyles"));

var _isPlainObject = _interopRequireDefault(require("../util/isPlainObject"));

var _prefixSelector = _interopRequireDefault(require("../util/prefixSelector"));

var _pluginUtils = require("../util/pluginUtils");

var _log = _interopRequireDefault(require("../util/log"));

var sharedState = _interopRequireWildcard(require("./sharedState"));

var _formatVariantSelector = require("../util/formatVariantSelector");

var _nameClass = require("../util/nameClass");

var _dataTypes = require("../util/dataTypes");

var _isValidArbitraryValue = _interopRequireDefault(require("../util/isValidArbitraryValue"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
}

var classNameParser = (0, _postcssSelectorParser)["default"](function (selectors) {
  return selectors.first.filter(function (_ref) {
    var type = _ref.type;
    return type === 'class';
  }).pop().value;
});

function getClassNameFromSelector(selector) {
  return classNameParser.transformSync(selector);
} // Generate match permutations for a class candidate, like:
// ['ring-offset-blue', '100']
// ['ring-offset', 'blue-100']
// ['ring', 'offset-blue-100']
// Example with dynamic classes:
// ['grid-cols', '[[linename],1fr,auto]']
// ['grid', 'cols-[[linename],1fr,auto]']


function candidatePermutations(candidate) {
  var lastIndex, dashIdx, bracketIdx, prefix, modifier;
  return regeneratorRuntime.wrap(function candidatePermutations$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          lastIndex = Infinity;

        case 1:
          if (!(lastIndex >= 0)) {
            _context.next = 13;
            break;
          }

          dashIdx = void 0;

          if (lastIndex === Infinity && candidate.endsWith(']')) {
            bracketIdx = candidate.indexOf('['); // If character before `[` isn't a dash or a slash, this isn't a dynamic class
            // eg. string[]

            dashIdx = ['-', '/'].includes(candidate[bracketIdx - 1]) ? bracketIdx - 1 : -1;
          } else {
            dashIdx = candidate.lastIndexOf('-', lastIndex);
          }

          if (!(dashIdx < 0)) {
            _context.next = 6;
            break;
          }

          return _context.abrupt("break", 13);

        case 6:
          prefix = candidate.slice(0, dashIdx);
          modifier = candidate.slice(dashIdx + 1);
          _context.next = 10;
          return [prefix, modifier];

        case 10:
          lastIndex = dashIdx - 1;
          _context.next = 1;
          break;

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function applyPrefix(matches, context) {
  if (matches.length === 0 || context.tailwindConfig.prefix === '') {
    return matches;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = matches[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var match = _step.value;

      var _match = _slicedToArray(match, 1),
          meta = _match[0];

      if (meta.options.respectPrefix) {
        (function () {
          var container = _postcss["default"].root({
            nodes: [match[1].clone()]
          });

          var classCandidate = match[1].raws.tailwind.classCandidate;
          container.walkRules(function (r) {
            // If this is a negative utility with a dash *before* the prefix we
            // have to ensure that the generated selector matches the candidate
            // Not doing this will cause `-tw-top-1` to generate the class `.tw--top-1`
            // The disconnect between candidate <-> class can cause @apply to hard crash.
            var shouldPrependNegative = classCandidate.startsWith('-');
            r.selector = (0, _prefixSelector)["default"](context.tailwindConfig.prefix, r.selector, shouldPrependNegative);
          });
          match[1] = container.nodes[0];
        })();
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return matches;
}

function applyImportant(matches) {
  if (matches.length === 0) {
    return matches;
  }

  var result = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = matches[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          meta = _step2$value[0],
          rule = _step2$value[1];

      var container = _postcss["default"].root({
        nodes: [rule.clone()]
      });

      container.walkRules(function (r) {
        r.selector = (0, _pluginUtils).updateAllClasses(r.selector, function (className) {
          return "!".concat(className);
        });
        r.walkDecls(function (d) {
          return d.important = true;
        });
      });
      result.push([_objectSpread({}, meta, {
        important: true
      }), container.nodes[0]]);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
} // Takes a list of rule tuples and applies a variant like `hover`, sm`,
// whatever to it. We used to do some extra caching here to avoid generating
// a variant of the same rule more than once, but this was never hit because
// we cache at the entire selector level further up the tree.
//
// Technically you can get a cache hit if you have `hover:focus:text-center`
// and `focus:hover:text-center` in the same project, but it doesn't feel
// worth the complexity for that case.


function applyVariant(variant, matches, context) {
  if (matches.length === 0) {
    return matches;
  }

  if (context.variantMap.has(variant)) {
    var variantFunctionTuples = context.variantMap.get(variant);
    var result = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = matches[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _step3$value = _slicedToArray(_step3.value, 2),
            meta = _step3$value[0],
            rule1 = _step3$value[1];

        // Don't generate variants for user css
        if (meta.layer === 'user') {
          continue;
        }

        var container = _postcss["default"].root({
          nodes: [rule1.clone()]
        });

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          var _loop = function _loop() {
            var _step4$value = _slicedToArray(_step4.value, 2),
                variantSort = _step4$value[0],
                variantFunction = _step4$value[1];

            var clone = container.clone();
            var collectedFormats = [];
            var originals = new Map();

            function prepareBackup() {
              if (originals.size > 0) return; // Already prepared, chicken out

              clone.walkRules(function (rule) {
                return originals.set(rule, rule.selector);
              });
            }

            function modifySelectors(modifierFunction) {
              prepareBackup();
              clone.each(function (rule) {
                if (rule.type !== 'rule') {
                  return;
                }

                rule.selectors = rule.selectors.map(function (selector) {
                  return modifierFunction({
                    get className() {
                      return getClassNameFromSelector(selector);
                    },

                    selector: selector
                  });
                });
              });
              return clone;
            }

            var ruleWithVariant = variantFunction({
              // Public API
              get container() {
                prepareBackup();
                return clone;
              },

              separator: context.tailwindConfig.separator,
              modifySelectors: modifySelectors,
              // Private API for now
              wrap: function wrap(wrapper) {
                var nodes = clone.nodes;
                clone.removeAll();
                wrapper.append(nodes);
                clone.append(wrapper);
              },
              format: function format(selectorFormat) {
                collectedFormats.push(selectorFormat);
              }
            });

            if (typeof ruleWithVariant === 'string') {
              collectedFormats.push(ruleWithVariant);
            }

            if (ruleWithVariant === null) {
              return "continue";
            } // We filled the `originals`, therefore we assume that somebody touched
            // `container` or `modifySelectors`. Let's see if they did, so that we
            // can restore the selectors, and collect the format strings.


            if (originals.size > 0) {
              clone.walkRules(function (rule) {
                if (!originals.has(rule)) return;
                var before = originals.get(rule);
                if (before === rule.selector) return; // No mutation happened

                var modified = rule.selector; // Rebuild the base selector, this is what plugin authors would do
                // as well. E.g.: `${variant}${separator}${className}`.
                // However, plugin authors probably also prepend or append certain
                // classes, pseudos, ids, ...

                var rebuiltBase = (0, _postcssSelectorParser)["default"](function (selectors) {
                  selectors.walkClasses(function (classNode) {
                    classNode.value = "".concat(variant).concat(context.tailwindConfig.separator).concat(classNode.value);
                  });
                }).processSync(before); // Now that we know the original selector, the new selector, and
                // the rebuild part in between, we can replace the part that plugin
                // authors need to rebuild with `&`, and eventually store it in the
                // collectedFormats. Similar to what `format('...')` would do.
                //
                // E.g.:
                //                   variant: foo
                //                  selector: .markdown > p
                //      modified (by plugin): .foo .foo\\:markdown > p
                //    rebuiltBase (internal): .foo\\:markdown > p
                //                    format: .foo &

                collectedFormats.push(modified.replace(rebuiltBase, '&'));
                rule.selector = before;
              });
            } // This tracks the originating layer for the variant
            // For example:
            // .sm:underline {} is a variant of something in the utilities layer
            // .sm:container {} is a variant of the container component


            clone.nodes[0].raws.tailwind = _objectSpread({}, clone.nodes[0].raws.tailwind, {
              parentLayer: meta.layer
            });
            var withOffset = [_objectSpread({}, meta, {
              sort: variantSort | meta.sort,
              collectedFormats: ((_collectedFormats = meta.collectedFormats) !== null && _collectedFormats !== void 0 ? _collectedFormats : []).concat(collectedFormats)
            }), clone.nodes[0]];
            result.push(withOffset);
          };

          for (var _iterator4 = variantFunctionTuples[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _collectedFormats;

            var _ret = _loop();

            if (_ret === "continue") continue;
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return result;
  }

  return [];
}

function parseRules(rule, cache) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // PostCSS node
  if (!(0, _isPlainObject)["default"](rule) && !Array.isArray(rule)) {
    return [[rule], options];
  } // Tuple


  if (Array.isArray(rule)) {
    return parseRules(rule[0], cache, rule[1]);
  } // Simple object


  if (!cache.has(rule)) {
    cache.set(rule, (0, _parseObjectStyles)["default"](rule));
  }

  return [cache.get(rule), options];
}

var IS_VALID_PROPERTY_NAME = /^[a-z_-]/;

function isValidPropName(name) {
  return IS_VALID_PROPERTY_NAME.test(name);
}
/**
 * @param {string} declaration
 * @returns {boolean}
 */


function looksLikeUri(declaration) {
  // Quick bailout for obvious non-urls
  // This doesn't support schemes that don't use a leading // but that's unlikely to be a problem
  if (!declaration.includes('://')) {
    return false;
  }

  try {
    var url = new URL(declaration);
    return url.scheme !== '' && url.host !== '';
  } catch (err) {
    // Definitely not a valid url
    return false;
  }
}

function isParsableCssValue(property, value) {
  // We don't want to to treat [https://example.com] as a custom property
  // Even though, according to the CSS grammar, it's a totally valid CSS declaration
  // So we short-circuit here by checking if the custom property looks like a url
  if (looksLikeUri("".concat(property, ":").concat(value))) {
    return false;
  }

  try {
    _postcss["default"].parse("a{".concat(property, ":").concat(value, "}")).toResult();

    return true;
  } catch (err) {
    return false;
  }
}

function extractArbitraryProperty(classCandidate, context) {
  var ref;

  var _ref2 = (ref = classCandidate.match(/^\[([a-zA-Z0-9-_]+):(\S+)\]$/)) !== null && ref !== void 0 ? ref : [],
      _ref3 = _slicedToArray(_ref2, 3),
      property = _ref3[1],
      value = _ref3[2];

  if (value === undefined) {
    return null;
  }

  if (!isValidPropName(property)) {
    return null;
  }

  if (!(0, _isValidArbitraryValue)["default"](value)) {
    return null;
  }

  var normalized = (0, _dataTypes).normalize(value);

  if (!isParsableCssValue(property, normalized)) {
    return null;
  }

  return [[{
    sort: context.arbitraryPropertiesSort,
    layer: 'utilities'
  }, function () {
    return _defineProperty({}, (0, _nameClass).asClass(classCandidate), _defineProperty({}, property, normalized));
  }]];
}

function resolveMatchedPlugins(classCandidate, context) {
  var candidatePrefix, negative, twConfigPrefix, twConfigPrefixLen, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, prefix, modifier;

  return regeneratorRuntime.wrap(function resolveMatchedPlugins$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!context.candidateRuleMap.has(classCandidate)) {
            _context3.next = 3;
            break;
          }

          _context3.next = 3;
          return [context.candidateRuleMap.get(classCandidate), 'DEFAULT'];

        case 3:
          return _context3.delegateYield(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee(arbitraryPropertyRule) {
            return regeneratorRuntime.wrap(function _callee$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (!(arbitraryPropertyRule !== null)) {
                      _context2.next = 3;
                      break;
                    }

                    _context2.next = 3;
                    return [arbitraryPropertyRule, 'DEFAULT'];

                  case 3:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee);
          })(extractArbitraryProperty(classCandidate, context)), "t0", 4);

        case 4:
          candidatePrefix = classCandidate;
          negative = false;
          twConfigPrefix = context.tailwindConfig.prefix;
          twConfigPrefixLen = twConfigPrefix.length;

          if (candidatePrefix[twConfigPrefixLen] === '-') {
            negative = true;
            candidatePrefix = twConfigPrefix + candidatePrefix.slice(twConfigPrefixLen + 1);
          }

          if (!(negative && context.candidateRuleMap.has(candidatePrefix))) {
            _context3.next = 12;
            break;
          }

          _context3.next = 12;
          return [context.candidateRuleMap.get(candidatePrefix), '-DEFAULT'];

        case 12:
          _iteratorNormalCompletion5 = true;
          _didIteratorError5 = false;
          _iteratorError5 = undefined;
          _context3.prev = 15;
          _iterator5 = candidatePermutations(candidatePrefix)[Symbol.iterator]();

        case 17:
          if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
            _context3.next = 25;
            break;
          }

          _step5$value = _slicedToArray(_step5.value, 2), prefix = _step5$value[0], modifier = _step5$value[1];

          if (!context.candidateRuleMap.has(prefix)) {
            _context3.next = 22;
            break;
          }

          _context3.next = 22;
          return [context.candidateRuleMap.get(prefix), negative ? "-".concat(modifier) : modifier];

        case 22:
          _iteratorNormalCompletion5 = true;
          _context3.next = 17;
          break;

        case 25:
          _context3.next = 31;
          break;

        case 27:
          _context3.prev = 27;
          _context3.t1 = _context3["catch"](15);
          _didIteratorError5 = true;
          _iteratorError5 = _context3.t1;

        case 31:
          _context3.prev = 31;
          _context3.prev = 32;

          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }

        case 34:
          _context3.prev = 34;

          if (!_didIteratorError5) {
            _context3.next = 37;
            break;
          }

          throw _iteratorError5;

        case 37:
          return _context3.finish(34);

        case 38:
          return _context3.finish(31);

        case 39:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2, null, [[15, 27, 31, 39], [32,, 34, 38]]);
}

function splitWithSeparator(input, separator) {
  if (input === sharedState.NOT_ON_DEMAND) {
    return [sharedState.NOT_ON_DEMAND];
  }

  return input.split(new RegExp("\\".concat(separator, "(?![^[]*\\])"), 'g'));
}

function recordCandidates(matches, classCandidate) {
  var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, match;

  return regeneratorRuntime.wrap(function recordCandidates$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _iteratorNormalCompletion6 = true;
          _didIteratorError6 = false;
          _iteratorError6 = undefined;
          _context4.prev = 3;
          _iterator6 = matches[Symbol.iterator]();

        case 5:
          if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
            _context4.next = 13;
            break;
          }

          match = _step6.value;
          match[1].raws.tailwind = _objectSpread({}, match[1].raws.tailwind, {
            classCandidate: classCandidate
          });
          _context4.next = 10;
          return match;

        case 10:
          _iteratorNormalCompletion6 = true;
          _context4.next = 5;
          break;

        case 13:
          _context4.next = 19;
          break;

        case 15:
          _context4.prev = 15;
          _context4.t0 = _context4["catch"](3);
          _didIteratorError6 = true;
          _iteratorError6 = _context4.t0;

        case 19:
          _context4.prev = 19;
          _context4.prev = 20;

          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }

        case 22:
          _context4.prev = 22;

          if (!_didIteratorError6) {
            _context4.next = 25;
            break;
          }

          throw _iteratorError6;

        case 25:
          return _context4.finish(22);

        case 26:
          return _context4.finish(19);

        case 27:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked3, null, [[3, 15, 19, 27], [20,, 22, 26]]);
}

function resolveMatches(candidate, context) {
  var separator, _splitWithSeparator$r, _splitWithSeparator$r2, classCandidate, variants, important, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _loop2, _iterator7, _step7, ref, ref1, _ret2;

  return regeneratorRuntime.wrap(function resolveMatches$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          separator = context.tailwindConfig.separator;
          _splitWithSeparator$r = splitWithSeparator(candidate, separator).reverse(), _splitWithSeparator$r2 = _toArray(_splitWithSeparator$r), classCandidate = _splitWithSeparator$r2[0], variants = _splitWithSeparator$r2.slice(1);
          important = false;

          if (classCandidate.startsWith('!')) {
            important = true;
            classCandidate = classCandidate.slice(1);
          } // TODO: Reintroduce this in ways that doesn't break on false positives
          // function sortAgainst(toSort, against) {
          //   return toSort.slice().sort((a, z) => {
          //     return bigSign(against.get(a)[0] - against.get(z)[0])
          //   })
          // }
          // let sorted = sortAgainst(variants, context.variantMap)
          // if (sorted.toString() !== variants.toString()) {
          //   let corrected = sorted.reverse().concat(classCandidate).join(':')
          //   throw new Error(`Class ${candidate} should be written as ${corrected}`)
          // }


          _iteratorNormalCompletion7 = true;
          _didIteratorError7 = false;
          _iteratorError7 = undefined;
          _context6.prev = 7;
          _loop2 =
          /*#__PURE__*/
          regeneratorRuntime.mark(function _loop2() {
            var matchedPlugins, matches, typesByMatches, _matchedPlugins, plugins, modifier, isOnlyPlugin, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _step8$value, sort, plugin, matchesPerPlugin, _iteratorNormalCompletion16, _didIteratorError16, _iteratorError16, _iterator16, _step16, ruleSet, _parseRules, _parseRules2, _rules, options, _iteratorNormalCompletion17, _didIteratorError17, _iteratorError17, _iterator17, _step17, rule, _ruleSet, _parseRules3, _parseRules4, _rules2, _options, _iteratorNormalCompletion18, _didIteratorError18, _iteratorError18, _iterator18, _step18, _rule, typesPerPlugin, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, pluginTypes, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, type, removeFromOwnGroup, _iteratorNormalCompletion12, _didIteratorError12, _iteratorError12, _iterator12, _step12, otherGroup, messages, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, _step10$value, idx, group, _iteratorNormalCompletion13, _didIteratorError13, _iteratorError13, _iterator13, _step13, _type, rules, _iteratorNormalCompletion14, _didIteratorError14, _iteratorError14, _iterator14, _step14, variant, _iteratorNormalCompletion15, _didIteratorError15, _iteratorError15, _iterator15, _step15, match1;

            return regeneratorRuntime.wrap(function _loop2$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    matchedPlugins = _step7.value;
                    matches = [];
                    typesByMatches = new Map();
                    _matchedPlugins = _slicedToArray(matchedPlugins, 2), plugins = _matchedPlugins[0], modifier = _matchedPlugins[1];
                    isOnlyPlugin = plugins.length === 1;
                    _iteratorNormalCompletion8 = true;
                    _didIteratorError8 = false;
                    _iteratorError8 = undefined;
                    _context5.prev = 8;
                    _iterator8 = plugins[Symbol.iterator]();

                  case 10:
                    if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
                      _context5.next = 86;
                      break;
                    }

                    _step8$value = _slicedToArray(_step8.value, 2), sort = _step8$value[0], plugin = _step8$value[1];
                    matchesPerPlugin = [];

                    if (!(typeof plugin === 'function')) {
                      _context5.next = 60;
                      break;
                    }

                    _iteratorNormalCompletion16 = true;
                    _didIteratorError16 = false;
                    _iteratorError16 = undefined;
                    _context5.prev = 17;
                    _iterator16 = [].concat(plugin(modifier, {
                      isOnlyPlugin: isOnlyPlugin
                    }))[Symbol.iterator]();

                  case 19:
                    if (_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done) {
                      _context5.next = 44;
                      break;
                    }

                    ruleSet = _step16.value;
                    _parseRules = parseRules(ruleSet, context.postCssNodeCache), _parseRules2 = _slicedToArray(_parseRules, 2), _rules = _parseRules2[0], options = _parseRules2[1];
                    _iteratorNormalCompletion17 = true;
                    _didIteratorError17 = false;
                    _iteratorError17 = undefined;
                    _context5.prev = 25;

                    for (_iterator17 = _rules[Symbol.iterator](); !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                      rule = _step17.value;
                      matchesPerPlugin.push([_objectSpread({}, sort, {
                        options: _objectSpread({}, sort.options, {}, options)
                      }), rule]);
                    }

                    _context5.next = 33;
                    break;

                  case 29:
                    _context5.prev = 29;
                    _context5.t0 = _context5["catch"](25);
                    _didIteratorError17 = true;
                    _iteratorError17 = _context5.t0;

                  case 33:
                    _context5.prev = 33;
                    _context5.prev = 34;

                    if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
                      _iterator17["return"]();
                    }

                  case 36:
                    _context5.prev = 36;

                    if (!_didIteratorError17) {
                      _context5.next = 39;
                      break;
                    }

                    throw _iteratorError17;

                  case 39:
                    return _context5.finish(36);

                  case 40:
                    return _context5.finish(33);

                  case 41:
                    _iteratorNormalCompletion16 = true;
                    _context5.next = 19;
                    break;

                  case 44:
                    _context5.next = 50;
                    break;

                  case 46:
                    _context5.prev = 46;
                    _context5.t1 = _context5["catch"](17);
                    _didIteratorError16 = true;
                    _iteratorError16 = _context5.t1;

                  case 50:
                    _context5.prev = 50;
                    _context5.prev = 51;

                    if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                      _iterator16["return"]();
                    }

                  case 53:
                    _context5.prev = 53;

                    if (!_didIteratorError16) {
                      _context5.next = 56;
                      break;
                    }

                    throw _iteratorError16;

                  case 56:
                    return _context5.finish(53);

                  case 57:
                    return _context5.finish(50);

                  case 58:
                    _context5.next = 82;
                    break;

                  case 60:
                    if (!(modifier === 'DEFAULT' || modifier === '-DEFAULT')) {
                      _context5.next = 82;
                      break;
                    }

                    _ruleSet = plugin;
                    _parseRules3 = parseRules(_ruleSet, context.postCssNodeCache), _parseRules4 = _slicedToArray(_parseRules3, 2), _rules2 = _parseRules4[0], _options = _parseRules4[1];
                    _iteratorNormalCompletion18 = true;
                    _didIteratorError18 = false;
                    _iteratorError18 = undefined;
                    _context5.prev = 66;

                    for (_iterator18 = _rules2[Symbol.iterator](); !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                      _rule = _step18.value;
                      matchesPerPlugin.push([_objectSpread({}, sort, {
                        options: _objectSpread({}, sort.options, {}, _options)
                      }), _rule]);
                    }

                    _context5.next = 74;
                    break;

                  case 70:
                    _context5.prev = 70;
                    _context5.t2 = _context5["catch"](66);
                    _didIteratorError18 = true;
                    _iteratorError18 = _context5.t2;

                  case 74:
                    _context5.prev = 74;
                    _context5.prev = 75;

                    if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
                      _iterator18["return"]();
                    }

                  case 77:
                    _context5.prev = 77;

                    if (!_didIteratorError18) {
                      _context5.next = 80;
                      break;
                    }

                    throw _iteratorError18;

                  case 80:
                    return _context5.finish(77);

                  case 81:
                    return _context5.finish(74);

                  case 82:
                    if (matchesPerPlugin.length > 0) {
                      typesByMatches.set(matchesPerPlugin, (ref = sort.options) === null || ref === void 0 ? void 0 : ref.type);
                      matches.push(matchesPerPlugin);
                    }

                  case 83:
                    _iteratorNormalCompletion8 = true;
                    _context5.next = 10;
                    break;

                  case 86:
                    _context5.next = 92;
                    break;

                  case 88:
                    _context5.prev = 88;
                    _context5.t3 = _context5["catch"](8);
                    _didIteratorError8 = true;
                    _iteratorError8 = _context5.t3;

                  case 92:
                    _context5.prev = 92;
                    _context5.prev = 93;

                    if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                      _iterator8["return"]();
                    }

                  case 95:
                    _context5.prev = 95;

                    if (!_didIteratorError8) {
                      _context5.next = 98;
                      break;
                    }

                    throw _iteratorError8;

                  case 98:
                    return _context5.finish(95);

                  case 99:
                    return _context5.finish(92);

                  case 100:
                    if (!(isArbitraryValue(modifier) && matches.length > 1)) {
                      _context5.next = 233;
                      break;
                    }

                    typesPerPlugin = matches.map(function (match) {
                      return new Set(_toConsumableArray((ref1 = typesByMatches.get(match)) !== null && ref1 !== void 0 ? ref1 : []));
                    }); // Remove duplicates, so that we can detect proper unique types for each plugin.

                    _iteratorNormalCompletion9 = true;
                    _didIteratorError9 = false;
                    _iteratorError9 = undefined;
                    _context5.prev = 105;
                    _iterator9 = typesPerPlugin[Symbol.iterator]();

                  case 107:
                    if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {
                      _context5.next = 165;
                      break;
                    }

                    pluginTypes = _step9.value;
                    _iteratorNormalCompletion11 = true;
                    _didIteratorError11 = false;
                    _iteratorError11 = undefined;
                    _context5.prev = 112;
                    _iterator11 = pluginTypes[Symbol.iterator]();

                  case 114:
                    if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {
                      _context5.next = 148;
                      break;
                    }

                    type = _step11.value;
                    removeFromOwnGroup = false;
                    _iteratorNormalCompletion12 = true;
                    _didIteratorError12 = false;
                    _iteratorError12 = undefined;
                    _context5.prev = 120;
                    _iterator12 = typesPerPlugin[Symbol.iterator]();

                  case 122:
                    if (_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done) {
                      _context5.next = 130;
                      break;
                    }

                    otherGroup = _step12.value;

                    if (!(pluginTypes === otherGroup)) {
                      _context5.next = 126;
                      break;
                    }

                    return _context5.abrupt("continue", 127);

                  case 126:
                    if (otherGroup.has(type)) {
                      otherGroup["delete"](type);
                      removeFromOwnGroup = true;
                    }

                  case 127:
                    _iteratorNormalCompletion12 = true;
                    _context5.next = 122;
                    break;

                  case 130:
                    _context5.next = 136;
                    break;

                  case 132:
                    _context5.prev = 132;
                    _context5.t4 = _context5["catch"](120);
                    _didIteratorError12 = true;
                    _iteratorError12 = _context5.t4;

                  case 136:
                    _context5.prev = 136;
                    _context5.prev = 137;

                    if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                      _iterator12["return"]();
                    }

                  case 139:
                    _context5.prev = 139;

                    if (!_didIteratorError12) {
                      _context5.next = 142;
                      break;
                    }

                    throw _iteratorError12;

                  case 142:
                    return _context5.finish(139);

                  case 143:
                    return _context5.finish(136);

                  case 144:
                    if (removeFromOwnGroup) pluginTypes["delete"](type);

                  case 145:
                    _iteratorNormalCompletion11 = true;
                    _context5.next = 114;
                    break;

                  case 148:
                    _context5.next = 154;
                    break;

                  case 150:
                    _context5.prev = 150;
                    _context5.t5 = _context5["catch"](112);
                    _didIteratorError11 = true;
                    _iteratorError11 = _context5.t5;

                  case 154:
                    _context5.prev = 154;
                    _context5.prev = 155;

                    if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                      _iterator11["return"]();
                    }

                  case 157:
                    _context5.prev = 157;

                    if (!_didIteratorError11) {
                      _context5.next = 160;
                      break;
                    }

                    throw _iteratorError11;

                  case 160:
                    return _context5.finish(157);

                  case 161:
                    return _context5.finish(154);

                  case 162:
                    _iteratorNormalCompletion9 = true;
                    _context5.next = 107;
                    break;

                  case 165:
                    _context5.next = 171;
                    break;

                  case 167:
                    _context5.prev = 167;
                    _context5.t6 = _context5["catch"](105);
                    _didIteratorError9 = true;
                    _iteratorError9 = _context5.t6;

                  case 171:
                    _context5.prev = 171;
                    _context5.prev = 172;

                    if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                      _iterator9["return"]();
                    }

                  case 174:
                    _context5.prev = 174;

                    if (!_didIteratorError9) {
                      _context5.next = 177;
                      break;
                    }

                    throw _iteratorError9;

                  case 177:
                    return _context5.finish(174);

                  case 178:
                    return _context5.finish(171);

                  case 179:
                    messages = [];
                    _iteratorNormalCompletion10 = true;
                    _didIteratorError10 = false;
                    _iteratorError10 = undefined;
                    _context5.prev = 183;
                    _iterator10 = typesPerPlugin.entries()[Symbol.iterator]();

                  case 185:
                    if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {
                      _context5.next = 217;
                      break;
                    }

                    _step10$value = _slicedToArray(_step10.value, 2), idx = _step10$value[0], group = _step10$value[1];
                    _iteratorNormalCompletion13 = true;
                    _didIteratorError13 = false;
                    _iteratorError13 = undefined;
                    _context5.prev = 190;
                    _iterator13 = group[Symbol.iterator]();

                  case 192:
                    if (_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done) {
                      _context5.next = 200;
                      break;
                    }

                    _type = _step13.value;
                    rules = matches[idx].map(function (_ref5) {
                      var _ref6 = _slicedToArray(_ref5, 2),
                          rule = _ref6[1];

                      return rule;
                    }).flat().map(function (rule) {
                      return rule.toString().split('\n').slice(1, -1) // Remove selector and closing '}'
                      .map(function (line) {
                        return line.trim();
                      }).map(function (x) {
                        return "      ".concat(x);
                      }) // Re-indent
                      .join('\n');
                    }).join('\n\n');
                    messages.push("  Use `".concat(candidate.replace('[', "[".concat(_type, ":")), "` for `").concat(rules.trim(), "`"));
                    return _context5.abrupt("break", 200);

                  case 197:
                    _iteratorNormalCompletion13 = true;
                    _context5.next = 192;
                    break;

                  case 200:
                    _context5.next = 206;
                    break;

                  case 202:
                    _context5.prev = 202;
                    _context5.t7 = _context5["catch"](190);
                    _didIteratorError13 = true;
                    _iteratorError13 = _context5.t7;

                  case 206:
                    _context5.prev = 206;
                    _context5.prev = 207;

                    if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                      _iterator13["return"]();
                    }

                  case 209:
                    _context5.prev = 209;

                    if (!_didIteratorError13) {
                      _context5.next = 212;
                      break;
                    }

                    throw _iteratorError13;

                  case 212:
                    return _context5.finish(209);

                  case 213:
                    return _context5.finish(206);

                  case 214:
                    _iteratorNormalCompletion10 = true;
                    _context5.next = 185;
                    break;

                  case 217:
                    _context5.next = 223;
                    break;

                  case 219:
                    _context5.prev = 219;
                    _context5.t8 = _context5["catch"](183);
                    _didIteratorError10 = true;
                    _iteratorError10 = _context5.t8;

                  case 223:
                    _context5.prev = 223;
                    _context5.prev = 224;

                    if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                      _iterator10["return"]();
                    }

                  case 226:
                    _context5.prev = 226;

                    if (!_didIteratorError10) {
                      _context5.next = 229;
                      break;
                    }

                    throw _iteratorError10;

                  case 229:
                    return _context5.finish(226);

                  case 230:
                    return _context5.finish(223);

                  case 231:
                    _log["default"].warn(["The class `".concat(candidate, "` is ambiguous and matches multiple utilities.")].concat(messages, ["If this is content and not a class, replace it with `".concat(candidate.replace('[', '&lsqb;').replace(']', '&rsqb;'), "` to silence this warning.")]));

                    return _context5.abrupt("return", "continue");

                  case 233:
                    matches = matches.flat();
                    matches = Array.from(recordCandidates(matches, classCandidate));
                    matches = applyPrefix(matches, context);

                    if (important) {
                      matches = applyImportant(matches, context);
                    }

                    _iteratorNormalCompletion14 = true;
                    _didIteratorError14 = false;
                    _iteratorError14 = undefined;
                    _context5.prev = 240;

                    for (_iterator14 = variants[Symbol.iterator](); !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                      variant = _step14.value;
                      matches = applyVariant(variant, matches, context);
                    }

                    _context5.next = 248;
                    break;

                  case 244:
                    _context5.prev = 244;
                    _context5.t9 = _context5["catch"](240);
                    _didIteratorError14 = true;
                    _iteratorError14 = _context5.t9;

                  case 248:
                    _context5.prev = 248;
                    _context5.prev = 249;

                    if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                      _iterator14["return"]();
                    }

                  case 251:
                    _context5.prev = 251;

                    if (!_didIteratorError14) {
                      _context5.next = 254;
                      break;
                    }

                    throw _iteratorError14;

                  case 254:
                    return _context5.finish(251);

                  case 255:
                    return _context5.finish(248);

                  case 256:
                    _iteratorNormalCompletion15 = true;
                    _didIteratorError15 = false;
                    _iteratorError15 = undefined;
                    _context5.prev = 259;
                    _iterator15 = matches[Symbol.iterator]();

                  case 261:
                    if (_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done) {
                      _context5.next = 270;
                      break;
                    }

                    match1 = _step15.value;
                    match1[1].raws.tailwind = _objectSpread({}, match1[1].raws.tailwind, {
                      candidate: candidate
                    }); // Apply final format selector

                    if (match1[0].collectedFormats) {
                      (function () {
                        var _ref7;

                        var finalFormat = (_ref7 = (0, _formatVariantSelector)).formatVariantSelector.apply(_ref7, ['&'].concat(_toConsumableArray(match1[0].collectedFormats)));

                        var container = _postcss["default"].root({
                          nodes: [match1[1].clone()]
                        });

                        container.walkRules(function (rule) {
                          if (inKeyframes(rule)) return;
                          rule.selector = (0, _formatVariantSelector).finalizeSelector(finalFormat, {
                            selector: rule.selector,
                            candidate: candidate,
                            context: context
                          });
                        });
                        match1[1] = container.nodes[0];
                      })();
                    }

                    _context5.next = 267;
                    return match1;

                  case 267:
                    _iteratorNormalCompletion15 = true;
                    _context5.next = 261;
                    break;

                  case 270:
                    _context5.next = 276;
                    break;

                  case 272:
                    _context5.prev = 272;
                    _context5.t10 = _context5["catch"](259);
                    _didIteratorError15 = true;
                    _iteratorError15 = _context5.t10;

                  case 276:
                    _context5.prev = 276;
                    _context5.prev = 277;

                    if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                      _iterator15["return"]();
                    }

                  case 279:
                    _context5.prev = 279;

                    if (!_didIteratorError15) {
                      _context5.next = 282;
                      break;
                    }

                    throw _iteratorError15;

                  case 282:
                    return _context5.finish(279);

                  case 283:
                    return _context5.finish(276);

                  case 284:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _loop2, null, [[8, 88, 92, 100], [17, 46, 50, 58], [25, 29, 33, 41], [34,, 36, 40], [51,, 53, 57], [66, 70, 74, 82], [75,, 77, 81], [93,, 95, 99], [105, 167, 171, 179], [112, 150, 154, 162], [120, 132, 136, 144], [137,, 139, 143], [155,, 157, 161], [172,, 174, 178], [183, 219, 223, 231], [190, 202, 206, 214], [207,, 209, 213], [224,, 226, 230], [240, 244, 248, 256], [249,, 251, 255], [259, 272, 276, 284], [277,, 279, 283]]);
          });
          _iterator7 = resolveMatchedPlugins(classCandidate, context)[Symbol.iterator]();

        case 10:
          if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
            _context6.next = 18;
            break;
          }

          return _context6.delegateYield(_loop2(), "t0", 12);

        case 12:
          _ret2 = _context6.t0;

          if (!(_ret2 === "continue")) {
            _context6.next = 15;
            break;
          }

          return _context6.abrupt("continue", 15);

        case 15:
          _iteratorNormalCompletion7 = true;
          _context6.next = 10;
          break;

        case 18:
          _context6.next = 24;
          break;

        case 20:
          _context6.prev = 20;
          _context6.t1 = _context6["catch"](7);
          _didIteratorError7 = true;
          _iteratorError7 = _context6.t1;

        case 24:
          _context6.prev = 24;
          _context6.prev = 25;

          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }

        case 27:
          _context6.prev = 27;

          if (!_didIteratorError7) {
            _context6.next = 30;
            break;
          }

          throw _iteratorError7;

        case 30:
          return _context6.finish(27);

        case 31:
          return _context6.finish(24);

        case 32:
        case "end":
          return _context6.stop();
      }
    }
  }, _marked4, null, [[7, 20, 24, 32], [25,, 27, 31]]);
}

function inKeyframes(rule) {
  return rule.parent && rule.parent.type === 'atrule' && rule.parent.name === 'keyframes';
}

function generateRules(candidates, context) {
  var allRules = [];
  var _iteratorNormalCompletion19 = true;
  var _didIteratorError19 = false;
  var _iteratorError19 = undefined;

  try {
    for (var _iterator19 = candidates[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
      var candidate = _step19.value;

      if (context.notClassCache.has(candidate)) {
        continue;
      }

      if (context.classCache.has(candidate)) {
        allRules.push(context.classCache.get(candidate));
        continue;
      }

      var matches = Array.from(resolveMatches(candidate, context));

      if (matches.length === 0) {
        context.notClassCache.add(candidate);
        continue;
      }

      context.classCache.set(candidate, matches);
      allRules.push(matches);
    } // Strategy based on `tailwindConfig.important`

  } catch (err) {
    _didIteratorError19 = true;
    _iteratorError19 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
        _iterator19["return"]();
      }
    } finally {
      if (_didIteratorError19) {
        throw _iteratorError19;
      }
    }
  }

  var strategy = function (important) {
    if (important === true) {
      return function (rule) {
        rule.walkDecls(function (d) {
          if (d.parent.type === 'rule' && !inKeyframes(d.parent)) {
            d.important = true;
          }
        });
      };
    }

    if (typeof important === 'string') {
      return function (rule) {
        rule.selectors = rule.selectors.map(function (selector) {
          return "".concat(important, " ").concat(selector);
        });
      };
    }
  }(context.tailwindConfig.important);

  return allRules.flat(1).map(function (_ref8) {
    var _ref9 = _slicedToArray(_ref8, 2),
        _ref9$ = _ref9[0],
        sort = _ref9$.sort,
        layer = _ref9$.layer,
        options = _ref9$.options,
        rule = _ref9[1];

    if (options.respectImportant) {
      if (strategy) {
        var container = _postcss["default"].root({
          nodes: [rule.clone()]
        });

        container.walkRules(function (r) {
          if (inKeyframes(r)) {
            return;
          }

          strategy(r);
        });
        rule = container.nodes[0];
      }
    }

    return [sort | context.layerOrder[layer], rule];
  });
}

function isArbitraryValue(input) {
  return input.startsWith('[') && input.endsWith(']');
}

exports.resolveMatches = resolveMatches;
exports.generateRules = generateRules;