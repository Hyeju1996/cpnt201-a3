"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getModuleDependencies;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _resolve = _interopRequireDefault(require("resolve"));

var _detective = _interopRequireDefault(require("detective"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function createModule(file) {
  var source = _fs["default"].readFileSync(file, 'utf-8');

  var requires = (0, _detective)["default"](source);
  return {
    file: file,
    requires: requires
  };
}

function getModuleDependencies(entryFile) {
  var rootModule = createModule(entryFile);
  var modules = [rootModule]; // Iterate over the modules, even when new
  // ones are being added

  var _loop = function _loop() {
    var mdl = _modules[_i];
    mdl.requires.filter(function (dep) {
      // Only track local modules, not node_modules
      return dep.startsWith('./') || dep.startsWith('../');
    }).forEach(function (dep) {
      try {
        var basedir = _path["default"].dirname(mdl.file);

        var depPath = _resolve["default"].sync(dep, {
          basedir: basedir
        });

        var depModule = createModule(depPath);
        modules.push(depModule);
      } catch (_err) {// eslint-disable-next-line no-empty
      }
    });
  };

  for (var _i = 0, _modules = modules; _i < _modules.length; _i++) {
    _loop();
  }

  return modules;
}