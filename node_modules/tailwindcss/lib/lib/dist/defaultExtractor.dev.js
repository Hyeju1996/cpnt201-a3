"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultExtractor = defaultExtractor;
var PATTERNS = [/(?:\['([^'\s]+[^<>"'`\s:\\])')/.source, /(?:\["([^"\s]+[^<>"'`\s:\\])")/.source, /(?:\[`([^`\s]+[^<>"'`\s:\\])`)/.source, /([^<>"'`\s]*\[\w*'[^"`\s]*'?\])/.source, /([^<>"'`\s]*\[\w*"[^'`\s]*"?\])/.source, /([^<>"'`\s]*\[\w*\('[^"'`\s]*'\)\])/.source, /([^<>"'`\s]*\[\w*\("[^"'`\s]*"\)\])/.source, /([^<>"'`\s]*\[\w*\('[^"`\s]*'\)\])/.source, /([^<>"'`\s]*\[\w*\("[^'`\s]*"\)\])/.source, /([^<>"'`\s]*\[[^<>"'`\s]*\('[^"`\s]*'\)+\])/.source, /([^<>"'`\s]*\[[^<>"'`\s]*\("[^'`\s]*"\)+\])/.source, /([^<>"'`\s]*\['[^"'`\s]*'\])/.source, /([^<>"'`\s]*\["[^"'`\s]*"\])/.source, /([^<>"'`\s]*\[[^<>"'`\s]*:[^\]\s]*\])/.source, /([^<>"'`\s]*\[[^<>"'`\s]*:'[^"'`\s]*'\])/.source, /([^<>"'`\s]*\[[^<>"'`\s]*:"[^"'`\s]*"\])/.source, /([^<>"'`\s]*\[[^"'`\s]+\][^<>"'`\s]*)/.source, /([^"'`\s]*[^<>"'`\s:\\])/.source, /([^<>"'`\s]*[^"'`\s:\\])/.source].join('|');
var BROAD_MATCH_GLOBAL_REGEXP = new RegExp(PATTERNS, 'g');
var INNER_MATCH_GLOBAL_REGEXP = /[^<>"'`\s.(){}[\]#=%$]*[^<>"'`\s.(){}[\]#=%:$]/g;

function defaultExtractor(content) {
  var broadMatches = content.matchAll(BROAD_MATCH_GLOBAL_REGEXP);
  var innerMatches = content.match(INNER_MATCH_GLOBAL_REGEXP) || [];
  var results = [].concat(_toConsumableArray(broadMatches), _toConsumableArray(innerMatches)).flat().filter(function (v) {
    return v !== undefined;
  });
  return results;
} // Regular utilities
// {{modifier}:}*{namespace}{-{suffix}}*{/{opacityModifier}}?
// Arbitrary values
// {{modifier}:}*{namespace}-[{arbitraryValue}]{/{opacityModifier}}?
// arbitraryValue: no whitespace, balanced quotes unless within quotes, balanced brackets unless within quotes
// Arbitrary properties
// {{modifier}:}*[{validCssPropertyName}:{arbitraryValue}]