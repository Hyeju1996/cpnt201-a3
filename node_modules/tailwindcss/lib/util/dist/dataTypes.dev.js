"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalize = normalize;
exports.url = url;
exports.number = number;
exports.percentage = percentage;
exports.length = length;
exports.lineWidth = lineWidth;
exports.shadow = shadow;
exports.color = color;
exports.image = image;
exports.gradient = gradient;
exports.position = position;
exports.familyName = familyName;
exports.genericName = genericName;
exports.absoluteSize = absoluteSize;
exports.relativeSize = relativeSize;

var _color = require("./color");

var _parseBoxShadowValue = require("./parseBoxShadowValue");

var cssFunctions = ['min', 'max', 'clamp', 'calc']; // Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types

var COMMA = /,(?![^(]*\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.
;
var UNDERSCORE = /_(?![^(]*\))/g // Underscore separator that is not located between brackets. E.g.: `rgba(255,_255,_255)_black` these don't count.
;

function normalize(value) {
  var isRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  // Keep raw strings if it starts with `url(`
  if (value.includes('url(')) {
    return value.split(/(url\(.*?\))/g).filter(Boolean).map(function (part) {
      if (/^url\(.*?\)$/.test(part)) {
        return part;
      }

      return normalize(part, false);
    }).join('');
  } // Convert `_` to ` `, except for escaped underscores `\_`


  value = value.replace(/([^\\])_+/g, function (fullMatch, characterBefore) {
    return characterBefore + ' '.repeat(fullMatch.length - 1);
  }).replace(/^_/g, ' ').replace(/\\_/g, '_'); // Remove leftover whitespace

  if (isRoot) {
    value = value.trim();
  } // Add spaces around operators inside calc() that do not follow an operator
  // or '('.


  return value.replace(/(-?\d*\.?\d(?!\b-.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, '$1 $2 ');
}

function url(value) {
  return value.startsWith('url(');
}

function number(value) {
  return !isNaN(Number(value)) || cssFunctions.some(function (fn) {
    return new RegExp("^".concat(fn, "\\(.+?")).test(value);
  });
}

function percentage(value) {
  return /%$/g.test(value) || cssFunctions.some(function (fn) {
    return new RegExp("^".concat(fn, "\\(.+?%")).test(value);
  });
}

var lengthUnits = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px', 'em', 'ex', 'ch', 'rem', 'lh', 'vw', 'vh', 'vmin', 'vmax'];
var lengthUnitsPattern = "(?:".concat(lengthUnits.join('|'), ")");

function length(value) {
  return value.split(UNDERSCORE).every(function (part) {
    return part === '0' || new RegExp("".concat(lengthUnitsPattern, "$")).test(part) || cssFunctions.some(function (fn) {
      return new RegExp("^".concat(fn, "\\(.+?").concat(lengthUnitsPattern)).test(part);
    });
  });
}

var lineWidths = new Set(['thin', 'medium', 'thick']);

function lineWidth(value) {
  return lineWidths.has(value);
}

function shadow(value) {
  var parsedShadows = (0, _parseBoxShadowValue).parseBoxShadowValue(normalize(value));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parsedShadows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var parsedShadow = _step.value;

      if (!parsedShadow.valid) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
}

function color(value) {
  var colors = 0;
  var result = value.split(UNDERSCORE).every(function (part) {
    part = normalize(part);
    if (part.startsWith('var(')) return true;
    if ((0, _color).parseColor(part) !== null) return colors++, true;
    return false;
  });
  if (!result) return false;
  return colors > 0;
}

function image(value) {
  var images = 0;
  var result = value.split(COMMA).every(function (part) {
    part = normalize(part);
    if (part.startsWith('var(')) return true;

    if (url(part) || gradient(part) || ['element(', 'image(', 'cross-fade(', 'image-set('].some(function (fn) {
      return part.startsWith(fn);
    })) {
      images++;
      return true;
    }

    return false;
  });
  if (!result) return false;
  return images > 0;
}

var gradientTypes = new Set(['linear-gradient', 'radial-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient', 'conic-gradient']);

function gradient(value) {
  value = normalize(value);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = gradientTypes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var type = _step2.value;

      if (value.startsWith("".concat(type, "("))) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return false;
}

var validPositions = new Set(['center', 'top', 'right', 'bottom', 'left']);

function position(value) {
  var positions = 0;
  var result = value.split(UNDERSCORE).every(function (part) {
    part = normalize(part);
    if (part.startsWith('var(')) return true;

    if (validPositions.has(part) || length(part) || percentage(part)) {
      positions++;
      return true;
    }

    return false;
  });
  if (!result) return false;
  return positions > 0;
}

function familyName(value) {
  var fonts = 0;
  var result = value.split(COMMA).every(function (part) {
    part = normalize(part);
    if (part.startsWith('var(')) return true; // If it contains spaces, then it should be quoted

    if (part.includes(' ')) {
      if (!/(['"])([^"']+)\1/g.test(part)) {
        return false;
      }
    } // If it starts with a number, it's invalid


    if (/^\d/g.test(part)) {
      return false;
    }

    fonts++;
    return true;
  });
  if (!result) return false;
  return fonts > 0;
}

var genericNames = new Set(['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui', 'ui-serif', 'ui-sans-serif', 'ui-monospace', 'ui-rounded', 'math', 'emoji', 'fangsong']);

function genericName(value) {
  return genericNames.has(value);
}

var absoluteSizes = new Set(['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'x-large', 'xxx-large']);

function absoluteSize(value) {
  return absoluteSizes.has(value);
}

var relativeSizes = new Set(['larger', 'smaller']);

function relativeSize(value) {
  return relativeSizes.has(value);
}