"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeScreens = normalizeScreens;

function normalizeScreens(screens) {
  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (Array.isArray(screens)) {
    return screens.map(function (screen) {
      if (root && Array.isArray(screen)) {
        throw new Error('The tuple syntax is not supported for `screens`.');
      }

      if (typeof screen === 'string') {
        return {
          name: screen.toString(),
          values: [{
            min: screen,
            max: undefined
          }]
        };
      }

      var _screen = _slicedToArray(screen, 2),
          name = _screen[0],
          options = _screen[1];

      name = name.toString();

      if (typeof options === 'string') {
        return {
          name: name,
          values: [{
            min: options,
            max: undefined
          }]
        };
      }

      if (Array.isArray(options)) {
        return {
          name: name,
          values: options.map(function (option) {
            return resolveValue(option);
          })
        };
      }

      return {
        name: name,
        values: [resolveValue(options)]
      };
    });
  }

  return normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);
}

function resolveValue() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _minWidth = _ref['min-width'],
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? _minWidth : _ref$min,
      max = _ref.max,
      raw = _ref.raw;

  return {
    min: min,
    max: max,
    raw: raw
  };
}