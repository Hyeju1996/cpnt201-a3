"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseColor = parseColor;
exports.formatColor = formatColor;

var _colorName = _interopRequireDefault(require("color-name"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var HEX = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
var SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
var VALUE = "(?:\\d+|\\d*\\.\\d+)%?";
var SEP = "(?:\\s*,\\s*|\\s+)";
var ALPHA_SEP = "\\s*[,/]\\s*";
var RGB = new RegExp("^rgba?\\(\\s*(".concat(VALUE, ")").concat(SEP, "(").concat(VALUE, ")").concat(SEP, "(").concat(VALUE, ")(?:").concat(ALPHA_SEP, "(").concat(VALUE, "))?\\s*\\)$"));
var HSL = new RegExp("^hsla?\\(\\s*((?:".concat(VALUE, ")(?:deg|rad|grad|turn)?)").concat(SEP, "(").concat(VALUE, ")").concat(SEP, "(").concat(VALUE, ")(?:").concat(ALPHA_SEP, "(").concat(VALUE, "))?\\s*\\)$"));

function parseColor(value) {
  if (typeof value !== 'string') {
    return null;
  }

  value = value.trim();

  if (value === 'transparent') {
    return {
      mode: 'rgb',
      color: ['0', '0', '0'],
      alpha: '0'
    };
  }

  if (value in _colorName["default"]) {
    return {
      mode: 'rgb',
      color: _colorName["default"][value].map(function (v) {
        return v.toString();
      })
    };
  }

  var hex = value.replace(SHORT_HEX, function (_, r, g, b, a) {
    return ['#', r, r, g, g, b, b, a ? a + a : ''].join('');
  }).match(HEX);

  if (hex !== null) {
    return {
      mode: 'rgb',
      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map(function (v) {
        return v.toString();
      }),
      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined
    };
  }

  var rgbMatch = value.match(RGB);

  if (rgbMatch !== null) {
    var ref, ref1;
    return {
      mode: 'rgb',
      color: [rgbMatch[1], rgbMatch[2], rgbMatch[3]].map(function (v) {
        return v.toString();
      }),
      alpha: (ref = rgbMatch[4]) === null || ref === void 0 ? void 0 : (ref1 = ref.toString) === null || ref1 === void 0 ? void 0 : ref1.call(ref)
    };
  }

  var hslMatch = value.match(HSL);

  if (hslMatch !== null) {
    var ref2, ref3;
    return {
      mode: 'hsl',
      color: [hslMatch[1], hslMatch[2], hslMatch[3]].map(function (v) {
        return v.toString();
      }),
      alpha: (ref2 = hslMatch[4]) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.toString) === null || ref3 === void 0 ? void 0 : ref3.call(ref2)
    };
  }

  return null;
}

function formatColor(_ref) {
  var mode = _ref.mode,
      color = _ref.color,
      alpha = _ref.alpha;
  var hasAlpha = alpha !== undefined;
  return "".concat(mode, "(").concat(color.join(' ')).concat(hasAlpha ? " / ".concat(alpha) : '', ")");
}