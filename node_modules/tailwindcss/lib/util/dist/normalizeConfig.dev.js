"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeConfig = normalizeConfig;

var _log = _interopRequireWildcard(require("./log"));

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
}

function normalizeConfig(config) {
  // Quick structure validation

  /**
  * type FilePath = string
  * type RawFile = { raw: string, extension?: string }
  * type ExtractorFn = (content: string) => Array<string>
  * type TransformerFn = (content: string) => string
  *
  * type Content =
  *   | Array<FilePath | RawFile>
  *   | {
  *       files: Array<FilePath | RawFile>,
  *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }
  *       transform?: TransformerFn | { [extension: string]: TransformerFn }
  *   }
  */
  var valid = function () {
    // `config.purge` should not exist anymore
    if (config.purge) {
      return false;
    } // `config.content` should exist


    if (!config.content) {
      return false;
    } // `config.content` should be an object or an array


    if (!Array.isArray(config.content) && !(_typeof(config.content) === 'object' && config.content !== null)) {
      return false;
    } // When `config.content` is an array, it should consist of FilePaths or RawFiles


    if (Array.isArray(config.content)) {
      return config.content.every(function (path) {
        // `path` can be a string
        if (typeof path === 'string') return true; // `path` can be an object { raw: string, extension?: string }
        // `raw` must be a string

        if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== 'string') return false; // `extension` (if provided) should also be a string

        if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== 'string') {
          return false;
        }

        return true;
      });
    } // When `config.content` is an object


    if (_typeof(config.content) === 'object' && config.content !== null) {
      // Only `files`, `extract` and `transform` can exist in `config.content`
      if (Object.keys(config.content).some(function (key) {
        return !['files', 'extract', 'transform'].includes(key);
      })) {
        return false;
      } // `config.content.files` should exist of FilePaths or RawFiles


      if (Array.isArray(config.content.files)) {
        if (!config.content.files.every(function (path) {
          // `path` can be a string
          if (typeof path === 'string') return true; // `path` can be an object { raw: string, extension?: string }
          // `raw` must be a string

          if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== 'string') return false; // `extension` (if provided) should also be a string

          if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== 'string') {
            return false;
          }

          return true;
        })) {
          return false;
        } // `config.content.extract` is optional, and can be a Function or a Record<String, Function>


        if (_typeof(config.content.extract) === 'object') {
          for (var _i = 0, _Object$values = Object.values(config.content.extract); _i < _Object$values.length; _i++) {
            var value = _Object$values[_i];

            if (typeof value !== 'function') {
              return false;
            }
          }
        } else if (!(config.content.extract === undefined || typeof config.content.extract === 'function')) {
          return false;
        } // `config.content.transform` is optional, and can be a Function or a Record<String, Function>


        if (_typeof(config.content.transform) === 'object') {
          for (var _i2 = 0, _Object$values2 = Object.values(config.content.transform); _i2 < _Object$values2.length; _i2++) {
            var _value = _Object$values2[_i2];

            if (typeof _value !== 'function') {
              return false;
            }
          }
        } else if (!(config.content.transform === undefined || typeof config.content.transform === 'function')) {
          return false;
        }
      }

      return true;
    }

    return false;
  }();

  if (!valid) {
    _log["default"].warn('purge-deprecation', ['The `purge`/`content` options have changed in Tailwind CSS v3.0.', 'Update your configuration file to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#configure-content-sources']);
  } // Normalize the `safelist`


  config.safelist = function () {
    var ref;
    var content = config.content,
        purge = config.purge,
        safelist = config.safelist;
    if (Array.isArray(safelist)) return safelist;
    if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;
    if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;
    if (Array.isArray(purge === null || purge === void 0 ? void 0 : (ref = purge.options) === null || ref === void 0 ? void 0 : ref.safelist)) return purge.options.safelist;
    return [];
  }(); // Normalize prefix option


  if (typeof config.prefix === 'function') {
    _log["default"].warn('prefix-function', ['As of Tailwind CSS v3.0, `prefix` cannot be a function.', 'Update `prefix` in your configuration to be a string to eliminate this warning.', 'https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function']);

    config.prefix = '';
  } else {
    var _prefix;

    config.prefix = (_prefix = config.prefix) !== null && _prefix !== void 0 ? _prefix : '';
  } // Normalize the `content`


  config.content = {
    files: function () {
      var content = config.content,
          purge = config.purge;
      if (Array.isArray(purge)) return purge;
      if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;
      if (Array.isArray(content)) return content;
      if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;
      if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;
      return [];
    }(),
    extract: function () {
      var extract = function () {
        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
        if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.extract) return config.purge.extract;
        if ((ref1 = config.content) === null || ref1 === void 0 ? void 0 : ref1.extract) return config.content.extract;
        if ((ref2 = config.purge) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.extract) === null || ref3 === void 0 ? void 0 : ref3.DEFAULT) return config.purge.extract.DEFAULT;
        if ((ref4 = config.content) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.extract) === null || ref5 === void 0 ? void 0 : ref5.DEFAULT) return config.content.extract.DEFAULT;
        if ((ref6 = config.purge) === null || ref6 === void 0 ? void 0 : (ref7 = ref6.options) === null || ref7 === void 0 ? void 0 : ref7.extractors) return config.purge.options.extractors;
        if ((ref8 = config.content) === null || ref8 === void 0 ? void 0 : (ref9 = ref8.options) === null || ref9 === void 0 ? void 0 : ref9.extractors) return config.content.options.extractors;
        return {};
      }();

      var extractors = {};

      var defaultExtractor = function () {
        var ref, ref10, ref11, ref12;

        if ((ref = config.purge) === null || ref === void 0 ? void 0 : (ref10 = ref.options) === null || ref10 === void 0 ? void 0 : ref10.defaultExtractor) {
          return config.purge.options.defaultExtractor;
        }

        if ((ref11 = config.content) === null || ref11 === void 0 ? void 0 : (ref12 = ref11.options) === null || ref12 === void 0 ? void 0 : ref12.defaultExtractor) {
          return config.content.options.defaultExtractor;
        }

        return undefined;
      }();

      if (defaultExtractor !== undefined) {
        extractors.DEFAULT = defaultExtractor;
      } // Functions


      if (typeof extract === 'function') {
        extractors.DEFAULT = extract;
      } else if (Array.isArray(extract)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (extract !== null && extract !== void 0 ? extract : [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _step.value,
                extensions = _step$value.extensions,
                extractor = _step$value.extractor;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = extensions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var extension = _step2.value;
                extractors[extension] = extractor;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else if (_typeof(extract) === 'object' && extract !== null) {
        Object.assign(extractors, extract);
      }

      return extractors;
    }(),
    transform: function () {
      var transform = function () {
        var ref, ref13, ref14, ref15, ref16, ref17;
        if ((ref = config.purge) === null || ref === void 0 ? void 0 : ref.transform) return config.purge.transform;
        if ((ref13 = config.content) === null || ref13 === void 0 ? void 0 : ref13.transform) return config.content.transform;
        if ((ref14 = config.purge) === null || ref14 === void 0 ? void 0 : (ref15 = ref14.transform) === null || ref15 === void 0 ? void 0 : ref15.DEFAULT) return config.purge.transform.DEFAULT;
        if ((ref16 = config.content) === null || ref16 === void 0 ? void 0 : (ref17 = ref16.transform) === null || ref17 === void 0 ? void 0 : ref17.DEFAULT) return config.content.transform.DEFAULT;
        return {};
      }();

      var transformers = {};

      if (typeof transform === 'function') {
        transformers.DEFAULT = transform;
      }

      if (_typeof(transform) === 'object' && transform !== null) {
        Object.assign(transformers, transform);
      }

      return transformers;
    }()
  }; // Validate globs to prevent bogus globs.
  // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = config.content.files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var file = _step3.value;

      if (typeof file === 'string' && /{([^,]*?)}/g.test(file)) {
        _log["default"].warn('invalid-glob-braces', ["The glob pattern ".concat((0, _log).dim(file), " in your Tailwind CSS configuration is invalid."), "Update it to ".concat((0, _log).dim(file.replace(/{([^,]*?)}/g, '$1')), " to silence this warning.")]);

        break;
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  if (config.content.files.length === 0) {
    _log["default"].warn('content-problems', ['The `content` option in your Tailwind CSS configuration is missing or empty.', 'Configure your content sources or your generated CSS will be missing styles.', 'https://tailwindcss.com/docs/content-configuration']);
  }

  return config;
}