"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _postcss = _interopRequireDefault(require("postcss"));

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function build(_ref) {
  var from = _ref.from,
      to = _ref.to,
      config = _ref.config;
  return new Promise(function (resolve, reject) {
    console.log("Processing ./".concat(from, "..."));

    _fs["default"].readFile("./".concat(from), function (err, css) {
      if (err) throw err;
      return (0, _postcss["default"])([(0, _["default"])(config)]).process(css, {
        from: undefined
      }).then(function (result) {
        _fs["default"].writeFileSync("./".concat(to), result.css);

        return result;
      }).then(resolve)["catch"](function (error) {
        console.log(error);
        reject();
      });
    });
  });
}

console.info('\nRebuilding fixtures...\n');
Promise.all([build({
  from: 'tests/fixtures/tailwind-input.css',
  to: 'tests/fixtures/tailwind-output.css',
  config: {}
}), build({
  from: 'tests/fixtures/tailwind-input.css',
  to: 'tests/fixtures/tailwind-output-important.css',
  config: {
    important: true
  }
}), build({
  from: 'tests/fixtures/tailwind-input.css',
  to: 'tests/fixtures/tailwind-output-no-color-opacity.css',
  config: {
    corePlugins: {
      textOpacity: false,
      backgroundOpacity: false,
      borderOpacity: false,
      placeholderOpacity: false,
      divideOpacity: false
    }
  }
}), build({
  from: 'tests/fixtures/tailwind-input.css',
  to: 'tests/fixtures/tailwind-output-flagged.css',
  config: {
    future: 'all',
    experimental: 'all'
  }
})]).then(function () {
  console.log('\nFinished rebuilding fixtures.');
  console.log('\nPlease triple check that the fixture output matches what you expect before committing this change.');
});