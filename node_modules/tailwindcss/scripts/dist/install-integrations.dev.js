"use strict";

var fs = require('fs/promises');

var _require = require('child_process'),
    spawn = _require.spawn;

var path = require('path');

var root = process.cwd();

function npmInstall(cwd) {
  return new Promise(function (resolve) {
    var childProcess = spawn('npm', ['install'], {
      cwd: cwd
    });
    childProcess.on('exit', resolve);
  });
}

function install() {
  var base, ignoreFolders, integrations;
  return regeneratorRuntime.async(function install$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          base = path.resolve(root, 'integrations');
          ignoreFolders = ['node_modules'];
          _context.next = 4;
          return regeneratorRuntime.awrap(fs.readdir(base, {
            withFileTypes: true
          }));

        case 4:
          _context.t0 = function (integration) {
            return integration.isDirectory();
          };

          _context.t1 = function (integration) {
            return !ignoreFolders.includes(integration.name);
          };

          _context.t2 = function (folder) {
            return path.resolve(base, folder.name);
          };

          _context.t3 = [base];

          _context.t4 = function (integration) {
            return npmInstall(integration);
          };

          integrations = _context.sent.filter(_context.t0).filter(_context.t1).map(_context.t2).concat(_context.t3).map(_context.t4);
          _context.next = 12;
          return regeneratorRuntime.awrap(Promise.all(integrations));

        case 12:
          console.log('Done!');

        case 13:
        case "end":
          return _context.stop();
      }
    }
  });
}

install();