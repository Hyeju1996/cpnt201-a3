"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var browserslist = require('browserslist');

var agents = require('caniuse-lite').agents;

var utils = require('./utils');

var Browsers =
/*#__PURE__*/
function () {
  _createClass(Browsers, null, [{
    key: "prefixes",

    /**
     * Return all prefixes for default browser data
     */
    value: function prefixes() {
      if (this.prefixesCache) {
        return this.prefixesCache;
      }

      this.prefixesCache = [];

      for (var name in agents) {
        this.prefixesCache.push("-".concat(agents[name].prefix, "-"));
      }

      this.prefixesCache = utils.uniq(this.prefixesCache).sort(function (a, b) {
        return b.length - a.length;
      });
      return this.prefixesCache;
    }
    /**
     * Check is value contain any possible prefix
     */

  }, {
    key: "withPrefix",
    value: function withPrefix(value) {
      if (!this.prefixesRegexp) {
        this.prefixesRegexp = new RegExp(this.prefixes().join('|'));
      }

      return this.prefixesRegexp.test(value);
    }
  }]);

  function Browsers(data, requirements, options, browserslistOpts) {
    _classCallCheck(this, Browsers);

    this.data = data;
    this.options = options || {};
    this.browserslistOpts = browserslistOpts || {};
    this.selected = this.parse(requirements);
  }
  /**
   * Return browsers selected by requirements
   */


  _createClass(Browsers, [{
    key: "parse",
    value: function parse(requirements) {
      var opts = {};

      for (var i in this.browserslistOpts) {
        opts[i] = this.browserslistOpts[i];
      }

      opts.path = this.options.from;
      return browserslist(requirements, opts);
    }
    /**
     * Return prefix for selected browser
     */

  }, {
    key: "prefix",
    value: function prefix(browser) {
      var _browser$split = browser.split(' '),
          _browser$split2 = _slicedToArray(_browser$split, 2),
          name = _browser$split2[0],
          version = _browser$split2[1];

      var data = this.data[name];
      var prefix = data.prefix_exceptions && data.prefix_exceptions[version];

      if (!prefix) {
        prefix = data.prefix;
      }

      return "-".concat(prefix, "-");
    }
    /**
     * Is browser is selected by requirements
     */

  }, {
    key: "isSelected",
    value: function isSelected(browser) {
      return this.selected.includes(browser);
    }
  }]);

  return Browsers;
}();

module.exports = Browsers;