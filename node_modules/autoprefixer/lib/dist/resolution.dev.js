"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var FractionJs = require('fraction.js');

var Prefixer = require('./prefixer');

var utils = require('./utils');

var REGEXP = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpcm|dpi|x)/gi;
var SPLIT = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpcm|dpi|x)/i;

var Resolution =
/*#__PURE__*/
function (_Prefixer) {
  _inherits(Resolution, _Prefixer);

  function Resolution() {
    _classCallCheck(this, Resolution);

    return _possibleConstructorReturn(this, _getPrototypeOf(Resolution).apply(this, arguments));
  }

  _createClass(Resolution, [{
    key: "prefixName",

    /**
     * Return prefixed query name
     */
    value: function prefixName(prefix, name) {
      if (prefix === '-moz-') {
        return name + '--moz-device-pixel-ratio';
      } else {
        return prefix + name + '-device-pixel-ratio';
      }
    }
    /**
     * Return prefixed query
     */

  }, {
    key: "prefixQuery",
    value: function prefixQuery(prefix, name, colon, value, units) {
      value = new FractionJs(value); // 1dpcm = 2.54dpi
      // 1dppx = 96dpi

      if (units === 'dpi') {
        value = value.div(96);
      } else if (units === 'dpcm') {
        value = value.mul(2.54).div(96);
      }

      value = value.simplify();

      if (prefix === '-o-') {
        value = value.n + '/' + value.d;
      }

      return this.prefixName(prefix, name) + colon + value;
    }
    /**
     * Remove prefixed queries
     */

  }, {
    key: "clean",
    value: function clean(rule) {
      var _this = this;

      if (!this.bad) {
        this.bad = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.prefixes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var prefix = _step.value;
            this.bad.push(this.prefixName(prefix, 'min'));
            this.bad.push(this.prefixName(prefix, 'max'));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      rule.params = utils.editList(rule.params, function (queries) {
        return queries.filter(function (query) {
          return _this.bad.every(function (i) {
            return !query.includes(i);
          });
        });
      });
    }
    /**
     * Add prefixed queries
     */

  }, {
    key: "process",
    value: function process(rule) {
      var _this2 = this;

      var parent = this.parentPrefix(rule);
      var prefixes = parent ? [parent] : this.prefixes;
      rule.params = utils.editList(rule.params, function (origin, prefixed) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = origin[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var query = _step2.value;

            if (!query.includes('min-resolution') && !query.includes('max-resolution')) {
              prefixed.push(query);
              continue;
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              var _loop = function _loop() {
                var prefix = _step3.value;
                var processed = query.replace(REGEXP, function (str) {
                  var parts = str.match(SPLIT);
                  return _this2.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);
                });
                prefixed.push(processed);
              };

              for (var _iterator3 = prefixes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                _loop();
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            prefixed.push(query);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return utils.uniq(prefixed);
      });
    }
  }]);

  return Resolution;
}(Prefixer);

module.exports = Resolution;