"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var browserslist = require('browserslist');

var _require = require('caniuse-lite'),
    agents = _require.agents;

var pico = require('picocolors');

var Browsers = require('./browsers');

var Prefixes = require('./prefixes');

var dataPrefixes = require('../data/prefixes');

var getInfo = require('./info');

var autoprefixerData = {
  browsers: agents,
  prefixes: dataPrefixes
};
var WARNING = '\n' + '  Replace Autoprefixer `browsers` option to Browserslist config.\n' + '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\n' + '\n' + '  Using `browsers` option can cause errors. Browserslist config can\n' + '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\n' + '\n' + '  If you really need to use option, rename it to `overrideBrowserslist`.\n' + '\n' + '  Learn more at:\n' + '  https://github.com/browserslist/browserslist#readme\n' + '  https://twitter.com/browserslist\n' + '\n';

function isPlainObject(obj) {
  return Object.prototype.toString.apply(obj) === '[object Object]';
}

var cache = new Map();

function timeCapsule(result, prefixes) {
  if (prefixes.browsers.selected.length === 0) {
    return;
  }

  if (prefixes.add.selectors.length > 0) {
    return;
  }

  if (Object.keys(prefixes.add).length > 2) {
    return;
  }
  /* c8 ignore next 11 */


  result.warn('Autoprefixer target browsers do not need any prefixes.' + 'You do not need Autoprefixer anymore.\n' + 'Check your Browserslist config to be sure that your targets ' + 'are set up correctly.\n' + '\n' + '  Learn more at:\n' + '  https://github.com/postcss/autoprefixer#readme\n' + '  https://github.com/browserslist/browserslist#readme\n' + '\n');
}

module.exports = plugin;

function plugin() {
  for (var _len = arguments.length, reqs = new Array(_len), _key = 0; _key < _len; _key++) {
    reqs[_key] = arguments[_key];
  }

  var options;

  if (reqs.length === 1 && isPlainObject(reqs[0])) {
    options = reqs[0];
    reqs = undefined;
  } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {
    reqs = undefined;
  } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {
    options = reqs[1];
    reqs = reqs[0];
  } else if (_typeof(reqs[reqs.length - 1]) === 'object') {
    options = reqs.pop();
  }

  if (!options) {
    options = {};
  }

  if (options.browser) {
    throw new Error('Change `browser` option to `overrideBrowserslist` in Autoprefixer');
  } else if (options.browserslist) {
    throw new Error('Change `browserslist` option to `overrideBrowserslist` in Autoprefixer');
  }

  if (options.overrideBrowserslist) {
    reqs = options.overrideBrowserslist;
  } else if (options.browsers) {
    if (typeof console !== 'undefined' && console.warn) {
      console.warn(pico.red(WARNING.replace(/`[^`]+`/g, function (i) {
        return pico.yellow(i.slice(1, -1));
      })));
    }

    reqs = options.browsers;
  }

  var brwlstOpts = {
    ignoreUnknownVersions: options.ignoreUnknownVersions,
    stats: options.stats,
    env: options.env
  };

  function loadPrefixes(opts) {
    var d = autoprefixerData;
    var browsers = new Browsers(d.browsers, reqs, opts, brwlstOpts);
    var key = browsers.selected.join(', ') + JSON.stringify(options);

    if (!cache.has(key)) {
      cache.set(key, new Prefixes(d.prefixes, browsers, options));
    }

    return cache.get(key);
  }

  return {
    postcssPlugin: 'autoprefixer',
    prepare: function prepare(result) {
      var prefixes = loadPrefixes({
        from: result.opts.from,
        env: options.env
      });
      return {
        OnceExit: function OnceExit(root) {
          timeCapsule(result, prefixes);

          if (options.remove !== false) {
            prefixes.processor.remove(root, result);
          }

          if (options.add !== false) {
            prefixes.processor.add(root, result);
          }
        }
      };
    },
    info: function info(opts) {
      opts = opts || {};
      opts.from = opts.from || process.cwd();
      return getInfo(loadPrefixes(opts));
    },
    options: options,
    browsers: reqs
  };
}

plugin.postcss = true;
/**
 * Autoprefixer data
 */

plugin.data = autoprefixerData;
/**
 * Autoprefixer default browsers
 */

plugin.defaults = browserslist.defaults;
/**
 * Inspect with default Autoprefixer
 */

plugin.info = function () {
  return plugin().info();
};