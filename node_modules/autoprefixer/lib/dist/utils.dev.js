"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _require = require('postcss'),
    list = _require.list;
/**
 * Throw special error, to tell beniary,
 * that this error is from Autoprefixer.
 */


module.exports.error = function (text) {
  var err = new Error(text);
  err.autoprefixer = true;
  throw err;
};
/**
 * Return array, that doesnâ€™t contain duplicates.
 */


module.exports.uniq = function (array) {
  return _toConsumableArray(new Set(array));
};
/**
 * Return "-webkit-" on "-webkit- old"
 */


module.exports.removeNote = function (string) {
  if (!string.includes(' ')) {
    return string;
  }

  return string.split(' ')[0];
};
/**
 * Escape RegExp symbols
 */


module.exports.escapeRegexp = function (string) {
  return string.replace(/[$()*+-.?[\\\]^{|}]/g, '\\$&');
};
/**
 * Return regexp to check, that CSS string contain word
 */


module.exports.regexp = function (word) {
  var escape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (escape) {
    word = this.escapeRegexp(word);
  }

  return new RegExp("(^|[\\s,(])(".concat(word, "($|[\\s(,]))"), 'gi');
};
/**
 * Change comma list
 */


module.exports.editList = function (value, callback) {
  var origin = list.comma(value);
  var changed = callback(origin, []);

  if (origin === changed) {
    return value;
  }

  var join = value.match(/,\s*/);
  join = join ? join[0] : ', ';
  return changed.join(join);
};
/**
 * Split the selector into parts.
 * It returns 3 level deep array because selectors can be comma
 * separated (1), space separated (2), and combined (3)
 * @param {String} selector selector string
 * @return {Array<Array<Array>>} 3 level deep array of split selector
 * @see utils.test.js for examples
 */


module.exports.splitSelector = function (selector) {
  return list.comma(selector).map(function (i) {
    return list.space(i).map(function (k) {
      return k.split(/(?=\.|#)/g);
    });
  });
};