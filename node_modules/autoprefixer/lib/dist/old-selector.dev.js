"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OldSelector =
/*#__PURE__*/
function () {
  function OldSelector(selector, prefix) {
    _classCallCheck(this, OldSelector);

    this.prefix = prefix;
    this.prefixed = selector.prefixed(this.prefix);
    this.regexp = selector.regexp(this.prefix);
    this.prefixeds = selector.possible().map(function (x) {
      return [selector.prefixed(x), selector.regexp(x)];
    });
    this.unprefixed = selector.name;
    this.nameRegexp = selector.regexp();
  }
  /**
   * Is rule a hack without unprefixed version bottom
   */


  _createClass(OldSelector, [{
    key: "isHack",
    value: function isHack(rule) {
      var index = rule.parent.index(rule) + 1;
      var rules = rule.parent.nodes;

      while (index < rules.length) {
        var before = rules[index].selector;

        if (!before) {
          return true;
        }

        if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {
          return false;
        }

        var some = false;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.prefixeds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2),
                string = _step$value[0],
                regexp = _step$value[1];

            if (before.includes(string) && before.match(regexp)) {
              some = true;
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (!some) {
          return true;
        }

        index += 1;
      }

      return true;
    }
    /**
     * Does rule contain an unnecessary prefixed selector
     */

  }, {
    key: "check",
    value: function check(rule) {
      if (!rule.selector.includes(this.prefixed)) {
        return false;
      }

      if (!rule.selector.match(this.regexp)) {
        return false;
      }

      if (this.isHack(rule)) {
        return false;
      }

      return true;
    }
  }]);

  return OldSelector;
}();

module.exports = OldSelector;