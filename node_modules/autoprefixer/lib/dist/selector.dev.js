"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('postcss'),
    list = _require.list;

var OldSelector = require('./old-selector');

var Prefixer = require('./prefixer');

var Browsers = require('./browsers');

var utils = require('./utils');

var Selector =
/*#__PURE__*/
function (_Prefixer) {
  _inherits(Selector, _Prefixer);

  function Selector(name, prefixes, all) {
    var _this;

    _classCallCheck(this, Selector);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Selector).call(this, name, prefixes, all));
    _this.regexpCache = new Map();
    return _this;
  }
  /**
   * Is rule selectors need to be prefixed
   */


  _createClass(Selector, [{
    key: "check",
    value: function check(rule) {
      if (rule.selector.includes(this.name)) {
        return !!rule.selector.match(this.regexp());
      }

      return false;
    }
    /**
     * Return prefixed version of selector
     */

  }, {
    key: "prefixed",
    value: function prefixed(prefix) {
      return this.name.replace(/^(\W*)/, "$1".concat(prefix));
    }
    /**
     * Lazy loadRegExp for name
     */

  }, {
    key: "regexp",
    value: function regexp(prefix) {
      if (!this.regexpCache.has(prefix)) {
        var name = prefix ? this.prefixed(prefix) : this.name;
        this.regexpCache.set(prefix, new RegExp("(^|[^:\"'=])".concat(utils.escapeRegexp(name)), 'gi'));
      }

      return this.regexpCache.get(prefix);
    }
    /**
     * All possible prefixes
     */

  }, {
    key: "possible",
    value: function possible() {
      return Browsers.prefixes();
    }
    /**
     * Return all possible selector prefixes
     */

  }, {
    key: "prefixeds",
    value: function prefixeds(rule) {
      var _this2 = this;

      if (rule._autoprefixerPrefixeds) {
        if (rule._autoprefixerPrefixeds[this.name]) {
          return rule._autoprefixerPrefixeds;
        }
      } else {
        rule._autoprefixerPrefixeds = {};
      }

      var prefixeds = {};

      if (rule.selector.includes(',')) {
        var ruleParts = list.comma(rule.selector);
        var toProcess = ruleParts.filter(function (el) {
          return el.includes(_this2.name);
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var prefix = _step.value;
            prefixeds[prefix] = toProcess.map(function (el) {
              return _this2.replace(el, prefix);
            }).join(', ');
          };

          for (var _iterator = this.possible()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.possible()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var prefix = _step2.value;
            prefixeds[prefix] = this.replace(rule.selector, prefix);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      rule._autoprefixerPrefixeds[this.name] = prefixeds;
      return rule._autoprefixerPrefixeds;
    }
    /**
     * Is rule already prefixed before
     */

  }, {
    key: "already",
    value: function already(rule, prefixeds, prefix) {
      var index = rule.parent.index(rule) - 1;

      while (index >= 0) {
        var before = rule.parent.nodes[index];

        if (before.type !== 'rule') {
          return false;
        }

        var some = false;

        for (var key in prefixeds[this.name]) {
          var prefixed = prefixeds[this.name][key];

          if (before.selector === prefixed) {
            if (prefix === key) {
              return true;
            } else {
              some = true;
              break;
            }
          }
        }

        if (!some) {
          return false;
        }

        index -= 1;
      }

      return false;
    }
    /**
     * Replace selectors by prefixed one
     */

  }, {
    key: "replace",
    value: function replace(selector, prefix) {
      return selector.replace(this.regexp(), "$1".concat(this.prefixed(prefix)));
    }
    /**
     * Clone and add prefixes for at-rule
     */

  }, {
    key: "add",
    value: function add(rule, prefix) {
      var prefixeds = this.prefixeds(rule);

      if (this.already(rule, prefixeds, prefix)) {
        return;
      }

      var cloned = this.clone(rule, {
        selector: prefixeds[this.name][prefix]
      });
      rule.parent.insertBefore(rule, cloned);
    }
    /**
     * Return function to fast find prefixed selector
     */

  }, {
    key: "old",
    value: function old(prefix) {
      return new OldSelector(this, prefix);
    }
  }]);

  return Selector;
}(Prefixer);

module.exports = Selector;