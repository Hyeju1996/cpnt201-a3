"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Prefixer = require('./prefixer');

var Browsers = require('./browsers');

var utils = require('./utils');

var Declaration =
/*#__PURE__*/
function (_Prefixer) {
  _inherits(Declaration, _Prefixer);

  function Declaration() {
    _classCallCheck(this, Declaration);

    return _possibleConstructorReturn(this, _getPrototypeOf(Declaration).apply(this, arguments));
  }

  _createClass(Declaration, [{
    key: "check",

    /**
     * Always true, because we already get prefixer by property name
     */
    value: function check()
    /* decl */
    {
      return true;
    }
    /**
     * Return prefixed version of property
     */

  }, {
    key: "prefixed",
    value: function prefixed(prop, prefix) {
      return prefix + prop;
    }
    /**
     * Return unprefixed version of property
     */

  }, {
    key: "normalize",
    value: function normalize(prop) {
      return prop;
    }
    /**
     * Check `value`, that it contain other prefixes, rather than `prefix`
     */

  }, {
    key: "otherPrefixes",
    value: function otherPrefixes(value, prefix) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Browsers.prefixes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var other = _step.value;

          if (other === prefix) {
            continue;
          }

          if (value.includes(other)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
    /**
     * Set prefix to declaration
     */

  }, {
    key: "set",
    value: function set(decl, prefix) {
      decl.prop = this.prefixed(decl.prop, prefix);
      return decl;
    }
    /**
     * Should we use visual cascade for prefixes
     */

  }, {
    key: "needCascade",
    value: function needCascade(decl) {
      if (!decl._autoprefixerCascade) {
        decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').includes('\n');
      }

      return decl._autoprefixerCascade;
    }
    /**
     * Return maximum length of possible prefixed property
     */

  }, {
    key: "maxPrefixed",
    value: function maxPrefixed(prefixes, decl) {
      if (decl._autoprefixerMax) {
        return decl._autoprefixerMax;
      }

      var max = 0;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = prefixes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prefix = _step2.value;
          prefix = utils.removeNote(prefix);

          if (prefix.length > max) {
            max = prefix.length;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      decl._autoprefixerMax = max;
      return decl._autoprefixerMax;
    }
    /**
     * Calculate indentation to create visual cascade
     */

  }, {
    key: "calcBefore",
    value: function calcBefore(prefixes, decl) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var max = this.maxPrefixed(prefixes, decl);
      var diff = max - utils.removeNote(prefix).length;
      var before = decl.raw('before');

      if (diff > 0) {
        before += Array(diff).fill(' ').join('');
      }

      return before;
    }
    /**
     * Remove visual cascade
     */

  }, {
    key: "restoreBefore",
    value: function restoreBefore(decl) {
      var lines = decl.raw('before').split('\n');
      var min = lines[lines.length - 1];
      this.all.group(decl).up(function (prefixed) {
        var array = prefixed.raw('before').split('\n');
        var last = array[array.length - 1];

        if (last.length < min.length) {
          min = last;
        }
      });
      lines[lines.length - 1] = min;
      decl.raws.before = lines.join('\n');
    }
    /**
     * Clone and insert new declaration
     */

  }, {
    key: "insert",
    value: function insert(decl, prefix, prefixes) {
      var cloned = this.set(this.clone(decl), prefix);
      if (!cloned) return undefined;
      var already = decl.parent.some(function (i) {
        return i.prop === cloned.prop && i.value === cloned.value;
      });

      if (already) {
        return undefined;
      }

      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }

      return decl.parent.insertBefore(decl, cloned);
    }
    /**
     * Did this declaration has this prefix above
     */

  }, {
    key: "isAlready",
    value: function isAlready(decl, prefixed) {
      var already = this.all.group(decl).up(function (i) {
        return i.prop === prefixed;
      });

      if (!already) {
        already = this.all.group(decl).down(function (i) {
          return i.prop === prefixed;
        });
      }

      return already;
    }
    /**
     * Clone and add prefixes for declaration
     */

  }, {
    key: "add",
    value: function add(decl, prefix, prefixes, result) {
      var prefixed = this.prefixed(decl.prop, prefix);

      if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {
        return undefined;
      }

      return this.insert(decl, prefix, prefixes, result);
    }
    /**
     * Add spaces for visual cascade
     */

  }, {
    key: "process",
    value: function process(decl, result) {
      if (!this.needCascade(decl)) {
        _get(_getPrototypeOf(Declaration.prototype), "process", this).call(this, decl, result);

        return;
      }

      var prefixes = _get(_getPrototypeOf(Declaration.prototype), "process", this).call(this, decl, result);

      if (!prefixes || !prefixes.length) {
        return;
      }

      this.restoreBefore(decl);
      decl.raws.before = this.calcBefore(prefixes, decl);
    }
    /**
     * Return list of prefixed properties to clean old prefixes
     */

  }, {
    key: "old",
    value: function old(prop, prefix) {
      return [this.prefixed(prop, prefix)];
    }
  }]);

  return Declaration;
}(Prefixer);

module.exports = Declaration;