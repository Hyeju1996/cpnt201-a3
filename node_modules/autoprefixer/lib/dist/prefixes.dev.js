"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var vendor = require('./vendor');

var Declaration = require('./declaration');

var Resolution = require('./resolution');

var Transition = require('./transition');

var Processor = require('./processor');

var Supports = require('./supports');

var Browsers = require('./browsers');

var Selector = require('./selector');

var AtRule = require('./at-rule');

var Value = require('./value');

var utils = require('./utils');

var hackFullscreen = require('./hacks/fullscreen');

var hackPlaceholder = require('./hacks/placeholder');

var hackPlaceholderShown = require('./hacks/placeholder-shown');

var hackFileSelectorButton = require('./hacks/file-selector-button');

var hackFlex = require('./hacks/flex');

var hackOrder = require('./hacks/order');

var hackFilter = require('./hacks/filter');

var hackGridEnd = require('./hacks/grid-end');

var hackAnimation = require('./hacks/animation');

var hackFlexFlow = require('./hacks/flex-flow');

var hackFlexGrow = require('./hacks/flex-grow');

var hackFlexWrap = require('./hacks/flex-wrap');

var hackGridArea = require('./hacks/grid-area');

var hackPlaceSelf = require('./hacks/place-self');

var hackGridStart = require('./hacks/grid-start');

var hackAlignSelf = require('./hacks/align-self');

var hackAppearance = require('./hacks/appearance');

var hackFlexBasis = require('./hacks/flex-basis');

var hackMaskBorder = require('./hacks/mask-border');

var hackMaskComposite = require('./hacks/mask-composite');

var hackAlignItems = require('./hacks/align-items');

var hackUserSelect = require('./hacks/user-select');

var hackFlexShrink = require('./hacks/flex-shrink');

var hackBreakProps = require('./hacks/break-props');

var hackColorAdjust = require('./hacks/color-adjust');

var hackWritingMode = require('./hacks/writing-mode');

var hackBorderImage = require('./hacks/border-image');

var hackAlignContent = require('./hacks/align-content');

var hackBorderRadius = require('./hacks/border-radius');

var hackBlockLogical = require('./hacks/block-logical');

var hackGridTemplate = require('./hacks/grid-template');

var hackInlineLogical = require('./hacks/inline-logical');

var hackGridRowAlign = require('./hacks/grid-row-align');

var hackTransformDecl = require('./hacks/transform-decl');

var hackFlexDirection = require('./hacks/flex-direction');

var hackImageRendering = require('./hacks/image-rendering');

var hackBackdropFilter = require('./hacks/backdrop-filter');

var hackBackgroundClip = require('./hacks/background-clip');

var hackTextDecoration = require('./hacks/text-decoration');

var hackJustifyContent = require('./hacks/justify-content');

var hackBackgroundSize = require('./hacks/background-size');

var hackGridRowColumn = require('./hacks/grid-row-column');

var hackGridRowsColumns = require('./hacks/grid-rows-columns');

var hackGridColumnAlign = require('./hacks/grid-column-align');

var hackOverscrollBehavior = require('./hacks/overscroll-behavior');

var hackGridTemplateAreas = require('./hacks/grid-template-areas');

var hackTextEmphasisPosition = require('./hacks/text-emphasis-position');

var hackTextDecorationSkipInk = require('./hacks/text-decoration-skip-ink');

var hackGradient = require('./hacks/gradient');

var hackIntrinsic = require('./hacks/intrinsic');

var hackPixelated = require('./hacks/pixelated');

var hackImageSet = require('./hacks/image-set');

var hackCrossFade = require('./hacks/cross-fade');

var hackDisplayFlex = require('./hacks/display-flex');

var hackDisplayGrid = require('./hacks/display-grid');

var hackFilterValue = require('./hacks/filter-value');

var hackAutofill = require('./hacks/autofill');

Selector.hack(hackAutofill);
Selector.hack(hackFullscreen);
Selector.hack(hackPlaceholder);
Selector.hack(hackPlaceholderShown);
Selector.hack(hackFileSelectorButton);
Declaration.hack(hackFlex);
Declaration.hack(hackOrder);
Declaration.hack(hackFilter);
Declaration.hack(hackGridEnd);
Declaration.hack(hackAnimation);
Declaration.hack(hackFlexFlow);
Declaration.hack(hackFlexGrow);
Declaration.hack(hackFlexWrap);
Declaration.hack(hackGridArea);
Declaration.hack(hackPlaceSelf);
Declaration.hack(hackGridStart);
Declaration.hack(hackAlignSelf);
Declaration.hack(hackAppearance);
Declaration.hack(hackFlexBasis);
Declaration.hack(hackMaskBorder);
Declaration.hack(hackMaskComposite);
Declaration.hack(hackAlignItems);
Declaration.hack(hackUserSelect);
Declaration.hack(hackFlexShrink);
Declaration.hack(hackBreakProps);
Declaration.hack(hackColorAdjust);
Declaration.hack(hackWritingMode);
Declaration.hack(hackBorderImage);
Declaration.hack(hackAlignContent);
Declaration.hack(hackBorderRadius);
Declaration.hack(hackBlockLogical);
Declaration.hack(hackGridTemplate);
Declaration.hack(hackInlineLogical);
Declaration.hack(hackGridRowAlign);
Declaration.hack(hackTransformDecl);
Declaration.hack(hackFlexDirection);
Declaration.hack(hackImageRendering);
Declaration.hack(hackBackdropFilter);
Declaration.hack(hackBackgroundClip);
Declaration.hack(hackTextDecoration);
Declaration.hack(hackJustifyContent);
Declaration.hack(hackBackgroundSize);
Declaration.hack(hackGridRowColumn);
Declaration.hack(hackGridRowsColumns);
Declaration.hack(hackGridColumnAlign);
Declaration.hack(hackOverscrollBehavior);
Declaration.hack(hackGridTemplateAreas);
Declaration.hack(hackTextEmphasisPosition);
Declaration.hack(hackTextDecorationSkipInk);
Value.hack(hackGradient);
Value.hack(hackIntrinsic);
Value.hack(hackPixelated);
Value.hack(hackImageSet);
Value.hack(hackCrossFade);
Value.hack(hackDisplayFlex);
Value.hack(hackDisplayGrid);
Value.hack(hackFilterValue);
var declsCache = new Map();

var Prefixes =
/*#__PURE__*/
function () {
  function Prefixes(data, browsers) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Prefixes);

    this.data = data;
    this.browsers = browsers;
    this.options = options;

    var _this$preprocess = this.preprocess(this.select(this.data));

    var _this$preprocess2 = _slicedToArray(_this$preprocess, 2);

    this.add = _this$preprocess2[0];
    this.remove = _this$preprocess2[1];
    this.transition = new Transition(this);
    this.processor = new Processor(this);
  }
  /**
   * Return clone instance to remove all prefixes
   */


  _createClass(Prefixes, [{
    key: "cleaner",
    value: function cleaner() {
      if (this.cleanerCache) {
        return this.cleanerCache;
      }

      if (this.browsers.selected.length) {
        var empty = new Browsers(this.browsers.data, []);
        this.cleanerCache = new Prefixes(this.data, empty, this.options);
      } else {
        return this;
      }

      return this.cleanerCache;
    }
    /**
     * Select prefixes from data, which is necessary for selected browsers
     */

  }, {
    key: "select",
    value: function select(list) {
      var _this = this;

      var selected = {
        add: {},
        remove: {}
      };

      var _loop = function _loop(name) {
        var data = list[name];
        var add = data.browsers.map(function (i) {
          var params = i.split(' ');
          return {
            browser: "".concat(params[0], " ").concat(params[1]),
            note: params[2]
          };
        });
        var notes = add.filter(function (i) {
          return i.note;
        }).map(function (i) {
          return "".concat(_this.browsers.prefix(i.browser), " ").concat(i.note);
        });
        notes = utils.uniq(notes);
        add = add.filter(function (i) {
          return _this.browsers.isSelected(i.browser);
        }).map(function (i) {
          var prefix = _this.browsers.prefix(i.browser);

          if (i.note) {
            return "".concat(prefix, " ").concat(i.note);
          } else {
            return prefix;
          }
        });
        add = _this.sort(utils.uniq(add));

        if (_this.options.flexbox === 'no-2009') {
          add = add.filter(function (i) {
            return !i.includes('2009');
          });
        }

        var all = data.browsers.map(function (i) {
          return _this.browsers.prefix(i);
        });

        if (data.mistakes) {
          all = all.concat(data.mistakes);
        }

        all = all.concat(notes);
        all = utils.uniq(all);

        if (add.length) {
          selected.add[name] = add;

          if (add.length < all.length) {
            selected.remove[name] = all.filter(function (i) {
              return !add.includes(i);
            });
          }
        } else {
          selected.remove[name] = all;
        }
      };

      for (var name in list) {
        _loop(name);
      }

      return selected;
    }
    /**
     * Sort vendor prefixes
     */

  }, {
    key: "sort",
    value: function sort(prefixes) {
      return prefixes.sort(function (a, b) {
        var aLength = utils.removeNote(a).length;
        var bLength = utils.removeNote(b).length;

        if (aLength === bLength) {
          return b.length - a.length;
        } else {
          return bLength - aLength;
        }
      });
    }
    /**
     * Cache prefixes data to fast CSS processing
     */

  }, {
    key: "preprocess",
    value: function preprocess(selected) {
      var add = {
        'selectors': [],
        '@supports': new Supports(Prefixes, this)
      };

      for (var name in selected.add) {
        var prefixes = selected.add[name];

        if (name === '@keyframes' || name === '@viewport') {
          add[name] = new AtRule(name, prefixes, this);
        } else if (name === '@resolution') {
          add[name] = new Resolution(name, prefixes, this);
        } else if (this.data[name].selector) {
          add.selectors.push(Selector.load(name, prefixes, this));
        } else {
          var props = this.data[name].props;

          if (props) {
            var value = Value.load(name, prefixes, this);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var prop = _step.value;

                if (!add[prop]) {
                  add[prop] = {
                    values: []
                  };
                }

                add[prop].values.push(value);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          } else {
            var values = add[name] && add[name].values || [];
            add[name] = Declaration.load(name, prefixes, this);
            add[name].values = values;
          }
        }
      }

      var remove = {
        selectors: []
      };

      for (var _name in selected.remove) {
        var _prefixes = selected.remove[_name];

        if (this.data[_name].selector) {
          var selector = Selector.load(_name, _prefixes);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _prefixes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var prefix = _step2.value;
              remove.selectors.push(selector.old(prefix));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        } else if (_name === '@keyframes' || _name === '@viewport') {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = _prefixes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _prefix = _step3.value;
              var prefixed = "@".concat(_prefix).concat(_name.slice(1));
              remove[prefixed] = {
                remove: true
              };
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        } else if (_name === '@resolution') {
          remove[_name] = new Resolution(_name, _prefixes, this);
        } else {
          var _props = this.data[_name].props;

          if (_props) {
            var _value = Value.load(_name, [], this);

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = _prefixes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _prefix2 = _step4.value;

                var old = _value.old(_prefix2);

                if (old) {
                  var _iteratorNormalCompletion5 = true;
                  var _didIteratorError5 = false;
                  var _iteratorError5 = undefined;

                  try {
                    for (var _iterator5 = _props[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                      var _prop = _step5.value;

                      if (!remove[_prop]) {
                        remove[_prop] = {};
                      }

                      if (!remove[_prop].values) {
                        remove[_prop].values = [];
                      }

                      remove[_prop].values.push(old);
                    }
                  } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                        _iterator5["return"]();
                      }
                    } finally {
                      if (_didIteratorError5) {
                        throw _iteratorError5;
                      }
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          } else {
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
              for (var _iterator6 = _prefixes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var p = _step6.value;
                var olds = this.decl(_name).old(_name, p);

                if (_name === 'align-self') {
                  var a = add[_name] && add[_name].prefixes;

                  if (a) {
                    if (p === '-webkit- 2009' && a.includes('-webkit-')) {
                      continue;
                    } else if (p === '-webkit-' && a.includes('-webkit- 2009')) {
                      continue;
                    }
                  }
                }

                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = undefined;

                try {
                  for (var _iterator7 = olds[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var _prefixed = _step7.value;

                    if (!remove[_prefixed]) {
                      remove[_prefixed] = {};
                    }

                    remove[_prefixed].remove = true;
                  }
                } catch (err) {
                  _didIteratorError7 = true;
                  _iteratorError7 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                      _iterator7["return"]();
                    }
                  } finally {
                    if (_didIteratorError7) {
                      throw _iteratorError7;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError6 = true;
              _iteratorError6 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                  _iterator6["return"]();
                }
              } finally {
                if (_didIteratorError6) {
                  throw _iteratorError6;
                }
              }
            }
          }
        }
      }

      return [add, remove];
    }
    /**
     * Declaration loader with caching
     */

  }, {
    key: "decl",
    value: function decl(prop) {
      if (!declsCache.has(prop)) {
        declsCache.set(prop, Declaration.load(prop));
      }

      return declsCache.get(prop);
    }
    /**
     * Return unprefixed version of property
     */

  }, {
    key: "unprefixed",
    value: function unprefixed(prop) {
      var value = this.normalize(vendor.unprefixed(prop));

      if (value === 'flex-direction') {
        value = 'flex-flow';
      }

      return value;
    }
    /**
     * Normalize prefix for remover
     */

  }, {
    key: "normalize",
    value: function normalize(prop) {
      return this.decl(prop).normalize(prop);
    }
    /**
     * Return prefixed version of property
     */

  }, {
    key: "prefixed",
    value: function prefixed(prop, prefix) {
      prop = vendor.unprefixed(prop);
      return this.decl(prop).prefixed(prop, prefix);
    }
    /**
     * Return values, which must be prefixed in selected property
     */

  }, {
    key: "values",
    value: function values(type, prop) {
      var data = this[type];
      var global = data['*'] && data['*'].values;
      var values = data[prop] && data[prop].values;

      if (global && values) {
        return utils.uniq(global.concat(values));
      } else {
        return global || values || [];
      }
    }
    /**
     * Group declaration by unprefixed property to check them
     */

  }, {
    key: "group",
    value: function group(decl) {
      var _this2 = this;

      var rule = decl.parent;
      var index = rule.index(decl);
      var length = rule.nodes.length;
      var unprefixed = this.unprefixed(decl.prop);

      var checker = function checker(step, callback) {
        index += step;

        while (index >= 0 && index < length) {
          var other = rule.nodes[index];

          if (other.type === 'decl') {
            if (step === -1 && other.prop === unprefixed) {
              if (!Browsers.withPrefix(other.value)) {
                break;
              }
            }

            if (_this2.unprefixed(other.prop) !== unprefixed) {
              break;
            } else if (callback(other) === true) {
              return true;
            }

            if (step === +1 && other.prop === unprefixed) {
              if (!Browsers.withPrefix(other.value)) {
                break;
              }
            }
          }

          index += step;
        }

        return false;
      };

      return {
        up: function up(callback) {
          return checker(-1, callback);
        },
        down: function down(callback) {
          return checker(+1, callback);
        }
      };
    }
  }]);

  return Prefixes;
}();

module.exports = Prefixes;