"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Prefixer = require('./prefixer');

var OldValue = require('./old-value');

var vendor = require('./vendor');

var utils = require('./utils');

var Value =
/*#__PURE__*/
function (_Prefixer) {
  _inherits(Value, _Prefixer);

  function Value() {
    _classCallCheck(this, Value);

    return _possibleConstructorReturn(this, _getPrototypeOf(Value).apply(this, arguments));
  }

  _createClass(Value, [{
    key: "check",

    /**
     * Is declaration need to be prefixed
     */
    value: function check(decl) {
      var value = decl.value;

      if (!value.includes(this.name)) {
        return false;
      }

      return !!value.match(this.regexp());
    }
    /**
     * Lazy regexp loading
     */

  }, {
    key: "regexp",
    value: function regexp() {
      return this.regexpCache || (this.regexpCache = utils.regexp(this.name));
    }
    /**
     * Add prefix to values in string
     */

  }, {
    key: "replace",
    value: function replace(string, prefix) {
      return string.replace(this.regexp(), "$1".concat(prefix, "$2"));
    }
    /**
     * Get value with comments if it was not changed
     */

  }, {
    key: "value",
    value: function value(decl) {
      if (decl.raws.value && decl.raws.value.value === decl.value) {
        return decl.raws.value.raw;
      } else {
        return decl.value;
      }
    }
    /**
     * Save values with next prefixed token
     */

  }, {
    key: "add",
    value: function add(decl, prefix) {
      if (!decl._autoprefixerValues) {
        decl._autoprefixerValues = {};
      }

      var value = decl._autoprefixerValues[prefix] || this.value(decl);
      var before;

      do {
        before = value;
        value = this.replace(value, prefix);
        if (value === false) return;
      } while (value !== before);

      decl._autoprefixerValues[prefix] = value;
    }
    /**
     * Return function to fast find prefixed value
     */

  }, {
    key: "old",
    value: function old(prefix) {
      return new OldValue(this.name, prefix + this.name);
    }
  }], [{
    key: "save",

    /**
     * Clone decl for each prefixed values
     */
    value: function save(prefixes, decl) {
      var _this = this;

      var prop = decl.prop;
      var result = [];

      var _loop = function _loop(prefix) {
        var value = decl._autoprefixerValues[prefix];

        if (value === decl.value) {
          return "continue";
        }

        var item = void 0;
        var propPrefix = vendor.prefix(prop);

        if (propPrefix === '-pie-') {
          return "continue";
        }

        if (propPrefix === prefix) {
          item = decl.value = value;
          result.push(item);
          return "continue";
        }

        var prefixed = prefixes.prefixed(prop, prefix);
        var rule = decl.parent;

        if (!rule.every(function (i) {
          return i.prop !== prefixed;
        })) {
          result.push(item);
          return "continue";
        }

        var trimmed = value.replace(/\s+/, ' ');
        var already = rule.some(function (i) {
          return i.prop === decl.prop && i.value.replace(/\s+/, ' ') === trimmed;
        });

        if (already) {
          result.push(item);
          return "continue";
        }

        var cloned = _this.clone(decl, {
          value: value
        });

        item = decl.parent.insertBefore(decl, cloned);
        result.push(item);
      };

      for (var prefix in decl._autoprefixerValues) {
        var _ret = _loop(prefix);

        if (_ret === "continue") continue;
      }

      return result;
    }
  }]);

  return Value;
}(Prefixer);

module.exports = Value;