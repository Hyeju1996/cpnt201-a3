"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('postcss'),
    list = _require.list;

var parser = require('postcss-value-parser');

var Browsers = require('./browsers');

var vendor = require('./vendor');

var Transition =
/*#__PURE__*/
function () {
  function Transition(prefixes) {
    _classCallCheck(this, Transition);

    this.props = ['transition', 'transition-property'];
    this.prefixes = prefixes;
  }
  /**
   * Process transition and add prefixes for all necessary properties
   */


  _createClass(Transition, [{
    key: "add",
    value: function add(decl, result) {
      var _this = this;

      var prefix, prop;
      var add = this.prefixes.add[decl.prop];
      var vendorPrefixes = this.ruleVendorPrefixes(decl);
      var declPrefixes = vendorPrefixes || add && add.prefixes || [];
      var params = this.parse(decl.value);
      var names = params.map(function (i) {
        return _this.findProp(i);
      });
      var added = [];

      if (names.some(function (i) {
        return i[0] === '-';
      })) {
        return;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var param = _step.value;
          prop = this.findProp(param);
          if (prop[0] === '-') continue;
          var prefixer = this.prefixes.add[prop];
          if (!prefixer || !prefixer.prefixes) continue;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = prefixer.prefixes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              prefix = _step3.value;

              if (vendorPrefixes && !vendorPrefixes.some(function (p) {
                return prefix.includes(p);
              })) {
                continue;
              }

              var prefixed = this.prefixes.prefixed(prop, prefix);

              if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {
                if (!this.disabled(prop, prefix)) {
                  added.push(this.clone(prop, prefixed, param));
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      params = params.concat(added);
      var value = this.stringify(params);
      var webkitClean = this.stringify(this.cleanFromUnprefixed(params, '-webkit-'));

      if (declPrefixes.includes('-webkit-')) {
        this.cloneBefore(decl, "-webkit-".concat(decl.prop), webkitClean);
      }

      this.cloneBefore(decl, decl.prop, webkitClean);

      if (declPrefixes.includes('-o-')) {
        var operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));
        this.cloneBefore(decl, "-o-".concat(decl.prop), operaClean);
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = declPrefixes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          prefix = _step2.value;

          if (prefix !== '-webkit-' && prefix !== '-o-') {
            var prefixValue = this.stringify(this.cleanOtherPrefixes(params, prefix));
            this.cloneBefore(decl, prefix + decl.prop, prefixValue);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (value !== decl.value && !this.already(decl, decl.prop, value)) {
        this.checkForWarning(result, decl);
        decl.cloneBefore();
        decl.value = value;
      }
    }
    /**
     * Find property name
     */

  }, {
    key: "findProp",
    value: function findProp(param) {
      var prop = param[0].value;

      if (/^\d/.test(prop)) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = param.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _step4$value = _slicedToArray(_step4.value, 2),
                i = _step4$value[0],
                token = _step4$value[1];

            if (i !== 0 && token.type === 'word') {
              return token.value;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      return prop;
    }
    /**
     * Does we already have this declaration
     */

  }, {
    key: "already",
    value: function already(decl, prop, value) {
      return decl.parent.some(function (i) {
        return i.prop === prop && i.value === value;
      });
    }
    /**
     * Add declaration if it is not exist
     */

  }, {
    key: "cloneBefore",
    value: function cloneBefore(decl, prop, value) {
      if (!this.already(decl, prop, value)) {
        decl.cloneBefore({
          prop: prop,
          value: value
        });
      }
    }
    /**
     * Show transition-property warning
     */

  }, {
    key: "checkForWarning",
    value: function checkForWarning(result, decl) {
      var _this2 = this;

      if (decl.prop !== 'transition-property') {
        return;
      }

      var isPrefixed = false;
      var hasAssociatedProp = false;
      decl.parent.each(function (i) {
        if (i.type !== 'decl') {
          return undefined;
        }

        if (i.prop.indexOf('transition-') !== 0) {
          return undefined;
        }

        var values = list.comma(i.value); // check if current Rule's transition-property comma separated value list needs prefixes

        if (i.prop === 'transition-property') {
          values.forEach(function (value) {
            var lookup = _this2.prefixes.add[value];

            if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {
              isPrefixed = true;
            }
          });
          return undefined;
        } // check if another transition-* prop in current Rule has comma separated value list


        hasAssociatedProp = hasAssociatedProp || values.length > 1;
        return false;
      });

      if (isPrefixed && hasAssociatedProp) {
        decl.warn(result, 'Replace transition-property to transition, ' + 'because Autoprefixer could not support ' + 'any cases of transition-property ' + 'and other transition-*');
      }
    }
    /**
     * Process transition and remove all unnecessary properties
     */

  }, {
    key: "remove",
    value: function remove(decl) {
      var _this3 = this;

      var params = this.parse(decl.value);
      params = params.filter(function (i) {
        var prop = _this3.prefixes.remove[_this3.findProp(i)];

        return !prop || !prop.remove;
      });
      var value = this.stringify(params);

      if (decl.value === value) {
        return;
      }

      if (params.length === 0) {
        decl.remove();
        return;
      }

      var _double = decl.parent.some(function (i) {
        return i.prop === decl.prop && i.value === value;
      });

      var smaller = decl.parent.some(function (i) {
        return i !== decl && i.prop === decl.prop && i.value.length > value.length;
      });

      if (_double || smaller) {
        decl.remove();
        return;
      }

      decl.value = value;
    }
    /**
     * Parse properties list to array
     */

  }, {
    key: "parse",
    value: function parse(value) {
      var ast = parser(value);
      var result = [];
      var param = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = ast.nodes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var node = _step5.value;
          param.push(node);

          if (node.type === 'div' && node.value === ',') {
            result.push(param);
            param = [];
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      result.push(param);
      return result.filter(function (i) {
        return i.length > 0;
      });
    }
    /**
     * Return properties string from array
     */

  }, {
    key: "stringify",
    value: function stringify(params) {
      if (params.length === 0) {
        return '';
      }

      var nodes = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = params[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var param = _step6.value;

          if (param[param.length - 1].type !== 'div') {
            param.push(this.div(params));
          }

          nodes = nodes.concat(param);
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      if (nodes[0].type === 'div') {
        nodes = nodes.slice(1);
      }

      if (nodes[nodes.length - 1].type === 'div') {
        nodes = nodes.slice(0, +-2 + 1 || undefined);
      }

      return parser.stringify({
        nodes: nodes
      });
    }
    /**
     * Return new param array with different name
     */

  }, {
    key: "clone",
    value: function clone(origin, name, param) {
      var result = [];
      var changed = false;
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = param[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var i = _step7.value;

          if (!changed && i.type === 'word' && i.value === origin) {
            result.push({
              type: 'word',
              value: name
            });
            changed = true;
          } else {
            result.push(i);
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      return result;
    }
    /**
     * Find or create separator
     */

  }, {
    key: "div",
    value: function div(params) {
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = params[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var param = _step8.value;
          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = param[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var node = _step9.value;

              if (node.type === 'div' && node.value === ',') {
                return node;
              }
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return {
        type: 'div',
        value: ',',
        after: ' '
      };
    }
  }, {
    key: "cleanOtherPrefixes",
    value: function cleanOtherPrefixes(params, prefix) {
      var _this4 = this;

      return params.filter(function (param) {
        var current = vendor.prefix(_this4.findProp(param));
        return current === '' || current === prefix;
      });
    }
    /**
     * Remove all non-webkit prefixes and unprefixed params if we have prefixed
     */

  }, {
    key: "cleanFromUnprefixed",
    value: function cleanFromUnprefixed(params, prefix) {
      var _this5 = this;

      var remove = params.map(function (i) {
        return _this5.findProp(i);
      }).filter(function (i) {
        return i.slice(0, prefix.length) === prefix;
      }).map(function (i) {
        return _this5.prefixes.unprefixed(i);
      });
      var result = [];
      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = params[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var param = _step10.value;
          var prop = this.findProp(param);
          var p = vendor.prefix(prop);

          if (!remove.includes(prop) && (p === prefix || p === '')) {
            result.push(param);
          }
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
            _iterator10["return"]();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }

      return result;
    }
    /**
     * Check property for disabled by option
     */

  }, {
    key: "disabled",
    value: function disabled(prop, prefix) {
      var other = ['order', 'justify-content', 'align-self', 'align-content'];

      if (prop.includes('flex') || other.includes(prop)) {
        if (this.prefixes.options.flexbox === false) {
          return true;
        }

        if (this.prefixes.options.flexbox === 'no-2009') {
          return prefix.includes('2009');
        }
      }

      return undefined;
    }
    /**
     * Check if transition prop is inside vendor specific rule
     */

  }, {
    key: "ruleVendorPrefixes",
    value: function ruleVendorPrefixes(decl) {
      var parent = decl.parent;

      if (parent.type !== 'rule') {
        return false;
      } else if (!parent.selector.includes(':-')) {
        return false;
      }

      var selectors = Browsers.prefixes().filter(function (s) {
        return parent.selector.includes(':' + s);
      });
      return selectors.length > 0 ? selectors : false;
    }
  }]);

  return Transition;
}();

module.exports = Transition;