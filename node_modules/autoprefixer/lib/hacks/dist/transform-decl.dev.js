"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Declaration = require('../declaration');

var TransformDecl =
/*#__PURE__*/
function (_Declaration) {
  _inherits(TransformDecl, _Declaration);

  function TransformDecl() {
    _classCallCheck(this, TransformDecl);

    return _possibleConstructorReturn(this, _getPrototypeOf(TransformDecl).apply(this, arguments));
  }

  _createClass(TransformDecl, [{
    key: "keyframeParents",

    /**
     * Recursively check all parents for @keyframes
     */
    value: function keyframeParents(decl) {
      var parent = decl.parent;

      while (parent) {
        if (parent.type === 'atrule' && parent.name === 'keyframes') {
          return true;
        }

        ;
        var _parent = parent;
        parent = _parent.parent;
      }

      return false;
    }
    /**
     * Is transform contain 3D commands
     */

  }, {
    key: "contain3d",
    value: function contain3d(decl) {
      if (decl.prop === 'transform-origin') {
        return false;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = TransformDecl.functions3d[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var func = _step.value;

          if (decl.value.includes("".concat(func, "("))) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
    /**
     * Replace rotateZ to rotate for IE 9
     */

  }, {
    key: "set",
    value: function set(decl, prefix) {
      decl = _get(_getPrototypeOf(TransformDecl.prototype), "set", this).call(this, decl, prefix);

      if (prefix === '-ms-') {
        decl.value = decl.value.replace(/rotatez/gi, 'rotate');
      }

      return decl;
    }
    /**
     * Don't add prefix for IE in keyframes
     */

  }, {
    key: "insert",
    value: function insert(decl, prefix, prefixes) {
      if (prefix === '-ms-') {
        if (!this.contain3d(decl) && !this.keyframeParents(decl)) {
          return _get(_getPrototypeOf(TransformDecl.prototype), "insert", this).call(this, decl, prefix, prefixes);
        }
      } else if (prefix === '-o-') {
        if (!this.contain3d(decl)) {
          return _get(_getPrototypeOf(TransformDecl.prototype), "insert", this).call(this, decl, prefix, prefixes);
        }
      } else {
        return _get(_getPrototypeOf(TransformDecl.prototype), "insert", this).call(this, decl, prefix, prefixes);
      }

      return undefined;
    }
  }]);

  return TransformDecl;
}(Declaration);

TransformDecl.names = ['transform', 'transform-origin'];
TransformDecl.functions3d = ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'perspective'];
module.exports = TransformDecl;