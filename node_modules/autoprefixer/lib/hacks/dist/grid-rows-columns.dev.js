"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Declaration = require('../declaration');

var _require = require('./grid-utils'),
    prefixTrackProp = _require.prefixTrackProp,
    prefixTrackValue = _require.prefixTrackValue,
    autoplaceGridItems = _require.autoplaceGridItems,
    getGridGap = _require.getGridGap,
    inheritGridGap = _require.inheritGridGap;

var Processor = require('../processor');

var GridRowsColumns =
/*#__PURE__*/
function (_Declaration) {
  _inherits(GridRowsColumns, _Declaration);

  function GridRowsColumns() {
    _classCallCheck(this, GridRowsColumns);

    return _possibleConstructorReturn(this, _getPrototypeOf(GridRowsColumns).apply(this, arguments));
  }

  _createClass(GridRowsColumns, [{
    key: "prefixed",

    /**
     * Change property name for IE
     */
    value: function prefixed(prop, prefix) {
      if (prefix === '-ms-') {
        return prefixTrackProp({
          prop: prop,
          prefix: prefix
        });
      }

      return _get(_getPrototypeOf(GridRowsColumns.prototype), "prefixed", this).call(this, prop, prefix);
    }
    /**
     * Change IE property back
     */

  }, {
    key: "normalize",
    value: function normalize(prop) {
      return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');
    }
  }, {
    key: "insert",
    value: function insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return _get(_getPrototypeOf(GridRowsColumns.prototype), "insert", this).call(this, decl, prefix, prefixes);
      var parent = decl.parent,
          prop = decl.prop,
          value = decl.value;
      var isRowProp = prop.includes('rows');
      var isColumnProp = prop.includes('columns');
      var hasGridTemplate = parent.some(function (i) {
        return i.prop === 'grid-template' || i.prop === 'grid-template-areas';
      });
      /**
       * Not to prefix rows declaration if grid-template(-areas) is present
       */

      if (hasGridTemplate && isRowProp) {
        return false;
      }

      var processor = new Processor({
        options: {}
      });
      var status = processor.gridStatus(parent, result);
      var gap = getGridGap(decl);
      gap = inheritGridGap(decl, gap) || gap;
      var gapValue = isRowProp ? gap.row : gap.column;

      if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {
        gapValue = null;
      }

      var prefixValue = prefixTrackValue({
        value: value,
        gap: gapValue
      });
      /**
       * Insert prefixes
       */

      decl.cloneBefore({
        prop: prefixTrackProp({
          prop: prop,
          prefix: prefix
        }),
        value: prefixValue
      });
      var autoflow = parent.nodes.find(function (i) {
        return i.prop === 'grid-auto-flow';
      });
      var autoflowValue = 'row';

      if (autoflow && !processor.disabled(autoflow, result)) {
        autoflowValue = autoflow.value.trim();
      }

      if (status === 'autoplace') {
        /**
         * Show warning if grid-template-rows decl is not found
         */
        var rowDecl = parent.nodes.find(function (i) {
          return i.prop === 'grid-template-rows';
        });

        if (!rowDecl && hasGridTemplate) {
          return undefined;
        } else if (!rowDecl && !hasGridTemplate) {
          decl.warn(result, 'Autoplacement does not work without grid-template-rows property');
          return undefined;
        }
        /**
         * Show warning if grid-template-columns decl is not found
         */


        var columnDecl = parent.nodes.find(function (i) {
          return i.prop === 'grid-template-columns';
        });

        if (!columnDecl && !hasGridTemplate) {
          decl.warn(result, 'Autoplacement does not work without grid-template-columns property');
        }
        /**
         * Autoplace grid items
         */


        if (isColumnProp && !hasGridTemplate) {
          autoplaceGridItems(decl, result, gap, autoflowValue);
        }
      }

      return undefined;
    }
  }]);

  return GridRowsColumns;
}(Declaration);

GridRowsColumns.names = ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns'];
module.exports = GridRowsColumns;