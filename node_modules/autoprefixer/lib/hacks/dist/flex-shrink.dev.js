"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var flexSpec = require('./flex-spec');

var Declaration = require('../declaration');

var FlexShrink =
/*#__PURE__*/
function (_Declaration) {
  _inherits(FlexShrink, _Declaration);

  function FlexShrink() {
    _classCallCheck(this, FlexShrink);

    return _possibleConstructorReturn(this, _getPrototypeOf(FlexShrink).apply(this, arguments));
  }

  _createClass(FlexShrink, [{
    key: "normalize",

    /**
     * Return property name by final spec
     */
    value: function normalize() {
      return 'flex-shrink';
    }
    /**
     * Return flex property for 2012 spec
     */

  }, {
    key: "prefixed",
    value: function prefixed(prop, prefix) {
      var spec;

      var _flexSpec = flexSpec(prefix);

      var _flexSpec2 = _slicedToArray(_flexSpec, 2);

      spec = _flexSpec2[0];
      prefix = _flexSpec2[1];

      if (spec === 2012) {
        return prefix + 'flex-negative';
      }

      return _get(_getPrototypeOf(FlexShrink.prototype), "prefixed", this).call(this, prop, prefix);
    }
    /**
     * Ignore 2009 spec and use flex property for 2012
     */

  }, {
    key: "set",
    value: function set(decl, prefix) {
      var spec;

      var _flexSpec3 = flexSpec(prefix);

      var _flexSpec4 = _slicedToArray(_flexSpec3, 2);

      spec = _flexSpec4[0];
      prefix = _flexSpec4[1];

      if (spec === 2012 || spec === 'final') {
        return _get(_getPrototypeOf(FlexShrink.prototype), "set", this).call(this, decl, prefix);
      }

      return undefined;
    }
  }]);

  return FlexShrink;
}(Declaration);

FlexShrink.names = ['flex-shrink', 'flex-negative'];
module.exports = FlexShrink;