"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Declaration = require('../declaration');

var GridEnd =
/*#__PURE__*/
function (_Declaration) {
  _inherits(GridEnd, _Declaration);

  function GridEnd() {
    _classCallCheck(this, GridEnd);

    return _possibleConstructorReturn(this, _getPrototypeOf(GridEnd).apply(this, arguments));
  }

  _createClass(GridEnd, [{
    key: "insert",

    /**
     * Change repeating syntax for IE
     */
    value: function insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return _get(_getPrototypeOf(GridEnd.prototype), "insert", this).call(this, decl, prefix, prefixes);
      var clonedDecl = this.clone(decl);
      var startProp = decl.prop.replace(/end$/, 'start');
      var spanProp = prefix + decl.prop.replace(/end$/, 'span');

      if (decl.parent.some(function (i) {
        return i.prop === spanProp;
      })) {
        return undefined;
      }

      clonedDecl.prop = spanProp;

      if (decl.value.includes('span')) {
        clonedDecl.value = decl.value.replace(/span\s/i, '');
      } else {
        var startDecl;
        decl.parent.walkDecls(startProp, function (d) {
          startDecl = d;
        });

        if (startDecl) {
          var value = Number(decl.value) - Number(startDecl.value) + '';
          clonedDecl.value = value;
        } else {
          decl.warn(result, "Can not prefix ".concat(decl.prop, " (").concat(startProp, " is not found)"));
        }
      }

      decl.cloneBefore(clonedDecl);
      return undefined;
    }
  }]);

  return GridEnd;
}(Declaration);

GridEnd.names = ['grid-row-end', 'grid-column-end'];
module.exports = GridEnd;