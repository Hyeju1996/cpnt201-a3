"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Declaration = require('../declaration');

var BreakProps =
/*#__PURE__*/
function (_Declaration) {
  _inherits(BreakProps, _Declaration);

  function BreakProps() {
    _classCallCheck(this, BreakProps);

    return _possibleConstructorReturn(this, _getPrototypeOf(BreakProps).apply(this, arguments));
  }

  _createClass(BreakProps, [{
    key: "prefixed",

    /**
     * Change name for -webkit- and -moz- prefix
     */
    value: function prefixed(prop, prefix) {
      return "".concat(prefix, "column-").concat(prop);
    }
    /**
     * Return property name by final spec
     */

  }, {
    key: "normalize",
    value: function normalize(prop) {
      if (prop.includes('inside')) {
        return 'break-inside';
      }

      if (prop.includes('before')) {
        return 'break-before';
      }

      return 'break-after';
    }
    /**
     * Change prefixed value for avoid-column and avoid-page
     */

  }, {
    key: "set",
    value: function set(decl, prefix) {
      if (decl.prop === 'break-inside' && decl.value === 'avoid-column' || decl.value === 'avoid-page') {
        decl.value = 'avoid';
      }

      return _get(_getPrototypeOf(BreakProps.prototype), "set", this).call(this, decl, prefix);
    }
    /**
     * Donâ€™t prefix some values
     */

  }, {
    key: "insert",
    value: function insert(decl, prefix, prefixes) {
      if (decl.prop !== 'break-inside') {
        return _get(_getPrototypeOf(BreakProps.prototype), "insert", this).call(this, decl, prefix, prefixes);
      }

      if (/region/i.test(decl.value) || /page/i.test(decl.value)) {
        return undefined;
      }

      return _get(_getPrototypeOf(BreakProps.prototype), "insert", this).call(this, decl, prefix, prefixes);
    }
  }]);

  return BreakProps;
}(Declaration);

BreakProps.names = ['break-inside', 'page-break-inside', 'column-break-inside', 'break-before', 'page-break-before', 'column-break-before', 'break-after', 'page-break-after', 'column-break-after'];
module.exports = BreakProps;