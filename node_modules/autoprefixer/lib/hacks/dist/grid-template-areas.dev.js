"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Declaration = require('../declaration');

var _require = require('./grid-utils'),
    parseGridAreas = _require.parseGridAreas,
    warnMissedAreas = _require.warnMissedAreas,
    prefixTrackProp = _require.prefixTrackProp,
    prefixTrackValue = _require.prefixTrackValue,
    getGridGap = _require.getGridGap,
    warnGridGap = _require.warnGridGap,
    inheritGridGap = _require.inheritGridGap;

function getGridRows(tpl) {
  return tpl.trim().slice(1, -1).split(/["']\s*["']?/g);
}

var GridTemplateAreas =
/*#__PURE__*/
function (_Declaration) {
  _inherits(GridTemplateAreas, _Declaration);

  function GridTemplateAreas() {
    _classCallCheck(this, GridTemplateAreas);

    return _possibleConstructorReturn(this, _getPrototypeOf(GridTemplateAreas).apply(this, arguments));
  }

  _createClass(GridTemplateAreas, [{
    key: "insert",

    /**
     * Translate grid-template-areas to separate -ms- prefixed properties
     */
    value: function insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return _get(_getPrototypeOf(GridTemplateAreas.prototype), "insert", this).call(this, decl, prefix, prefixes);
      var hasColumns = false;
      var hasRows = false;
      var parent = decl.parent;
      var gap = getGridGap(decl);
      gap = inheritGridGap(decl, gap) || gap; // remove already prefixed rows
      // to prevent doubling prefixes

      parent.walkDecls(/-ms-grid-rows/, function (i) {
        return i.remove();
      }); // add empty tracks to rows

      parent.walkDecls(/grid-template-(rows|columns)/, function (trackDecl) {
        if (trackDecl.prop === 'grid-template-rows') {
          hasRows = true;
          var prop = trackDecl.prop,
              value = trackDecl.value;
          trackDecl.cloneBefore({
            prop: prefixTrackProp({
              prop: prop,
              prefix: prefix
            }),
            value: prefixTrackValue({
              value: value,
              gap: gap.row
            })
          });
        } else {
          hasColumns = true;
        }
      });
      var gridRows = getGridRows(decl.value);

      if (hasColumns && !hasRows && gap.row && gridRows.length > 1) {
        decl.cloneBefore({
          prop: '-ms-grid-rows',
          value: prefixTrackValue({
            value: "repeat(".concat(gridRows.length, ", auto)"),
            gap: gap.row
          }),
          raws: {}
        });
      } // warnings


      warnGridGap({
        gap: gap,
        hasColumns: hasColumns,
        decl: decl,
        result: result
      });
      var areas = parseGridAreas({
        rows: gridRows,
        gap: gap
      });
      warnMissedAreas(areas, decl, result);
      return decl;
    }
  }]);

  return GridTemplateAreas;
}(Declaration);

GridTemplateAreas.names = ['grid-template-areas'];
module.exports = GridTemplateAreas;