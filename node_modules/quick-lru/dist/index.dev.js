'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var QuickLRU =
/*#__PURE__*/
function () {
  function QuickLRU() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, QuickLRU);

    if (!(options.maxSize && options.maxSize > 0)) {
      throw new TypeError('`maxSize` must be a number greater than 0');
    }

    this.maxSize = options.maxSize;
    this.onEviction = options.onEviction;
    this.cache = new Map();
    this.oldCache = new Map();
    this._size = 0;
  }

  _createClass(QuickLRU, [{
    key: "_set",
    value: function _set(key, value) {
      this.cache.set(key, value);
      this._size++;

      if (this._size >= this.maxSize) {
        this._size = 0;

        if (typeof this.onEviction === 'function') {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this.oldCache.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _step$value = _slicedToArray(_step.value, 2),
                  _key = _step$value[0],
                  _value = _step$value[1];

              this.onEviction(_key, _value);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }

        this.oldCache = this.cache;
        this.cache = new Map();
      }
    }
  }, {
    key: "get",
    value: function get(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }

      if (this.oldCache.has(key)) {
        var value = this.oldCache.get(key);
        this.oldCache["delete"](key);

        this._set(key, value);

        return value;
      }
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (this.cache.has(key)) {
        this.cache.set(key, value);
      } else {
        this._set(key, value);
      }

      return this;
    }
  }, {
    key: "has",
    value: function has(key) {
      return this.cache.has(key) || this.oldCache.has(key);
    }
  }, {
    key: "peek",
    value: function peek(key) {
      if (this.cache.has(key)) {
        return this.cache.get(key);
      }

      if (this.oldCache.has(key)) {
        return this.oldCache.get(key);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var deleted = this.cache["delete"](key);

      if (deleted) {
        this._size--;
      }

      return this.oldCache["delete"](key) || deleted;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.cache.clear();
      this.oldCache.clear();
      this._size = 0;
    }
  }, {
    key: "keys",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function keys() {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, key;

      return regeneratorRuntime.wrap(function keys$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 3;
              _iterator2 = this[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 12;
                break;
              }

              _step2$value = _slicedToArray(_step2.value, 1), key = _step2$value[0];
              _context.next = 9;
              return key;

            case 9:
              _iteratorNormalCompletion2 = true;
              _context.next = 5;
              break;

            case 12:
              _context.next = 18;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 18:
              _context.prev = 18;
              _context.prev = 19;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 21:
              _context.prev = 21;

              if (!_didIteratorError2) {
                _context.next = 24;
                break;
              }

              throw _iteratorError2;

            case 24:
              return _context.finish(21);

            case 25:
              return _context.finish(18);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "values",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function values() {
      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, value;

      return regeneratorRuntime.wrap(function values$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 3;
              _iterator3 = this[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context2.next = 12;
                break;
              }

              _step3$value = _slicedToArray(_step3.value, 2), value = _step3$value[1];
              _context2.next = 9;
              return value;

            case 9:
              _iteratorNormalCompletion3 = true;
              _context2.next = 5;
              break;

            case 12:
              _context2.next = 18;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](3);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t0;

            case 18:
              _context2.prev = 18;
              _context2.prev = 19;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 21:
              _context2.prev = 21;

              if (!_didIteratorError3) {
                _context2.next = 24;
                break;
              }

              throw _iteratorError3;

            case 24:
              return _context2.finish(21);

            case 25:
              return _context2.finish(18);

            case 26:
            case "end":
              return _context2.stop();
          }
        }
      }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, item, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _item, _item2, key;

      return regeneratorRuntime.wrap(function value$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context3.prev = 3;
              _iterator4 = this.cache[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context3.next = 12;
                break;
              }

              item = _step4.value;
              _context3.next = 9;
              return item;

            case 9:
              _iteratorNormalCompletion4 = true;
              _context3.next = 5;
              break;

            case 12:
              _context3.next = 18;
              break;

            case 14:
              _context3.prev = 14;
              _context3.t0 = _context3["catch"](3);
              _didIteratorError4 = true;
              _iteratorError4 = _context3.t0;

            case 18:
              _context3.prev = 18;
              _context3.prev = 19;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 21:
              _context3.prev = 21;

              if (!_didIteratorError4) {
                _context3.next = 24;
                break;
              }

              throw _iteratorError4;

            case 24:
              return _context3.finish(21);

            case 25:
              return _context3.finish(18);

            case 26:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context3.prev = 29;
              _iterator5 = this.oldCache[Symbol.iterator]();

            case 31:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context3.next = 40;
                break;
              }

              _item = _step5.value;
              _item2 = _slicedToArray(_item, 1), key = _item2[0];

              if (this.cache.has(key)) {
                _context3.next = 37;
                break;
              }

              _context3.next = 37;
              return _item;

            case 37:
              _iteratorNormalCompletion5 = true;
              _context3.next = 31;
              break;

            case 40:
              _context3.next = 46;
              break;

            case 42:
              _context3.prev = 42;
              _context3.t1 = _context3["catch"](29);
              _didIteratorError5 = true;
              _iteratorError5 = _context3.t1;

            case 46:
              _context3.prev = 46;
              _context3.prev = 47;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 49:
              _context3.prev = 49;

              if (!_didIteratorError5) {
                _context3.next = 52;
                break;
              }

              throw _iteratorError5;

            case 52:
              return _context3.finish(49);

            case 53:
              return _context3.finish(46);

            case 54:
            case "end":
              return _context3.stop();
          }
        }
      }, value, this, [[3, 14, 18, 26], [19,, 21, 25], [29, 42, 46, 54], [47,, 49, 53]]);
    })
  }, {
    key: "size",
    get: function get() {
      var oldCacheSize = 0;
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = this.oldCache.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var key = _step6.value;

          if (!this.cache.has(key)) {
            oldCacheSize++;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return Math.min(this._size + oldCacheSize, this.maxSize);
    }
  }]);

  return QuickLRU;
}();

module.exports = QuickLRU;